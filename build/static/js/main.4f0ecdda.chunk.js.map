{"version":3,"sources":["hooks/useShallowEqualSelector.ts","containers/Private.tsx","modules/Chat/actions.ts","hooks/useActions.ts","services/api.ts","services/chat.ts","services/notification.ts","services/socket.ts","components/MainMenu/index.tsx","modules/Modals/actions.ts","modules/Auth/actions.ts","containers/ModalWindow.tsx","services/user.ts","components/PhotoUploader/index.tsx","components/Modals/UserProfile/index.tsx","components/UserMenu/index.tsx","components/Modals/ContactInfo/index.tsx","components/Modals/ChannelInfo/index.tsx","components/Modals/AddToChannel/index.tsx","components/App/Header/index.tsx","containers/Scrollbar.tsx","components/Modals/CreateChannel/index.tsx","components/Modals/AddContact/index.tsx","components/App/Sidebar/SidebarMenu/index.tsx","components/App/Sidebar/index.tsx","hooks/useEscape.ts","containers/PrivateRoute.tsx","services/auth.ts","components/Auth/Login/index.tsx","components/Auth/ChangePassword/index.tsx","components/Auth/Activation/index.tsx","components/Auth/Register/index.tsx","components/Auth/Recover/index.tsx","components/Chat/Messages/index.tsx","components/Chat/InputMessage/index.tsx","components/Chat/index.tsx","components/Routes/index.tsx","components/App/index.tsx","modules/Auth/sagas.ts","modules/Auth/reducer.ts","modules/Chat/reducer.ts","modules/Modals/reducer.ts","modules/launchSaga.ts","modules/index.ts","modules/store.ts","reportWebVitals.ts","index.tsx"],"names":["useShallowEqualSelector","selector","useSelector","shallowEqual","PrivateContainer","children","state","auth","user","addChannel","createAction","setActiveChannel","initChannelsData","populateChannel","addChannelMember","addContact","removeContact","initContactsData","sendChannelMessage","sendContactMessage","useActions","actions","deps","dispatch","useDispatch","useMemo","Array","isArray","map","a","bindActionCreators","AUTH_TOKEN_STORAGE_KEY","makeError","error","data","response","status","message","type","apiService","getToken","localStorage","getItem","send","method","endpoint","payload","axios","interceptors","request","use","config","token","headers","Authorization","NotificationPlacement","chatService","createChannel","api","getChannels","channels","channelsList","populatedChannels","reduce","acc","id","ownerId","name","members","photo","messages","populated","getContacts","contactsList","userId","contacts","populatedContacts","length","email","role","isContactRequest","isInvite","text","inviteToContacts","contactId","removeInvite","inviterId","addToChannel","socketService","socket","undefined","connect","io","autoConnect","subscribeToChannels","Object","keys","emit","subscribeToChannel","channelId","inviteToChannel","disconnect","subscribeToDisconnect","on","reason","subscribeToChannelMessageBroadcast","cb","activeChannelId","subscribeToContactMessagePrivate","from","inviteContactRequest","to","contact","subscribeToInviteContact","addContactRequest","removeInviteRequest","subscribeToRemoveInvite","cancelInviteRequest","subscribeToCancelInvite","subscribeToAddContact","addToChannelRequest","inviterName","channel","subscribeToAddToChannel","unsubscribeFromSocketEvents","forEach","event","off","notify","description","notification","success","placement","BOTTOM_RIGHT","menuItems","key","label","path","icon","PieChartOutlined","MainMenu","location","useLocation","history","useHistory","find","item","pathname","mode","selectedKeys","onClick","clicked","_item","push","Item","changeCreateChannelModalState","changeUserProfileModalState","changeAddContactModalState","changeContactInfoModalState","changeChannelInfoModalState","changeAddToChannelModalState","userLoginRequest","userLogoutRequest","userFetchSuccess","userFetchFailure","userUpdatePhoto","userAddContact","userRemoveContact","ModalWindow","props","title","visible","onOk","onCancel","afterClose","destroyOnClose","footer","style","centered","userService","changePhoto","populateUsers","beforeUpload","file","isJpgOrPng","isLt2M","size","getBase64","src","url","Promise","resolve","reader","FileReader","readAsDataURL","originFileObj","onload","img","Image","target","result","el","elem","document","createElement","scaleFactor","width","height","ctx","getContext","drawImage","srcEncoded","canvas","toDataURL","onPreview","image","window","open","write","outerHTML","PhotoUploader","preloadedPhoto","onChangePhoto","onRemovePhoto","initialPhoto","useState","fileList","setFileList","onChange","newFileList","imageUrl","className","rotate","shape","modalTitle","modalOk","modalCancel","listType","customRequest","options","onSuccess","UserProfile","loading","setLoading","setPhoto","userProfile","modals","dispatchUserUpdatePhoto","dispatchChangeUserProfileModalState","onSaveChanges","indicator","LoadingOutlined","fontSize","spin","delay","disabled","UserMenu","dispatchUserLogoutRequest","menu","ProfileOutlined","Divider","LogoutOutlined","overlay","trigger","UserOutlined","Title","Typography","Paragraph","Text","ContactInfo","activeContact","dispatchChangeContactInfoModalState","dispatchRemoveContact","dispatchUserRemoveContact","dispatchActiveChannel","dispatchAddContact","chat","contactInfo","removeContactHandler","serverMessage","cancelInviteHandler","removeInviteHandler","addContactHandler","align","flex","level","block","danger","ChannelInfo","activeChannel","dispatchChangeChannelInfoModalState","dispatchChangeAddToChannelModalState","disaptchPopulateChannel","channelInfo","useEffect","ids","JSON","stringify","owner","member","populateChannelRequest","leaveChannel","header","PlusCircleOutlined","itemLayout","dataSource","renderItem","Meta","avatar","ClockCircleTwoTone","color","AddToChannel","addToChannelModalState","Form","useForm","form","dispatchAddChannelMember","addToChannelHandler","values","channelName","resetFields","invitedUser","layout","onFinish","rules","required","min","prefix","MailOutlined","placeholder","htmlType","AntHeader","Layout","Header","chatInfoRef","useRef","onSidebarToggle","sidebarCollapsed","onTriggerClick","menuTrigger","MenuUnfoldOutlined","padding","MenuFoldOutlined","membersCount","activeChat","onKeyDown","current","focus","ref","tabIndex","renderTrackVertical","ownProps","backgroundColor","right","bottom","top","borderRadius","renderThumbVertical","boxShadow","Scrollbar","hideTracksWhenNotNeeded","autoHide","autoHideTimeout","CreateChannel","dispatchAddChannel","dispatchChangeCreateChannelModalState","createChannelHandler","activeChannelPayload","max","TextArea","Input","AddContact","addContactModalState","dispatchChangeAddContactModalState","inviterEmail","inviterContacts","addContactPayload","contactAdded","rows","SidebarMenu","UsergroupAddOutlined","UserAddOutlined","ContactsOutlined","SettingOutlined","MenuOutlined","Sider","Sidebar","onEscape","sidebarLocked","setSidebarLocked","handleEsc","addEventListener","removeEventListener","onClickMenu","split","channelType","intChannelId","parseInt","selectedMenuKey","collapsed","collapsedWidth","theme","overflow","LockOutlined","UnlockOutlined","entries","PrivateRoute","Component","component","rest","render","routeProps","defaultProps","authService","register","activate","code","login","fetchByToken","recover","checkSecret","changePassword","setToken","setItem","removeToken","removeItem","Login","emptyMessage","alert","setAlert","dispatchUserLoginRequest","password","initialValues","remember","Password","noStyle","ChangePassword","useParams","secretError","setSecretError","changeSuccess","setChangeSuccess","secretType","match","dependencies","getFieldValue","validator","_","value","reject","Error","Activation","activateUser","Register","validateTrigger","pattern","Recover","Messages","InputMessage","memo","sendMessage","autoFocus","SendOutlined","Chat","dispatchSendChannelMessage","dispatchSendContactMessage","onSendMessage","useCallback","nanoid","showIcon","responseType","channelData","Routes","exact","Content","App","setSidebarCollapsed","dispatchInitChannelsData","dispatchInitContactsData","isCollapsed","channelsData","contactsData","subscribeToSocketEvents","userLoginRequestFlow","userLoginWatcher","userLogoutRequestFlow","userLogoutWatcher","put","call","takeEvery","authSagas","generator","fork","handleActions","_state","action","updatedContacts","parse","filter","oldContacts","authReducer","combineReducers","addMessage","newState","chatReducer","modalsReducer","launchSaga","rootSaga","rootReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","sagaMiddleware","createSagaMiddleware","createStore","compose","composeWithDevTools","applyMiddleware","run","createAppStore","getElementById"],"mappings":"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","file":"static/js/main.4f0ecdda.chunk.js","sourcesContent":["import { useSelector, shallowEqual } from 'react-redux'\nimport { IRootState } from 'modules'\n\nconst useShallowEqualSelector = (selector: any) =>\n  useSelector<IRootState>(selector, shallowEqual)\n\nexport { useShallowEqualSelector }\n","import { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\n\nconst PrivateContainer = ({ children }) => {\n  const user = useShallowEqualSelector((state) => state.auth.user)\n  if (!user) return null\n\n  return children\n}\n\nexport { PrivateContainer }\n","import { createAction } from 'redux-actions'\r\n\r\n/** Добавление нового канала */\r\nexport const addChannel: any = createAction('CHAT/ADD_CHANNEL')\r\n/** Установить активный канал чата (id, label) */\r\nexport const setActiveChannel: any = createAction('CHAT/SET_ACTIVE_CHANNEL')\r\n/** Начальное состояние каналов на момент захода пользователя */\r\nexport const initChannelsData: any = createAction('CHAT/INIT_CHANNELS_DATA')\r\n/** Дополнить данные о канале */\r\nexport const populateChannel: any = createAction('CHAT/POPULATE_CHANNEL')\r\n/** Добавить пользователя в канал */\r\nexport const addChannelMember: any = createAction('CHAT/ADD_CHANNEL_MEMBER')\r\n\r\n/** Добавление нового контакта */\r\nexport const addContact: any = createAction('CHAT/ADD_CONTACT')\r\n/** Удаление контакта */\r\nexport const removeContact: any = createAction('CHAT/REMOVE_CONTACT')\r\n/** Начальное состояние контактов на момент захода пользователя */\r\nexport const initContactsData: any = createAction('CHAT/INIT_CONTACTS_DATA')\r\n/** Отправить сообщение в чат канала */\r\nexport const sendChannelMessage: any = createAction('CHAT/SEND_CHANNEL_MESSAGE')\r\n/** Отправить приватное сообщение пользователю */\r\nexport const sendContactMessage: any = createAction('CHAT/SEND_CONTACT_MESSAGE')\r\n","import { bindActionCreators } from 'redux'\nimport { useDispatch } from 'react-redux'\nimport { useMemo } from 'react'\n\nconst useActions = (actions, deps) => {\n  const dispatch = useDispatch()\n\n  return useMemo(\n    () => {\n      if (Array.isArray(actions)) {\n        return actions.map((a) => bindActionCreators(a, dispatch))\n      }\n      return bindActionCreators(actions, dispatch)\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    deps ? [dispatch, ...deps] : [dispatch]\n  )\n}\n\nexport { useActions }\n","import axios, { AxiosRequestConfig, AxiosResponse } from 'axios'\n\nexport interface IServerResponse {\n  type: any\n  message?: string\n  data?: any\n  errors?: string[]\n  token?: string\n}\n\ninterface IServerError {\n  response: IErrorResponse\n}\n\ninterface IErrorResponse {\n  data?: any\n  status: number\n}\n\n/** Сообщение при недоступном соединении */\nexport const SERVER_UNAVAILABLE =\n  'Сервер не отвечает или временно недоступен. Попробуйте повторить запрос позднее.'\n\n/** Ключ, по которому в localStorage хранится токен */\nexport const AUTH_TOKEN_STORAGE_KEY = 'auth'\n\n/** Отказ в предоставлении ресурса из-за неверного токена */\nexport const AUTH_REJECTION_MESSAGE =\n  'Войдите или зарегистрируйтесь для просмотра данного содержимого.'\n\nexport const makeError = (error: IServerError): IServerResponse => {\n  const data = error?.response?.data\n  const status = error?.response?.status\n\n  if (typeof data === 'string' && (status === 502 || status === 500)) {\n    return {\n      type: 'error',\n      message: SERVER_UNAVAILABLE\n    }\n  }\n\n  if (data?.message === 'No authorization token was found') {\n    return {\n      type: 'error',\n      message: AUTH_REJECTION_MESSAGE\n    }\n  }\n\n  return data\n}\n\nconst apiService = {\n  getToken: (): string | null => localStorage.getItem(AUTH_TOKEN_STORAGE_KEY),\n\n  send: async ({\n    method,\n    endpoint,\n    payload = {}\n  }): Promise<IServerResponse> => {\n    try {\n      const response: AxiosResponse = await axios[method](endpoint, payload)\n      return response.data\n    } catch (error) {\n      return makeError(error)\n    }\n  }\n}\n\naxios.interceptors.request.use(\n  (config: AxiosRequestConfig) => {\n    const token = apiService.getToken()\n\n    if (token) {\n      // eslint-disable-next-line no-param-reassign\n      config.headers = {\n        Authorization: `Bearer ${token}`\n      }\n    }\n\n    return config\n  },\n  (error) => makeError(error)\n)\n\nexport { apiService }\n","import { apiService as api, IServerResponse } from './api'\n\nexport interface ICreateChannelPayload {\n  name: string\n  description?: string\n  photo?: string\n  ownerId: number\n}\n\nexport interface IAddContactRequestPayload {\n  inviterId: number\n  userId: number\n}\n\nexport interface IRemoveContactPayload {\n  userId: number\n  contactId: number\n}\n\nexport interface IInviteToContactsRequestPayload {\n  inviterId: number\n  inviterName: string\n  inviterEmail: string\n  inviterContacts: string\n  email: string\n  text?: string\n}\n\nexport interface ICancelAddContactPayload {\n  inviterId: number\n  userId: number\n}\n\nexport interface IAddToChannelPayload {\n  channelId: number\n  channelName: string\n  email: string\n}\n\nconst chatService = {\n  /** Создать канал */\n  createChannel: async (\n    payload: ICreateChannelPayload\n  ): Promise<IServerResponse> =>\n    api.send({\n      method: 'put',\n      endpoint: '/api/v1/chat/channel',\n      payload\n    }),\n\n  /** Получить список каналов пользователя с развернутыми данными */\n  getChannels: async (channels) => {\n    let channelsList = null\n\n    if (channels) {\n      const populatedChannels = await api.send({\n        method: 'post',\n        endpoint: `/api/v1/chat/channels/populate`,\n        payload: { channels }\n      })\n\n      channelsList = populatedChannels?.data.reduce(\n        (acc, { id, ownerId, name, members, photo }) => ({\n          ...acc,\n          [id]: {\n            ownerId,\n            name,\n            members,\n            type: 'channel',\n            photo,\n            messages: [],\n            populated: false\n          }\n        }),\n        {}\n      )\n    }\n\n    return channelsList\n  },\n\n  /** Получить список контактов пользователя с развернутыми данными */\n  getContacts: async (user) => {\n    let contactsList = null\n    const { id: userId, contacts } = user\n\n    const populatedContacts = await api.send({\n      method: 'post',\n      endpoint: `/api/v1/chat/contacts/populate`,\n      payload: { userId, contacts }\n    })\n\n    if (populatedContacts?.data?.length) {\n      contactsList = populatedContacts.data.reduce(\n        (\n          acc,\n          { id, name, email, photo, role, isContactRequest, isInvite, text }\n        ) => ({\n          ...acc,\n          [id]: {\n            name,\n            email,\n            photo,\n            role,\n            isContactRequest,\n            isInvite,\n            text,\n            type: 'contact',\n            messages: []\n          }\n        }),\n        {}\n      )\n    } else {\n      contactsList = null\n    }\n\n    return contactsList\n  },\n\n  /** Добавление нового контакта */\n  addContact: async (\n    payload: IAddContactRequestPayload\n  ): Promise<IServerResponse> =>\n    api.send({\n      method: 'patch',\n      endpoint: '/api/v1/chat/contacts',\n      payload\n    }),\n\n  /** Запрос на добавление в контакты */\n  inviteToContacts: async (\n    payload: IInviteToContactsRequestPayload\n  ): Promise<IServerResponse> =>\n    api.send({\n      method: 'put',\n      endpoint: '/api/v1/chat/contact/invite',\n      payload\n    }),\n\n  /** Удалить контакт */\n  removeContact: async (\n    payload: IRemoveContactPayload\n  ): Promise<IServerResponse> => {\n    const { userId, contactId } = payload\n    return api.send({\n      method: 'delete',\n      endpoint: `/api/v1/chat/${userId}/contact/${contactId}`\n    })\n  },\n\n  /** Отмена инвайта */\n  removeInvite: async (\n    payload: ICancelAddContactPayload\n  ): Promise<IServerResponse> => {\n    const { inviterId, userId } = payload\n    return api.send({\n      method: 'delete',\n      endpoint: `/api/v1/chat/inviter/${inviterId}/contact/${userId}`\n    })\n  },\n\n  /** Добавление пользователя в канал */\n  addToChannel: async (\n    payload: IAddToChannelPayload\n  ): Promise<IServerResponse> =>\n    api.send({\n      method: 'patch',\n      endpoint: '/api/v1/chat/channel/adduser',\n      payload\n    })\n}\n\nexport { chatService }\n","import { notification } from 'antd'\n\nenum NotificationPlacement {\n  TOP_LEFT = 'topLeft',\n  TOP_RIGHT = 'topRight',\n  BOTTOM_LEFT = 'bottomLeft',\n  BOTTOM_RIGHT = 'bottomRight'\n}\n\n// @todo refactor\nconst notify = {\n  info: (message: string, description: string = ''): void =>\n    notification.info({\n      message,\n      description,\n      placement: NotificationPlacement.BOTTOM_RIGHT\n    }),\n  success: (message: string, description: string = ''): void =>\n    notification.success({\n      message,\n      description,\n      placement: NotificationPlacement.BOTTOM_RIGHT\n    }),\n  warning: (message: string, description: string = ''): void =>\n    notification.warning({\n      message,\n      description,\n      placement: NotificationPlacement.BOTTOM_RIGHT\n    }),\n  error: (message: string, description: string = ''): void =>\n    notification.error({\n      message,\n      description,\n      placement: NotificationPlacement.BOTTOM_RIGHT\n    })\n}\n\nexport { notify }\n","import { io } from 'socket.io-client'\nimport { chatService } from 'services/chat'\nimport { UserDTO } from './user'\n\nconst socketService = {\n  socket: undefined,\n\n  connect: async (user: UserDTO) => {\n    if (!socketService.socket) {\n      socketService.socket = io('/chat', { autoConnect: false })\n      socketService.socket.auth = { userId: user.id }\n      socketService.socket.connect()\n    }\n  },\n\n  subscribeToChannels: async (user: UserDTO) => {\n    const channels = await chatService.getChannels(user.channels)\n    const contacts = await chatService.getContacts(user)\n\n    if (user.channels) {\n      const channelsList = Object.keys(channels)\n      socketService.socket.emit('channels:subscribe', channelsList)\n    }\n\n    return { channels, contacts }\n  },\n\n  subscribeToChannel: async (channelId: number) => {\n    socketService.socket.emit('channel:subscribe', channelId)\n  },\n\n  inviteToChannel: async (userId: number, channelId: number) => {\n    socketService.socket.emit('channel:invite', { userId, channelId })\n  },\n\n  sendChannelMessage: (payload) => {\n    socketService.socket.emit('channel:message:send', payload)\n  },\n\n  sendContactMessage: (payload) => {\n    socketService.socket.emit('contact:message:send', payload)\n  },\n\n  disconnect: () => {\n    socketService.socket.disconnect()\n    socketService.socket = undefined\n  },\n\n  /** Ручное пересоздание соединения в случае дисконнекта с серверной стороны */\n  subscribeToDisconnect: (user) => {\n    if (!socketService.socket) return\n\n    socketService.socket.on('disconnect', (reason: string) => {\n      if (reason === 'transport error' || reason === 'ping timeout') {\n        if (!user) return\n        socketService.disconnect()\n        socketService.connect(user)\n      }\n    })\n  },\n\n  subscribeToChannelMessageBroadcast: (cb) => {\n    if (!socketService.socket) return\n\n    socketService.socket.on(\n      'channel:message:broadcast',\n      ({ activeChannelId, message }) => {\n        cb({ activeChannelId, message })\n      }\n    )\n  },\n\n  subscribeToContactMessagePrivate: (cb) => {\n    if (!socketService.socket) return\n\n    socketService.socket.on('contact:message:private', ({ message, from }) => {\n      cb(message, from)\n    })\n  },\n\n  inviteContactRequest: ({ to, contact }) => {\n    socketService.socket.emit('contact:invite:request', { to, contact })\n  },\n\n  subscribeToInviteContact: (cb) => {\n    if (!socketService.socket) return\n\n    socketService.socket.on('contact:invite', (payload) => {\n      cb(payload)\n    })\n  },\n\n  addContactRequest: ({ to, contact }) => {\n    socketService.socket.emit('contact:add:request', { to, contact })\n  },\n\n  removeInviteRequest: ({ to, contact }) => {\n    socketService.socket.emit('invite:remove:request', { to, contact })\n  },\n\n  subscribeToRemoveInvite: (cb) => {\n    if (!socketService.socket) return\n\n    socketService.socket.on('invite:remove', (payload) => {\n      cb(payload)\n    })\n  },\n\n  cancelInviteRequest: ({ to, contact }) => {\n    socketService.socket.emit('invite:cancel:request', { to, contact })\n  },\n\n  subscribeToCancelInvite: (cb) => {\n    if (!socketService.socket) return\n\n    socketService.socket.on('invite:cancel', (payload) => {\n      cb(payload)\n    })\n  },\n\n  subscribeToAddContact: (cb) => {\n    if (!socketService.socket) return\n\n    socketService.socket.on('contact:add', (payload) => {\n      cb(payload)\n    })\n  },\n\n  addToChannelRequest: ({ to, inviterName, channel }) => {\n    socketService.socket.emit('channel:adduser:request', {\n      to,\n      inviterName,\n      channel\n    })\n  },\n\n  subscribeToAddToChannel: (cb) => {\n    if (!socketService.socket) return\n\n    socketService.socket.on('channel:adduser', (payload) => {\n      cb(payload)\n    })\n  },\n\n  unsubscribeFromSocketEvents: () => {\n    if (!socketService.socket) return\n\n    const events = [\n      'channel:message:send',\n      'channel:message:broadcast',\n      'contact:message:private',\n      'contact:message:send',\n      'contact:invite:request',\n      'contact:invite',\n      'contact:add:request',\n      'contact:add',\n      'invite:remove:request',\n      'invite:remove'\n    ]\n\n    events.forEach((event) => {\n      socketService.socket.off(event)\n    })\n  }\n}\n\nexport { socketService }\n","import { FC } from 'react'\nimport { useLocation, useHistory } from 'react-router-dom'\nimport { Menu } from 'antd'\nimport { PieChartOutlined } from '@ant-design/icons'\n\nconst menuItems = [\n  {\n    key: 'login',\n    label: 'Войти',\n    path: '/auth/login',\n    icon: <PieChartOutlined />\n  },\n  {\n    key: 'register',\n    label: 'Регистрация',\n    path: '/auth/register',\n    icon: <PieChartOutlined />\n  }\n]\n\nconst MainMenu: FC = () => {\n  const location = useLocation()\n  const history = useHistory()\n\n  const key = menuItems.find((item) => location.pathname === item.path)?.key\n  if (!key) return null\n\n  const onClickMenu = (item) => {\n    if (item.key === key) return\n    const clicked = menuItems.find((_item) => _item.key === item.key)\n    history.push(clicked.path)\n  }\n\n  return (\n    <Menu mode=\"horizontal\" selectedKeys={[key]} onClick={onClickMenu}>\n      {menuItems.map((item) => (\n        <Menu.Item key={item.key} icon={item.icon}>\n          {item.label}\n        </Menu.Item>\n      ))}\n    </Menu>\n  )\n}\n\nexport { MainMenu }\n","import { createAction } from 'redux-actions'\n\n/** Модальное окно создания канала */\nexport const changeCreateChannelModalState: any = createAction(\n  'MODALS/CHANGE_CREATE_CHANNEL_MODAL_STATE'\n)\n/** Модальное окно профиля пользователя */\nexport const changeUserProfileModalState: any = createAction(\n  'MODALS/CHANGE_USER_PROFILE_MODAL_STATE'\n)\n/** Модальное окно добавления контакта */\nexport const changeAddContactModalState: any = createAction(\n  'MODALS/CHANGE_ADD_CONTACT_MODAL_STATE'\n)\n\n/** Модальное окно информации о контакте */\nexport const changeContactInfoModalState: any = createAction(\n  'MODALS/CHANGE_CONTACT_INFO_MODAL_STATE'\n)\n\n/** Модальное окно информации о канале */\nexport const changeChannelInfoModalState: any = createAction(\n  'MODALS/CHANGE_CHANNEL_INFO_MODAL_STATE'\n)\n\n/** Модальное окно добавления пользователя в канал */\nexport const changeAddToChannelModalState: any = createAction(\n  'MODALS/CHANGE_ADD_TO_CHANNEL_MODAL_STATE'\n)\n","import { createAction } from 'redux-actions'\r\n\r\n/** Записать токен пользователя в стор */\r\nexport const userLoginRequest: any = createAction('AUTH/USER_LOGIN_REQUEST')\r\n\r\n/** Выход пользователя из системы (logout) */\r\nexport const userLogoutRequest: any = createAction('AUTH/USER_LOGOUT_REQUEST')\r\n\r\n/** Записать объект пользователя в стор */\r\nexport const userFetchSuccess: any = createAction('AUTH/USER_FETCH_SUCCESS')\r\n\r\n/** Ошибка получения объекта пользователя */\r\nexport const userFetchFailure: any = createAction('AUTH/USER_FETCH_FAILURE')\r\n\r\n/** Обновление объекта пользователя (фото) */\r\nexport const userUpdatePhoto: any = createAction('AUTH/USER_UPDATE_PHOTO')\r\n\r\n/** Добавление контакта пользователя */\r\nexport const userAddContact: any = createAction('AUTH/USER_ADD_CONTACT')\r\n\r\n/** Удаление контакта пользователя */\r\nexport const userRemoveContact: any = createAction('AUTH/USER_REMOVE_CONTACT')\r\n","import { FC, Component, ReactElement } from 'react'\nimport { Modal } from 'antd'\n\ninterface IModalWindowProps {\n  title?: string\n  visible?: boolean\n  centered?: boolean\n  onOk?: () => any | null\n  onCancel?: () => any | null\n  afterClose?: () => any | null\n  destroyOnClose?: boolean\n  footer?: Component[] | FC[] | ReactElement[] | null\n  style?: object | null\n}\n\nconst ModalWindow: FC<IModalWindowProps> = (props) => {\n  const {\n    children,\n    title = '',\n    visible = false,\n    onOk = null,\n    onCancel = null,\n    afterClose = null,\n    destroyOnClose = true,\n    footer = null,\n    style = null\n  } = props\n\n  return (\n    <Modal\n      centered\n      title={title}\n      visible={visible}\n      onOk={onOk}\n      onCancel={onCancel}\n      afterClose={afterClose}\n      destroyOnClose={destroyOnClose}\n      footer={footer}\n      style={style}\n    >\n      {children}\n    </Modal>\n  )\n}\n\nexport { ModalWindow }\n","import { apiService as api, IServerResponse } from './api'\n\nexport interface UserDTO {\n  id: number\n  name: string\n  email: string\n  photo: string\n  role: string\n  channels: string\n  contacts: string\n}\n\nexport interface IChangePhotoRequestPayload {\n  id: number\n  photo: string\n}\n\nexport interface IPopulateUsersPayload {\n  ids: string\n}\n\nconst userService = {\n  /** Изменить или удалить фото пользователя */\n  changePhoto: async (\n    payload: IChangePhotoRequestPayload\n  ): Promise<IServerResponse> =>\n    api.send({\n      method: 'patch',\n      endpoint: '/api/v1/user/photo',\n      payload\n    }),\n\n  /** Получить информацию о нескольких пользователях */\n  populateUsers: async (\n    payload: IPopulateUsersPayload\n  ): Promise<IServerResponse> =>\n    api.send({\n      method: 'post',\n      endpoint: '/api/v1/users/populate',\n      payload\n    })\n}\n\nexport { userService }\n","import { FC, useState } from 'react'\nimport { message, Upload } from 'antd'\nimport ImgCrop from 'antd-img-crop'\n\ninterface IPhotoUploaderProps {\n  /** base64 photo url */\n  preloadedPhoto?: string | null\n  onChangePhoto?: (imageUrl: string) => void\n  onRemovePhoto?: () => void\n}\n\nconst beforeUpload = (file) => {\n  const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png'\n  if (!isJpgOrPng) {\n    message.error('Допустимые форматы файлов: JPG или PNG!')\n  }\n  const isLt2M = file.size / 1024 / 1024 < 2\n  if (!isLt2M) {\n    message.error('Размер изображения не должен превышать 2Мб!')\n  }\n  return isJpgOrPng && isLt2M\n}\n\nconst getBase64 = async (file): Promise<string> => {\n  let src = file.url\n  const resizeWidth = 300\n\n  if (!src) {\n    src = await new Promise((resolve) => {\n      const reader = new FileReader()\n      reader.readAsDataURL(file.originFileObj)\n      reader.onload = (event) => {\n        const img = new Image()\n        img.src = event.target.result as string\n        img.onload = (el: any) => {\n          const elem = document.createElement('canvas')\n          const scaleFactor = resizeWidth / el.target.width\n          elem.width = resizeWidth\n          elem.height = el.target.height * scaleFactor\n          const ctx = elem.getContext('2d')\n          ctx.drawImage(el.target, 0, 0, elem.width, elem.height)\n          const srcEncoded = ctx.canvas.toDataURL('image/jpeg', 0.3)\n          resolve(srcEncoded)\n        }\n      }\n    })\n  }\n  return src\n}\n\nconst onPreview = async (file) => {\n  const src = await getBase64(file)\n  const image = new Image()\n  image.src = src\n  const imgWindow = window.open(src)\n  imgWindow.document.write(image.outerHTML)\n}\n\nconst PhotoUploader: FC<IPhotoUploaderProps> = (props) => {\n  const { preloadedPhoto, onChangePhoto, onRemovePhoto } = props\n  const initialPhoto = preloadedPhoto ? [{ url: preloadedPhoto }] : []\n  const [fileList, setFileList] = useState(initialPhoto)\n\n  const customRequest = (options) => {\n    const { onSuccess, file } = options\n    onSuccess(null, file)\n  }\n\n  const onChange = async ({ fileList: newFileList }) => {\n    const file = newFileList[0]\n    if (file?.status === 'done') {\n      const imageUrl = await getBase64(file)\n      onChangePhoto(imageUrl)\n    }\n\n    if (!file) {\n      onRemovePhoto()\n    }\n\n    setFileList(newFileList)\n  }\n\n  return (\n    <div className=\"photo-uploader\">\n      <ImgCrop\n        rotate\n        shape=\"round\"\n        modalTitle=\"Редактировать изображение\"\n        modalOk=\"Применить\"\n        modalCancel=\"Отмена\"\n      >\n        <Upload\n          listType=\"picture-card\"\n          fileList={fileList as any}\n          onChange={onChange}\n          beforeUpload={beforeUpload}\n          onPreview={onPreview}\n          customRequest={customRequest}\n        >\n          {!fileList.length && 'Выбрать фото'}\n        </Upload>\n      </ImgCrop>\n    </div>\n  )\n}\n\nexport { PhotoUploader }\n","import { FC, useState } from 'react'\nimport { Button, Spin, message } from 'antd'\nimport { LoadingOutlined } from '@ant-design/icons'\nimport { ModalWindow } from 'containers/ModalWindow'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport { userService, UserDTO } from 'services/user'\nimport { PhotoUploader } from 'components/PhotoUploader'\nimport { useActions } from 'hooks/useActions'\nimport { changeUserProfileModalState } from 'modules/Modals/actions'\nimport { userUpdatePhoto } from 'modules/Auth/actions'\n\ninterface IUserProfileProps {}\n\nconst UserProfile: FC<IUserProfileProps> = () => {\n  const [loading, setLoading] = useState(false)\n  const [photo, setPhoto] = useState('')\n  const { id, name, email, photo: preloadedPhoto } = useShallowEqualSelector(\n    (state) => state.auth.user\n  ) as UserDTO\n  const userProfile = useShallowEqualSelector(\n    (state) => state.modals.userProfile\n  ) as any\n\n  const [\n    dispatchUserUpdatePhoto,\n    dispatchChangeUserProfileModalState\n  ] = useActions([userUpdatePhoto, changeUserProfileModalState], null)\n\n  const onSaveChanges = async () => {\n    if (photo === '') {\n      dispatchChangeUserProfileModalState(false)\n      return\n    }\n\n    try {\n      setLoading(true)\n\n      const { type, message: serverMessage } = await userService.changePhoto({\n        id,\n        photo\n      })\n\n      if (serverMessage) {\n        if (type === 'error') {\n          setLoading(false)\n          return\n        }\n      }\n\n      setLoading(false)\n      dispatchUserUpdatePhoto(photo)\n      dispatchChangeUserProfileModalState(false)\n    } catch (error) {\n      setLoading(false)\n      message.error(error.message)\n    }\n  }\n\n  return (\n    <ModalWindow\n      title=\"Профиль\"\n      visible={userProfile}\n      onCancel={() => dispatchChangeUserProfileModalState(false)}\n      onOk={() => dispatchChangeUserProfileModalState(false)}\n    >\n      <PhotoUploader\n        preloadedPhoto={preloadedPhoto}\n        onChangePhoto={(imageUrl) => setPhoto(imageUrl)}\n        onRemovePhoto={() => setPhoto(null)}\n      />\n      <p>Имя: {name}</p>\n      <p>Email: {email}</p>\n\n      <div className=\"form-footer\">\n        {loading && (\n          <Spin\n            className=\"center\"\n            indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n            delay={500}\n          />\n        )}\n        <Button\n          key=\"back\"\n          onClick={() => dispatchChangeUserProfileModalState(false)}\n          disabled={loading}\n        >\n          Отмена\n        </Button>\n        <Button type=\"primary\" disabled={loading} onClick={onSaveChanges}>\n          Сохранить\n        </Button>\n      </div>\n    </ModalWindow>\n  )\n}\n\nexport { UserProfile }\n","import { FC } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { Menu, Dropdown, Avatar } from 'antd'\nimport {\n  UserOutlined,\n  LogoutOutlined,\n  ProfileOutlined\n} from '@ant-design/icons'\nimport { useActions } from 'hooks/useActions'\nimport { changeUserProfileModalState } from 'modules/Modals/actions'\n\nimport { userLogoutRequest } from 'modules/Auth/actions'\nimport { UserDTO } from 'services/user'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport { UserProfile } from 'components/Modals/UserProfile'\n\nconst UserMenu: FC = () => {\n  const history = useHistory()\n\n  const { photo } = useShallowEqualSelector(\n    (state) => state.auth.user\n  ) as UserDTO\n\n  const [\n    dispatchUserLogoutRequest,\n    dispatchChangeUserProfileModalState\n  ] = useActions([userLogoutRequest, changeUserProfileModalState], null)\n\n  const handleMenuClick = (event) => {\n    const { key } = event\n\n    switch (key) {\n      case 'profile':\n        dispatchChangeUserProfileModalState(true)\n        break\n      case 'logout':\n        dispatchUserLogoutRequest()\n        history.push('/auth/login')\n        break\n      default:\n        break\n    }\n  }\n\n  const menu = (\n    <Menu onClick={handleMenuClick}>\n      <Menu.Item key=\"profile\" icon={<ProfileOutlined />}>\n        Профиль\n      </Menu.Item>\n      <Menu.Divider />\n      <Menu.Item key=\"logout\" icon={<LogoutOutlined />}>\n        Выход\n      </Menu.Item>\n    </Menu>\n  )\n\n  return (\n    <>\n      <Dropdown overlay={menu} trigger={['click']}>\n        <Avatar\n          size={40}\n          className=\"user-profile\"\n          src={photo}\n          icon={<UserOutlined />}\n        />\n      </Dropdown>\n      <UserProfile />\n    </>\n  )\n}\n\nexport { UserMenu }\n","import { FC, useState } from 'react'\nimport { Button, Avatar, Typography, Row, Col, Divider, Spin } from 'antd'\nimport { LoadingOutlined } from '@ant-design/icons'\nimport { ModalWindow } from 'containers/ModalWindow'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport { UserDTO } from 'services/user'\nimport { chatService } from 'services/chat'\nimport { useActions } from 'hooks/useActions'\nimport { changeContactInfoModalState } from 'modules/Modals/actions'\nimport { IActiveChannel } from 'modules/Chat/reducer'\nimport {\n  removeContact,\n  setActiveChannel,\n  addContact\n} from 'modules/Chat/actions'\nimport { userRemoveContact } from 'modules/Auth/actions'\nimport { socketService } from 'services/socket'\nimport { notify } from 'services/notification'\n\nconst { Title, Paragraph, Text } = Typography\n\ninterface IContactInfoProps {\n  activeContact: IActiveChannel\n}\n\nconst ContactInfo: FC<IContactInfoProps> = (props) => {\n  const { activeContact } = props\n  const [loading, setLoading] = useState(false)\n\n  const [\n    dispatchChangeContactInfoModalState,\n    dispatchRemoveContact,\n    dispatchUserRemoveContact,\n    dispatchActiveChannel,\n    dispatchAddContact\n  ] = useActions(\n    [\n      changeContactInfoModalState,\n      removeContact,\n      userRemoveContact,\n      setActiveChannel,\n      addContact\n    ],\n    null\n  )\n\n  const user = useShallowEqualSelector((state) => state.auth.user) as UserDTO\n\n  const contacts = useShallowEqualSelector(\n    (state) => state.chat.contacts\n  ) as UserDTO\n\n  const contactInfo = useShallowEqualSelector(\n    (state) => state.modals.contactInfo\n  ) as any\n\n  const contact = activeContact && contacts && contacts[activeContact.id]\n  if (!contact) return null\n\n  const { name, email, photo } = contact as UserDTO\n\n  const removeContactHandler = async () => {\n    try {\n      setLoading(true)\n\n      const { type, message: serverMessage } = await chatService.removeContact({\n        userId: user.id,\n        contactId: activeContact.id\n      })\n\n      if (serverMessage) {\n        if (type === 'success') {\n          notify.success(serverMessage)\n        }\n        if (type === 'error') {\n          notify.success(serverMessage)\n          setLoading(false)\n          return\n        }\n      }\n\n      dispatchRemoveContact(activeContact.id)\n      dispatchUserRemoveContact(activeContact.id)\n      dispatchActiveChannel(null)\n      dispatchChangeContactInfoModalState(false)\n\n      setLoading(false)\n    } catch (error) {\n      notify.error(error.message)\n    }\n  }\n\n  const cancelInviteHandler = async () => {\n    try {\n      setLoading(true)\n\n      const { type, message: serverMessage } = await chatService.removeInvite({\n        inviterId: user.id,\n        userId: activeContact.id\n      })\n\n      if (serverMessage) {\n        if (type === 'success') {\n          notify.success(serverMessage)\n        }\n        if (type === 'error') {\n          notify.error(serverMessage)\n          setLoading(false)\n          return\n        }\n      }\n\n      dispatchRemoveContact(activeContact.id)\n      dispatchActiveChannel(null)\n      dispatchChangeContactInfoModalState(false)\n\n      socketService.cancelInviteRequest({ to: activeContact.id, contact: user })\n\n      setLoading(false)\n    } catch (error) {\n      notify.error(error.message)\n    }\n  }\n\n  const removeInviteHandler = async () => {\n    try {\n      setLoading(true)\n\n      const { type, message: serverMessage } = await chatService.removeInvite({\n        inviterId: activeContact.id,\n        userId: user.id\n      })\n\n      if (serverMessage) {\n        if (type === 'success') {\n          notify.success(serverMessage)\n        }\n        if (type === 'error') {\n          notify.error(serverMessage)\n          setLoading(false)\n          return\n        }\n      }\n\n      dispatchRemoveContact(activeContact.id)\n      dispatchActiveChannel(null)\n      dispatchChangeContactInfoModalState(false)\n\n      socketService.removeInviteRequest({ to: activeContact.id, contact: user })\n\n      setLoading(false)\n    } catch (error) {\n      notify.error(error.message)\n    }\n  }\n\n  const addContactHandler = async () => {\n    try {\n      setLoading(true)\n\n      const {\n        type,\n        message: serverMessage,\n        data\n      } = await chatService.addContact({\n        inviterId: activeContact.id,\n        userId: user.id\n      })\n\n      if (serverMessage) {\n        if (type === 'success') {\n          dispatchAddContact({\n            ...data,\n            type: 'contact',\n            messages: []\n          })\n          dispatchActiveChannel({\n            ...data,\n            type: 'contact'\n          })\n\n          socketService.addContactRequest({\n            to: data.id,\n            contact: {\n              ...user,\n              type: 'contact',\n              messages: []\n            }\n          })\n\n          notify.success(serverMessage)\n        }\n        if (type === 'error') {\n          // @todo refactor\n          if (serverMessage === 'Пользователь отменил свое приглашение') {\n            dispatchRemoveContact(activeContact.id)\n            dispatchUserRemoveContact(activeContact.id)\n            dispatchActiveChannel(null)\n          }\n\n          notify.error(serverMessage)\n        }\n      }\n\n      dispatchChangeContactInfoModalState(false)\n      setLoading(false)\n    } catch (error) {\n      notify.error(error.message)\n    }\n  }\n\n  return (\n    <ModalWindow\n      title=\"Информация\"\n      visible={contactInfo}\n      onCancel={() => dispatchChangeContactInfoModalState(false)}\n      onOk={() => dispatchChangeContactInfoModalState(false)}\n    >\n      <Row align=\"middle\">\n        {!contact.isContactRequest && !contact.isInvite && (\n          <Col flex=\"150px\">\n            <Avatar size={128} src={photo} />\n          </Col>\n        )}\n        <Col flex=\"auto\">\n          <Title level={4}>{name}</Title>\n          {email && <Paragraph>Email: {email}</Paragraph>}\n          {contact.isContactRequest && (\n            <Text type=\"secondary\">\n              Отправлен запрос на добавление в список контактов\n            </Text>\n          )}\n          {contact.isInvite && (\n            <Text type=\"secondary\">\n              Пользователь хочет добавить Вас в свой список контактов\n            </Text>\n          )}\n        </Col>\n      </Row>\n      <Divider />\n      <div className=\"form-footer\">\n        {loading && (\n          <Spin\n            className=\"center\"\n            indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n            delay={500}\n          />\n        )}\n        {contact.isContactRequest ? (\n          <Button\n            block\n            danger\n            type=\"default\"\n            onClick={cancelInviteHandler}\n            disabled={loading}\n          >\n            Отменить запрос за добавление\n          </Button>\n        ) : contact.isInvite ? (\n          <div className=\"stretch-container\">\n            <Button block onClick={addContactHandler} disabled={loading}>\n              Добавить\n            </Button>\n            <Button\n              block\n              danger\n              onClick={removeInviteHandler}\n              disabled={loading}\n            >\n              Отказать\n            </Button>\n          </div>\n        ) : (\n          <Button\n            block\n            danger\n            type=\"default\"\n            onClick={removeContactHandler}\n            disabled={loading}\n          >\n            Удалить контакт\n          </Button>\n        )}\n      </div>\n    </ModalWindow>\n  )\n}\n\nexport { ContactInfo }\n","import { FC, useEffect } from 'react'\nimport {\n  Button,\n  message,\n  Avatar,\n  Typography,\n  Row,\n  Col,\n  Divider,\n  List\n} from 'antd'\nimport { ClockCircleTwoTone, PlusCircleOutlined } from '@ant-design/icons'\nimport { ModalWindow } from 'containers/ModalWindow'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport { userService, UserDTO } from 'services/user'\nimport { useActions } from 'hooks/useActions'\nimport {\n  changeChannelInfoModalState,\n  changeAddToChannelModalState\n} from 'modules/Modals/actions'\nimport { IActiveChannel } from 'modules/Chat/reducer'\nimport { populateChannel } from 'modules/Chat/actions'\n\nconst { Title, Paragraph } = Typography\n\ninterface IChannelInfoProps {\n  activeChannel: IActiveChannel\n}\n\nconst ChannelInfo: FC<IChannelInfoProps> = (props) => {\n  const { activeChannel } = props\n\n  const [\n    dispatchChangeChannelInfoModalState,\n    dispatchChangeAddToChannelModalState,\n    disaptchPopulateChannel\n  ] = useActions(\n    [\n      changeChannelInfoModalState,\n      changeAddToChannelModalState,\n      populateChannel\n    ],\n    null\n  )\n\n  const user = useShallowEqualSelector((state) => state.auth.user) as UserDTO\n\n  const channels = useShallowEqualSelector(\n    (state) => state.chat.channels\n  ) as UserDTO\n\n  const channelInfo = useShallowEqualSelector(\n    (state) => state.modals.channelInfo\n  ) as any\n\n  const channel = activeChannel && channels && channels[activeChannel.id]\n\n  useEffect(() => {\n    if (!channel || channel.populated) return\n\n    const populateChannelRequest = async () => {\n      const { members: ids, ownerId } = channel\n      const { data } = await userService.populateUsers({\n        ids: JSON.stringify(ids)\n      })\n      const owner = data.find((member) => member.id === ownerId)\n      disaptchPopulateChannel({ id: activeChannel?.id, members: data, owner })\n    }\n\n    populateChannelRequest()\n  }, [channel, disaptchPopulateChannel, activeChannel?.id])\n\n  if (!channel) return null\n\n  const { name, members, photo } = channel\n\n  const leaveChannel = async () => {\n    try {\n      dispatchChangeChannelInfoModalState(false)\n    } catch (error) {\n      message.error(error.message)\n    }\n  }\n\n  const addToChannelHandler = () => {\n    dispatchChangeAddToChannelModalState(true)\n  }\n\n  return (\n    <ModalWindow\n      title=\"Информация о канале\"\n      visible={channelInfo}\n      onCancel={() => dispatchChangeChannelInfoModalState(false)}\n      onOk={() => dispatchChangeChannelInfoModalState(false)}\n    >\n      <Row align=\"middle\">\n        <Col flex=\"150px\">\n          <Avatar size={128} src={photo} />\n        </Col>\n        <Col flex=\"auto\">\n          <Title level={4}>{name}</Title>\n          <Paragraph>Владелец: {channel.owner?.name}</Paragraph>\n        </Col>\n      </Row>\n      <Row>\n        <Col flex=\"auto\">\n          <List\n            header={\n              <>\n                <Title level={5}>\n                  {members.length} участников\n                  {channel?.ownerId === user.id && (\n                    <PlusCircleOutlined\n                      className=\"add-to-channel\"\n                      title=\"Добавить\"\n                      onClick={addToChannelHandler}\n                    />\n                  )}\n                </Title>\n              </>\n            }\n            itemLayout=\"horizontal\"\n            dataSource={members as UserDTO[]}\n            renderItem={(item) => (\n              <List.Item>\n                <List.Item.Meta\n                  avatar={\n                    item.photo ? (\n                      <Avatar\n                        size={50}\n                        className=\"channel-photo\"\n                        src={item.photo}\n                      />\n                    ) : (\n                      <Avatar\n                        size={50}\n                        className=\"channel-photo\"\n                        icon={\n                          <ClockCircleTwoTone style={{ color: '#fefefe' }} />\n                        }\n                      />\n                    )\n                  }\n                  title={item.name}\n                  description={item.email}\n                />\n              </List.Item>\n            )}\n          />\n        </Col>\n      </Row>\n      <Divider />\n      <div className=\"form-footer\">\n        <Button block danger type=\"default\" onClick={leaveChannel}>\n          Покинуть канал\n        </Button>\n      </div>\n    </ModalWindow>\n  )\n}\n\nexport { ChannelInfo }\n","import { FC, useState } from 'react'\nimport { Form, Input, Button, Spin, Typography } from 'antd'\nimport { LoadingOutlined, MailOutlined } from '@ant-design/icons'\nimport { ModalWindow } from 'containers/ModalWindow'\nimport { UserDTO } from 'services/user'\nimport { chatService } from 'services/chat'\nimport { socketService } from 'services/socket'\nimport { notify } from 'services/notification'\nimport { useActions } from 'hooks/useActions'\nimport { changeAddToChannelModalState } from 'modules/Modals/actions'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport { IActiveChannel } from 'modules/Chat/reducer'\nimport { addChannelMember } from 'modules/Chat/actions'\n\nconst { Text } = Typography\n\ninterface IFormValues {\n  email: string\n}\n\ninterface IAddToChannelProps {\n  activeChannel: IActiveChannel\n}\n\nconst AddToChannel: FC<IAddToChannelProps> = (props) => {\n  const { activeChannel } = props\n  const addToChannelModalState = useShallowEqualSelector(\n    (state) => state.modals.addToChannel\n  ) as any\n  const user = useShallowEqualSelector((state) => state.auth.user) as UserDTO\n  const [form] = Form.useForm()\n  const [loading, setLoading] = useState(false)\n  const [\n    dispatchChangeAddToChannelModalState,\n    dispatchAddChannelMember\n  ] = useActions([changeAddToChannelModalState, addChannelMember], null)\n\n  const addToChannelHandler = async (values: IFormValues) => {\n    try {\n      const { email } = values\n      setLoading(true)\n\n      const {\n        type,\n        message: serverMessage,\n        data\n      } = await chatService.addToChannel({\n        channelId: activeChannel.id,\n        channelName: activeChannel.name,\n        email\n      })\n\n      if (serverMessage) {\n        if (type === 'success') {\n          notify.success(serverMessage)\n        }\n        if (type === 'error') {\n          notify.error(serverMessage)\n          setLoading(false)\n          return\n        }\n      }\n\n      form.resetFields()\n\n      socketService.addToChannelRequest({\n        to: data.invitedUser.id,\n        inviterName: user.name,\n        channel: {\n          ...data.channel,\n          type: 'channel',\n          messages: []\n        }\n      })\n\n      dispatchAddChannelMember({\n        id: data.channel.id,\n        member: data.invitedUser\n      })\n\n      dispatchChangeAddToChannelModalState(false)\n      setLoading(false)\n    } catch (error) {\n      setLoading(false)\n      notify.error(error.message)\n    }\n  }\n\n  return (\n    <ModalWindow\n      title=\"Добавить пользователя в канал\"\n      visible={addToChannelModalState}\n      onCancel={() => dispatchChangeAddToChannelModalState(false)}\n    >\n      <Text>\n        Введите Email пользователя, которого Вы хотели добавить в канал\n      </Text>\n      <Form\n        form={form}\n        name=\"addToChannel\"\n        className=\"add-to-channel-form\"\n        layout=\"vertical\"\n        onFinish={addToChannelHandler}\n      >\n        <Form.Item\n          name=\"email\"\n          rules={[\n            {\n              required: true,\n              type: 'email',\n              min: 4,\n              message: 'Некорректный email'\n            }\n          ]}\n        >\n          <Input prefix={<MailOutlined />} placeholder=\"Email\" size=\"large\" />\n        </Form.Item>\n\n        <div className=\"form-footer\">\n          {loading && (\n            <Spin\n              className=\"center\"\n              indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n              delay={500}\n            />\n          )}\n          <Button\n            key=\"back\"\n            onClick={() => dispatchChangeAddToChannelModalState(false)}\n            disabled={loading}\n          >\n            Отмена\n          </Button>\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            htmlType=\"submit\"\n            disabled={loading}\n          >\n            Добавить\n          </Button>\n        </div>\n      </Form>\n    </ModalWindow>\n  )\n}\n\nexport { AddToChannel }\n","import { FC, KeyboardEvent, useRef } from 'react'\nimport { Layout, Typography } from 'antd'\nimport { MenuUnfoldOutlined, MenuFoldOutlined } from '@ant-design/icons'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport { MainMenu } from 'components/MainMenu'\nimport { UserMenu } from 'components/UserMenu'\nimport { PrivateContainer } from 'containers/Private'\nimport { UserDTO } from 'services/user'\nimport { ContactInfo } from 'components/Modals/ContactInfo'\nimport { ChannelInfo } from 'components/Modals/ChannelInfo'\nimport { AddToChannel } from 'components/Modals/AddToChannel'\nimport { useActions } from 'hooks/useActions'\nimport {\n  changeContactInfoModalState,\n  changeChannelInfoModalState\n} from 'modules/Modals/actions'\nimport { IActiveChannel } from 'modules/Chat/reducer'\n\nconst { Text } = Typography\n\ninterface IHeaderProps {\n  sidebarCollapsed: boolean\n  onSidebarToggle: (isCollapsed: boolean) => void\n}\n\nconst { Header: AntHeader } = Layout\n\nconst Header: FC<IHeaderProps> = (props: IHeaderProps) => {\n  const user = useShallowEqualSelector((state) => state.auth.user) as UserDTO\n\n  const [\n    dispatchChangeContactInfoModalState,\n    dispatchChangeChannelInfoModalState\n  ] = useActions(\n    [changeContactInfoModalState, changeChannelInfoModalState],\n    null\n  )\n\n  const chatInfoRef = useRef(null)\n  const activeChannel = useShallowEqualSelector(\n    (state) => state.chat.activeChannel\n  ) as IActiveChannel\n\n  const { onSidebarToggle, sidebarCollapsed } = props\n\n  const onTriggerClick = () => {\n    onSidebarToggle(!sidebarCollapsed)\n  }\n\n  const menuTrigger = sidebarCollapsed ? (\n    <MenuUnfoldOutlined\n      style={{ fontSize: '20px', padding: '22px' }}\n      className=\"trigger\"\n      onClick={onTriggerClick}\n      label=\"Свернуть\"\n    />\n  ) : (\n    <MenuFoldOutlined\n      style={{ fontSize: '20px', padding: '22px' }}\n      className=\"trigger\"\n      onClick={onTriggerClick}\n    />\n  )\n\n  const openActiveChatInfo = () => {\n    if (activeChannel?.type === 'contact') {\n      dispatchChangeContactInfoModalState(true)\n    }\n    if (activeChannel?.type === 'channel') {\n      dispatchChangeChannelInfoModalState(true)\n    }\n  }\n\n  const onKeyDownHandler = (event: KeyboardEvent<HTMLDivElement>) => {\n    if (event.key === 'Enter') {\n      chatInfoRef.current.focus()\n    }\n  }\n\n  let membersCount = 0\n  const channels = useShallowEqualSelector(\n    (state) => state.chat.channels\n  ) as any\n\n  if (activeChannel?.type === 'channel') {\n    const members =\n      activeChannel && channels && channels[activeChannel.id].members\n    membersCount = members && Object.keys(members).length\n  }\n\n  const activeChat = activeChannel && (\n    <div\n      className=\"active-channel\"\n      onClick={openActiveChatInfo}\n      onKeyDown={onKeyDownHandler}\n      ref={chatInfoRef}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <Text className=\"active-channel-text\">{activeChannel.name}</Text>\n      {activeChannel.type === 'channel' ? (\n        <Text className=\"active-channel-text\" type=\"secondary\">\n          {membersCount} участников\n        </Text>\n      ) : (\n        <Text className=\"active-channel-text\" type=\"secondary\">\n          был(а) 1 час назад\n        </Text>\n      )}\n    </div>\n  )\n\n  return (\n    <AntHeader className=\"header background-white\">\n      <PrivateContainer>\n        {menuTrigger}\n        {activeChat}\n        <ContactInfo activeContact={activeChannel} />\n        <ChannelInfo activeChannel={activeChannel} />\n        <AddToChannel activeChannel={activeChannel} />\n      </PrivateContainer>\n\n      <div className=\"header-menu\">\n        <MainMenu />\n        <PrivateContainer>\n          <span className=\"header-username\">{user?.name}</span>\n          <UserMenu />\n        </PrivateContainer>\n      </div>\n    </AntHeader>\n  )\n}\n\nexport { Header }\n","import { FC } from 'react'\nimport { Scrollbars } from 'react-custom-scrollbars'\n\nconst renderTrackVertical = ({ style, ...ownProps }) => (\n  <div\n    {...ownProps}\n    className=\"scrollTrackVertical\"\n    style={{\n      ...style,\n      backgroundColor: '#E5E5E5',\n      right: '2px',\n      bottom: '2px',\n      top: '2px',\n      borderRadius: '3px'\n    }}\n  />\n)\n\nconst renderThumbVertical = ({ style, ...ownProps }) => (\n  <div\n    {...ownProps}\n    className=\"scrollThumbVertical\"\n    style={{\n      ...style,\n      borderRadius: '4px',\n      boxShadow: '0 2px 4px 0 rgba(0, 0, 0, 0.16)',\n      backgroundColor: '#9A9A9A'\n    }}\n  />\n)\n\ninterface IScrollbarProps {\n  style?: { [key: string]: string | number }\n}\n\nconst Scrollbar: FC<IScrollbarProps> = (props) => {\n  const { children, style } = props\n  return (\n    <Scrollbars\n      style={style}\n      hideTracksWhenNotNeeded\n      autoHide\n      autoHideTimeout={400}\n      renderTrackVertical={renderTrackVertical}\n      renderThumbVertical={renderThumbVertical}\n    >\n      {children}\n    </Scrollbars>\n  )\n}\n\nexport { Scrollbar }\n","import { FC, useState } from 'react'\nimport { Form, Input, message, Button, Spin } from 'antd'\nimport { LoadingOutlined } from '@ant-design/icons'\nimport { ModalWindow } from 'containers/ModalWindow'\nimport { PhotoUploader } from 'components/PhotoUploader'\nimport { UserDTO } from 'services/user'\nimport { useActions } from 'hooks/useActions'\nimport { setActiveChannel, addChannel } from 'modules/Chat/actions'\nimport { changeCreateChannelModalState } from 'modules/Modals/actions'\nimport { chatService } from 'services/chat'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport { socketService } from 'services/socket'\n\ninterface IFormValues {\n  name: string\n  description?: string\n  photo?: string\n}\n\ninterface ICreateChannelProps {}\n\nconst CreateChannel: FC<ICreateChannelProps> = () => {\n  const createChannel = useShallowEqualSelector(\n    (state) => state.modals.createChannel\n  ) as any\n  const user = useShallowEqualSelector((state) => state.auth.user) as UserDTO\n  const [form] = Form.useForm()\n  const [loading, setLoading] = useState(false)\n  const [photo, setPhoto] = useState(null)\n  const [\n    dispatchActiveChannel,\n    dispatchAddChannel,\n    dispatchChangeCreateChannelModalState\n  ] = useActions(\n    [setActiveChannel, addChannel, changeCreateChannelModalState],\n    null\n  )\n\n  const createChannelHandler = async (values: IFormValues) => {\n    try {\n      const { name, description } = values\n      setLoading(true)\n\n      const {\n        type,\n        message: serverMessage,\n        data\n      } = await chatService.createChannel({\n        name,\n        description,\n        photo,\n        ownerId: user.id\n      })\n\n      if (serverMessage) {\n        if (type === 'success') {\n          message.success(serverMessage)\n        }\n        if (type === 'error') {\n          message.error(serverMessage)\n          setLoading(false)\n          return\n        }\n      }\n\n      const activeChannelPayload = { id: data.channelId, name, type: 'channel' }\n\n      dispatchAddChannel({\n        ...activeChannelPayload,\n        ownerId: user.id,\n        photo,\n        members: [user.id]\n      })\n      dispatchActiveChannel(activeChannelPayload)\n      socketService.subscribeToChannel(data.channelId)\n\n      setLoading(false)\n      dispatchChangeCreateChannelModalState(false)\n    } catch (error) {\n      setLoading(false)\n      message.error(error.message)\n    }\n  }\n\n  const resetForm = () => dispatchChangeCreateChannelModalState(false)\n\n  return (\n    <ModalWindow\n      title=\"Создать канал\"\n      visible={createChannel}\n      onCancel={() => dispatchChangeCreateChannelModalState(false)}\n    >\n      <PhotoUploader onChangePhoto={(imageUrl) => setPhoto(imageUrl)} />\n      <Form\n        form={form}\n        name=\"createChannel\"\n        className=\"create-channel-form\"\n        layout=\"vertical\"\n        onFinish={createChannelHandler}\n      >\n        <Form.Item\n          name=\"name\"\n          rules={[\n            { required: true, message: 'Введите название канала' },\n            { max: 100, message: 'Не более 100 символов' }\n          ]}\n        >\n          <Input placeholder=\"Название канала\" />\n        </Form.Item>\n        <Form.Item\n          name=\"description\"\n          rules={[{ max: 250, message: 'Не более 250 символов' }]}\n        >\n          <Input placeholder=\"Описание (не обязательно)\" type=\"textarea\" />\n        </Form.Item>\n        <div className=\"form-footer\">\n          {loading && (\n            <Spin\n              className=\"center\"\n              indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n              delay={500}\n            />\n          )}\n          <Button key=\"back\" onClick={resetForm} disabled={loading}>\n            Отмена\n          </Button>\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            htmlType=\"submit\"\n            disabled={loading}\n          >\n            Создать\n          </Button>\n        </div>\n      </Form>\n    </ModalWindow>\n  )\n}\n\nexport { CreateChannel }\n","import { FC, useState } from 'react'\nimport { Form, Input, Button, Spin, Typography } from 'antd'\nimport { LoadingOutlined, MailOutlined } from '@ant-design/icons'\nimport { ModalWindow } from 'containers/ModalWindow'\nimport { UserDTO } from 'services/user'\nimport { chatService } from 'services/chat'\nimport { socketService } from 'services/socket'\nimport { notify } from 'services/notification'\nimport { useActions } from 'hooks/useActions'\nimport { addContact, setActiveChannel } from 'modules/Chat/actions'\nimport { changeAddContactModalState } from 'modules/Modals/actions'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\n\nconst { Text } = Typography\nconst { TextArea } = Input\n\ninterface IFormValues {\n  email: string\n  text?: string\n}\n\ninterface IAddContactProps {}\n\nconst AddContact: FC<IAddContactProps> = () => {\n  const addContactModalState = useShallowEqualSelector(\n    (state) => state.modals.addContact\n  ) as any\n  const user = useShallowEqualSelector((state) => state.auth.user) as UserDTO\n  const [form] = Form.useForm()\n  const [loading, setLoading] = useState(false)\n  const [\n    dispatchChangeAddContactModalState,\n    dispatchAddContact,\n    dispatchActiveChannel\n  ] = useActions(\n    [changeAddContactModalState, addContact, setActiveChannel],\n    null\n  )\n\n  const addContactHandler = async (values: IFormValues) => {\n    try {\n      const { email, text } = values\n      setLoading(true)\n\n      const {\n        type,\n        message: serverMessage,\n        data: invitedUser\n      } = await chatService.inviteToContacts({\n        inviterId: user.id,\n        inviterName: user.name,\n        inviterEmail: user.email,\n        inviterContacts: user.contacts,\n        email,\n        text\n      })\n\n      if (serverMessage) {\n        if (type === 'success') {\n          notify.success(serverMessage)\n        }\n        if (type === 'error') {\n          notify.error(serverMessage)\n          setLoading(false)\n          return\n        }\n      }\n\n      form.resetFields()\n\n      const addContactPayload = {\n        ...invitedUser,\n        type: 'contact',\n        messages: []\n      }\n\n      const activeChannelPayload: any = {\n        id: invitedUser.id,\n        name: invitedUser.name,\n        type: 'contact'\n      }\n\n      if (!invitedUser.contactAdded) {\n        addContactPayload.isContactRequest = true\n        addContactPayload.text = text\n        activeChannelPayload.isContactRequest = true\n        activeChannelPayload.text = text\n      }\n\n      dispatchAddContact(addContactPayload)\n      dispatchActiveChannel(activeChannelPayload)\n      dispatchChangeAddContactModalState(false)\n\n      socketService.inviteContactRequest({\n        to: invitedUser.id,\n        contact: {\n          ...user,\n          isInvite: true,\n          photo: null,\n          text,\n          type: 'contact',\n          messages: []\n        }\n      })\n\n      setLoading(false)\n    } catch (error) {\n      setLoading(false)\n      notify.error(error.message)\n    }\n  }\n\n  return (\n    <ModalWindow\n      title=\"Добавить контакт\"\n      visible={addContactModalState}\n      onCancel={() => dispatchChangeAddContactModalState(false)}\n    >\n      <Text>Введите Email контакта, которого Вы хотели добавить</Text>\n      <Form\n        form={form}\n        name=\"addContact\"\n        className=\"add-contact-form\"\n        layout=\"vertical\"\n        onFinish={addContactHandler}\n      >\n        <Form.Item\n          name=\"email\"\n          rules={[\n            {\n              required: true,\n              type: 'email',\n              min: 4,\n              message: 'Некорректный email'\n            }\n          ]}\n        >\n          <Input prefix={<MailOutlined />} placeholder=\"Email\" size=\"large\" />\n        </Form.Item>\n\n        <Form.Item name=\"text\">\n          <TextArea\n            rows={4}\n            placeholder=\"Сообщение для пользователя (необязательно)\"\n          />\n        </Form.Item>\n\n        <div className=\"form-footer\">\n          {loading && (\n            <Spin\n              className=\"center\"\n              indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n              delay={500}\n            />\n          )}\n          <Button\n            key=\"back\"\n            onClick={() => dispatchChangeAddContactModalState(false)}\n            disabled={loading}\n          >\n            Отмена\n          </Button>\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            htmlType=\"submit\"\n            disabled={loading}\n          >\n            Добавить\n          </Button>\n        </div>\n      </Form>\n    </ModalWindow>\n  )\n}\n\nexport { AddContact }\n","import { FC } from 'react'\nimport { Menu, Dropdown } from 'antd'\nimport {\n  MenuOutlined,\n  UserAddOutlined,\n  UsergroupAddOutlined,\n  ContactsOutlined,\n  SettingOutlined\n} from '@ant-design/icons'\nimport { useActions } from 'hooks/useActions'\nimport {\n  changeCreateChannelModalState,\n  changeAddContactModalState\n} from 'modules/Modals/actions'\nimport { CreateChannel } from 'components/Modals/CreateChannel'\nimport { AddContact } from 'components/Modals/AddContact'\n\nexport interface ISidebarMenuProps {}\n\nconst SidebarMenu: FC<ISidebarMenuProps> = () => {\n  const [\n    dispatchChangeCreateChannelModalState,\n    dispatchChangeAddContactModalState\n  ] = useActions(\n    [changeCreateChannelModalState, changeAddContactModalState],\n    null\n  )\n\n  const handleMenuClick = (event) => {\n    const { key } = event\n\n    switch (key) {\n      case 'createChannel':\n        dispatchChangeCreateChannelModalState(true)\n        break\n      case 'addContact':\n        dispatchChangeAddContactModalState(true)\n        break\n      default:\n        break\n    }\n  }\n\n  const menu = (\n    <Menu onClick={handleMenuClick}>\n      <Menu.Item key=\"createChannel\" icon={<UsergroupAddOutlined />}>\n        Создать канал\n      </Menu.Item>\n      <Menu.Item key=\"addContact\" icon={<UserAddOutlined />}>\n        Добавить контакт\n      </Menu.Item>\n      <Menu.Divider />\n      <Menu.Item key=\"contacts\" icon={<ContactsOutlined />}>\n        Контакты\n      </Menu.Item>\n      <Menu.Item key=\"settings\" icon={<SettingOutlined />}>\n        Настройки\n      </Menu.Item>\n    </Menu>\n  )\n\n  return (\n    <>\n      <Dropdown overlay={menu} trigger={['click']}>\n        <MenuOutlined className=\"sidebar-icon\" />\n      </Dropdown>\n      <CreateChannel />\n      <AddContact />\n    </>\n  )\n}\n\nexport { SidebarMenu }\n","import { FC, useState } from 'react'\nimport { Layout, Menu, Avatar } from 'antd'\nimport {\n  LockOutlined,\n  UnlockOutlined,\n  ClockCircleTwoTone,\n  PlusCircleOutlined\n} from '@ant-design/icons'\nimport { useEscape } from 'hooks/useEscape'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport { setActiveChannel } from 'modules/Chat/actions'\nimport { useActions } from 'hooks/useActions'\nimport { IChannelData, IContactData } from 'components/Chat/Messages'\nimport {\n  changeCreateChannelModalState,\n  changeAddContactModalState\n} from 'modules/Modals/actions'\nimport { Scrollbar } from 'containers/Scrollbar'\nimport { SidebarMenu } from './SidebarMenu'\n\nconst { Sider } = Layout\n\ninterface ISidebarProps {\n  sidebarCollapsed: boolean\n  onSidebarToggle: (isCollapsed: boolean) => void\n}\n\nconst Sidebar: FC<ISidebarProps> = (props: ISidebarProps) => {\n  const [sidebarLocked, setSidebarLocked] = useState(true)\n  const { sidebarCollapsed, onSidebarToggle } = props\n  const [\n    dispatchActiveChannel,\n    dispatchChangeCreateChannelModalState,\n    dispatchChangeAddContactModalState\n  ] = useActions(\n    [\n      setActiveChannel,\n      changeCreateChannelModalState,\n      changeAddContactModalState\n    ],\n    null\n  )\n  const chat = useShallowEqualSelector((state) => state.chat) as any\n  const { activeChannel, channels, contacts } = chat\n\n  useEscape(() => {\n    if (!activeChannel) return\n    dispatchActiveChannel(null)\n  })\n\n  const onClickMenu = ({ key }) => {\n    if (activeChannel) {\n      const { id, type } = activeChannel\n      if (key === `${type}-${id}`) return\n    }\n\n    const [channelType, channelId] = key.split('-')\n    const place = channelType === 'channel' ? channels : contacts\n    const { name, type, isContactRequest, isInvite, text } = place[channelId]\n    const intChannelId = parseInt(channelId, 10)\n\n    dispatchActiveChannel({\n      id: intChannelId,\n      name,\n      type,\n      isContactRequest,\n      isInvite,\n      text\n    })\n\n    if (!sidebarLocked) {\n      onSidebarToggle(true)\n    }\n  }\n\n  const selectedMenuKey = activeChannel\n    ? [`${activeChannel.type}-${activeChannel.id}`]\n    : []\n\n  return (\n    <>\n      <Sider\n        trigger={null}\n        collapsed={sidebarCollapsed}\n        collapsedWidth={0}\n        className=\"sider\"\n        theme=\"dark\"\n        width=\"230\"\n        style={{\n          overflow: 'auto',\n          height: '100vh'\n        }}\n      >\n        <div className=\"sidebar-top\">\n          <SidebarMenu />\n          {sidebarLocked ? (\n            <LockOutlined\n              title=\"Отмена фиксации\"\n              className=\"sidebar-icon\"\n              onClick={() => setSidebarLocked(false)}\n            />\n          ) : (\n            <UnlockOutlined\n              title=\"Фиксировать меню\"\n              className=\"sidebar-icon\"\n              onClick={() => setSidebarLocked(true)}\n            />\n          )}\n        </div>\n\n        <div className=\"channels-menu\">\n          <div className=\"sidebar-top\">\n            <span className=\"channels-menu-title\">Каналы</span>\n            <PlusCircleOutlined\n              className=\"sidebar-icon\"\n              title=\"Создать канал\"\n              onClick={() => dispatchChangeCreateChannelModalState(true)}\n            />\n          </div>\n\n          {(channels && (\n            <Scrollbar style={{ height: 'calc(50vh - 100px)' }}>\n              <Menu\n                theme=\"dark\"\n                mode=\"inline\"\n                selectedKeys={selectedMenuKey}\n                onClick={onClickMenu}\n              >\n                {Object.entries(channels as IChannelData[]).map(\n                  ([channelId, channel]) => (\n                    <Menu.Item\n                      className=\"channels-menu-item\"\n                      style={{ height: '50px' }}\n                      key={`${channel.type}-${channelId}`}\n                    >\n                      {channel.photo ? (\n                        <Avatar\n                          size={40}\n                          className=\"channel-photo\"\n                          src={channel.photo}\n                        />\n                      ) : (\n                        <Avatar\n                          size={40}\n                          className=\"channel-photo\"\n                          icon={\n                            <ClockCircleTwoTone style={{ color: '#fefefe' }} />\n                          }\n                        />\n                      )}\n                      <span className=\"channel-name\">{channel.name}</span>\n                    </Menu.Item>\n                  )\n                )}\n              </Menu>\n            </Scrollbar>\n          )) || <p className=\"nocontent\">нет каналов</p>}\n        </div>\n\n        <div className=\"contacts-menu\">\n          <div className=\"sidebar-top\">\n            <span className=\"contacts-menu-title\">Контакты</span>\n            <PlusCircleOutlined\n              className=\"sidebar-icon\"\n              title=\"Добавить контакт\"\n              onClick={() => dispatchChangeAddContactModalState(true)}\n            />\n          </div>\n          {(contacts && (\n            <Scrollbar style={{ height: 'calc(50vh - 100px)' }}>\n              <Menu\n                theme=\"dark\"\n                mode=\"inline\"\n                selectedKeys={selectedMenuKey}\n                onClick={onClickMenu}\n              >\n                {Object.entries(contacts as IContactData[]).map(\n                  ([contactId, contact]) => (\n                    <Menu.Item\n                      className=\"contacts-menu-item\"\n                      style={{ height: '50px' }}\n                      key={`${contact.type}-${contactId}`}\n                    >\n                      <Avatar\n                        size={40}\n                        className=\"contact-photo\"\n                        src={\n                          contact.photo ? (\n                            contact.photo\n                          ) : (\n                            <ClockCircleTwoTone style={{ fontSize: '40px' }} />\n                          )\n                        }\n                      />\n                      <span className=\"channel-name\">{contact.name}</span>\n                    </Menu.Item>\n                  )\n                )}\n              </Menu>\n            </Scrollbar>\n          )) || <p className=\"nocontent\">нет контактов</p>}\n        </div>\n      </Sider>\n    </>\n  )\n}\n\nexport { Sidebar }\n","import { useEffect } from 'react'\n\nconst useEscape = (onEscape: () => any) => {\n  useEffect(() => {\n    const handleEsc = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') onEscape()\n    }\n    window.addEventListener('keydown', handleEsc)\n\n    return () => {\n      window.removeEventListener('keydown', handleEsc)\n    }\n  }, [onEscape])\n}\n\nexport { useEscape }\n","import { FC } from 'react'\r\nimport { Route, Redirect, RouteProps } from 'react-router-dom'\r\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\r\nimport { IRootState } from 'modules'\r\n\r\ninterface IPrivateRouteProps extends RouteProps {\r\n  component?: any\r\n  children?: any\r\n}\r\n\r\nconst PrivateRoute: FC<IPrivateRouteProps> = ({\r\n  component: Component,\r\n  children,\r\n  ...rest\r\n}) => {\r\n  const user = useShallowEqualSelector((state: IRootState) => state.auth.user)\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(routeProps) => {\r\n        if (user === null) return null\r\n\r\n        if (user === false) {\r\n          return (\r\n            <Redirect\r\n              to={{\r\n                pathname: '/auth/login',\r\n                state: { from: routeProps.location }\r\n              }}\r\n            />\r\n          )\r\n        }\r\n\r\n        if (Component) {\r\n          return <Component {...routeProps} />\r\n        }\r\n\r\n        return children\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nPrivateRoute.defaultProps = {\r\n  component: undefined\r\n}\r\n\r\nexport { PrivateRoute }\r\n","import {\n  apiService as api,\n  AUTH_TOKEN_STORAGE_KEY,\n  IServerResponse\n} from './api'\n\nexport interface UserLoginRequestDTO {\n  email: string\n  password: string\n}\n\nexport interface UserCreateRequestDTO {\n  name: string\n  email: string\n  password: string\n}\n\nexport interface UserRecoverPasswordRequestDTO {\n  email: string\n}\n\nexport interface CheckSecretRequestDTO {\n  code: string\n  secretType: string\n}\n\nexport interface ChangePasswordRequestDTO {\n  code: string\n  password: string\n}\n\nexport interface UserFetchByTokenRequestDTO {\n  token: string\n}\n\nconst authService = {\n  /** Регистрация нового пользователя */\n  register: async (payload: UserCreateRequestDTO): Promise<IServerResponse> =>\n    api.send({\n      method: 'put',\n      endpoint: '/api/v1/auth/register',\n      payload\n    }),\n\n  /** Активация пользователя по коду из письма */\n  activate: async (code: string): Promise<IServerResponse> =>\n    api.send({\n      method: 'patch',\n      endpoint: `/api/v1/auth/activate/${code}`\n    }),\n\n  /** Вход пользователя в систему и полуение токена */\n  login: async (payload: UserLoginRequestDTO): Promise<IServerResponse> =>\n    api.send({\n      method: 'post',\n      endpoint: '/api/v1/auth/login',\n      payload\n    }),\n\n  /** Попытка получить объект пользователя по токену */\n  fetchByToken: async (\n    payload: UserFetchByTokenRequestDTO\n  ): Promise<IServerResponse> =>\n    api.send({\n      method: 'post',\n      endpoint: '/api/v1/auth/fetch-by-token',\n      payload\n    }),\n\n  /** Запрос на изменение пароля, отправка письма со ссылкой на email */\n  recover: async (\n    payload: UserRecoverPasswordRequestDTO\n  ): Promise<IServerResponse> =>\n    api.send({\n      method: 'post',\n      endpoint: '/api/v1/auth/recover',\n      payload\n    }),\n\n  /** Проверка секретного ключа для доступа к форме восстановления пароля */\n  checkSecret: async (\n    payload: CheckSecretRequestDTO\n  ): Promise<IServerResponse> =>\n    api.send({\n      method: 'post',\n      endpoint: '/api/v1/auth/check-secret',\n      payload\n    }),\n\n  /** Изменение пароля пользователя */\n  changePassword: async (\n    payload: ChangePasswordRequestDTO\n  ): Promise<IServerResponse> =>\n    api.send({\n      method: 'patch',\n      endpoint: '/api/v1/auth/change-password',\n      payload\n    }),\n\n  getToken: (): string | null => localStorage.getItem(AUTH_TOKEN_STORAGE_KEY),\n\n  setToken: (payload: string): void =>\n    localStorage.setItem(AUTH_TOKEN_STORAGE_KEY, payload),\n\n  removeToken: (): void => localStorage.removeItem(AUTH_TOKEN_STORAGE_KEY)\n}\n\nexport { authService }\n","import { FC, useState } from 'react'\nimport { Form, Input, Button, Card, Alert, Spin } from 'antd'\nimport { MailOutlined, LockOutlined, LoadingOutlined } from '@ant-design/icons'\nimport { Link, useHistory } from 'react-router-dom'\nimport { useActions } from 'hooks/useActions'\nimport { authService } from 'services/auth'\nimport { userLoginRequest } from 'modules/Auth/actions'\n\ninterface IFormValues {\n  email: string\n  password: string\n}\n\nconst Login: FC = () => {\n  const emptyMessage = { type: '', message: '' }\n  const [form] = Form.useForm()\n  const [alert, setAlert] = useState(emptyMessage)\n  const [loading, setLoading] = useState(false)\n  const [dispatchUserLoginRequest] = useActions([userLoginRequest], null)\n  const history = useHistory()\n\n  const onFinish = async (values: IFormValues) => {\n    try {\n      setAlert(emptyMessage)\n      setLoading(true)\n\n      const { email, password } = values\n      const { type, message, token, data } = await authService.login({\n        email,\n        password\n      })\n\n      if (message) {\n        setAlert({ type, message })\n        setLoading(false)\n        if (type === 'error') return\n      }\n\n      dispatchUserLoginRequest({ data, token })\n      setLoading(false)\n\n      history.push('/')\n    } catch (error) {\n      setAlert(error)\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"flex-center\">\n      <Card className=\"card\" title=\"Вход в систему\">\n        {alert.message && (\n          <Alert\n            className=\"alert\"\n            message={alert.message}\n            type={alert.type as any}\n          />\n        )}\n        <Form\n          form={form}\n          name=\"login\"\n          className=\"login-form\"\n          initialValues={{ remember: true }}\n          onFinish={onFinish}\n        >\n          <Form.Item\n            name=\"email\"\n            rules={[\n              {\n                required: true,\n                type: 'email',\n                min: 4,\n                message: 'Некорректный email'\n              }\n            ]}\n          >\n            <Input prefix={<MailOutlined />} placeholder=\"Email\" size=\"large\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"password\"\n            rules={[{ required: true, min: 6, message: 'Минимум 6 символов' }]}\n          >\n            <Input.Password\n              placeholder=\"Пароль\"\n              prefix={<LockOutlined />}\n              size=\"large\"\n            />\n          </Form.Item>\n\n          <Form.Item>\n            <Form.Item name=\"register\" noStyle>\n              <Link to=\"/auth/register\">Регистрация</Link>\n            </Form.Item>\n\n            <Link className=\"link-recover\" to=\"/auth/recover\">\n              Забыли пароль?\n            </Link>\n          </Form.Item>\n\n          {loading && (\n            <Spin\n              className=\"center\"\n              indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n              delay={500}\n            />\n          )}\n\n          <Button size=\"large\" type=\"primary\" htmlType=\"submit\" block>\n            Войти\n          </Button>\n        </Form>\n      </Card>\n    </div>\n  )\n}\n\nexport { Login }\n","import { FC, useState, useEffect } from 'react'\nimport { useParams, Link } from 'react-router-dom'\nimport { Form, Input, Button, Card, Alert } from 'antd'\nimport { LockOutlined } from '@ant-design/icons'\nimport { authService } from 'services/auth'\n\ninterface IChangePasswordParams {\n  code?: string\n}\n\ninterface IFormValues {\n  password: string\n  confirmPassword: string\n}\n\nconst ChangePassword: FC = () => {\n  const { code }: IChangePasswordParams = useParams()\n  const emptyMessage = { type: '', message: '' }\n  const [alert, setAlert] = useState(emptyMessage)\n  const [secretError, setSecretError] = useState(false)\n  const [changeSuccess, setChangeSuccess] = useState(false)\n  const [loading, setLoading] = useState(false)\n\n  useEffect(() => {\n    const checkSecret = async () => {\n      const { type, message } = await authService.checkSecret({\n        code,\n        secretType: 'RECOVER_PASSWORD'\n      })\n      if (type === 'error') {\n        setAlert({ type, message })\n        setSecretError(true)\n      }\n    }\n\n    if (\n      code.match(\n        /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i\n      )\n    ) {\n      checkSecret()\n    } else {\n      setAlert({ type: 'error', message: 'Неверный секретный код!' })\n      setSecretError(true)\n    }\n  }, [code])\n\n  const onFinish = async (values: IFormValues) => {\n    try {\n      setAlert(emptyMessage)\n      setLoading(true)\n\n      const { password } = values\n      const { type, message } = await authService.changePassword({\n        code,\n        password\n      })\n\n      if (message) {\n        setAlert({ type, message })\n        setLoading(false)\n        if (type === 'error') return\n      }\n\n      setChangeSuccess(true)\n      setLoading(false)\n    } catch (error) {\n      setAlert(error)\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"flex-center\">\n      <Card className=\"card\" title=\"Изменение пароля\">\n        {alert.message && (\n          <Alert\n            className=\"alert\"\n            message={alert.message}\n            type={alert.type as any}\n          />\n        )}\n\n        {changeSuccess && (\n          <p>\n            Теперь Вы можете <Link to=\"/auth/login\">Войти</Link> в приложение\n          </p>\n        )}\n\n        {!secretError && !changeSuccess && (\n          <>\n            <p>Придумайте новый пароль</p>\n            <Form\n              name=\"change-password-request\"\n              initialValues={{ remember: true }}\n              onFinish={onFinish}\n            >\n              <Form.Item\n                name=\"password\"\n                rules={[{ required: true, message: 'Введите пароль!' }]}\n              >\n                <Input.Password\n                  placeholder=\"Пароль\"\n                  prefix={<LockOutlined />}\n                  size=\"large\"\n                />\n              </Form.Item>\n\n              <Form.Item\n                name=\"confirmPassword\"\n                dependencies={['password']}\n                rules={[\n                  { required: true, message: 'Введите подтверждение пароля!' },\n                  ({ getFieldValue }) => ({\n                    validator(_, value) {\n                      if (!value || getFieldValue('password') === value) {\n                        return Promise.resolve()\n                      }\n                      return Promise.reject(\n                        new Error('Пароли должны совпадать!')\n                      )\n                    }\n                  })\n                ]}\n              >\n                <Input.Password\n                  placeholder=\"Пароль еще раз\"\n                  prefix={<LockOutlined />}\n                  size=\"large\"\n                />\n              </Form.Item>\n\n              <Button\n                className=\"submit-button\"\n                type=\"primary\"\n                htmlType=\"submit\"\n                size=\"large\"\n                block\n                disabled={loading}\n              >\n                Изменить пароль\n              </Button>\n            </Form>\n          </>\n        )}\n      </Card>\n    </div>\n  )\n}\n\nexport { ChangePassword }\n","import { FC, useState, useEffect } from 'react'\nimport { Card, Alert } from 'antd'\nimport { Link, useParams } from 'react-router-dom'\nimport { authService } from 'services/auth'\n\ninterface IActivationParams {\n  code?: string\n}\n\nconst Activation: FC = () => {\n  const { code }: IActivationParams = useParams()\n  const emptyMessage = { type: '', message: '' }\n  const [alert, setAlert] = useState(emptyMessage)\n\n  useEffect(() => {\n    const activateUser = async () => {\n      const { type, message } = await authService.activate(code)\n      if (message) {\n        setAlert({ type, message })\n      }\n    }\n    activateUser()\n  }, [code])\n\n  return (\n    <div className=\"flex-center\">\n      <Card className=\"card\" title=\"Активация нового пользователя\">\n        {alert.message && (\n          <Alert\n            className=\"alert\"\n            message={alert.message}\n            type={alert.type as any}\n          />\n        )}\n        <Link className=\"login-link\" to=\"/auth/login\">\n          Вход\n        </Link>\n        <Link className=\"link-recover\" to=\"/auth/recover\">\n          Восстановить пароль\n        </Link>\n      </Card>\n    </div>\n  )\n}\n\nexport { Activation }\n","import { FC, useState } from 'react'\nimport { Form, Input, Button, Card, Alert, Spin } from 'antd'\nimport {\n  UserOutlined,\n  LockOutlined,\n  MailOutlined,\n  LoadingOutlined\n} from '@ant-design/icons'\nimport { authService } from 'services/auth'\n\ninterface IFormValues {\n  name: string\n  email: string\n  password: string\n}\n\nconst Register: FC = () => {\n  const emptyMessage = { type: '', message: '' }\n  const [form] = Form.useForm()\n  const [alert, setAlert] = useState(emptyMessage)\n  const [loading, setLoading] = useState(false)\n\n  const onFinish = async (values: IFormValues) => {\n    try {\n      setAlert(emptyMessage)\n      setLoading(true)\n\n      const { name, email, password } = values\n      const { type, message } = await authService.register({\n        name,\n        email,\n        password\n      })\n\n      if (message) {\n        setAlert({ type, message })\n        setLoading(false)\n        if (type === 'error') return\n      }\n\n      form.resetFields()\n      setLoading(false)\n    } catch (error) {\n      setAlert(error)\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"flex-center\">\n      <Card className=\"card\" title=\"Регистрация\">\n        {alert.message && (\n          <Alert\n            className=\"alert\"\n            message={alert.message}\n            type={alert.type as any}\n          />\n        )}\n        <Form\n          form={form}\n          name=\"register\"\n          initialValues={{ remember: true }}\n          onFinish={onFinish}\n          validateTrigger=\"onBlur\"\n        >\n          <Form.Item\n            name=\"name\"\n            rules={[\n              {\n                required: true,\n                message:\n                  \"Имя должно содержать минимум 4 символа английского или русского алфавита, допустимы цифры и знаки '- _'\",\n                pattern: /^[a-zA-Zа-яА-ЯёЁ0-9-_\\s]{4,}$/\n              }\n            ]}\n          >\n            <Input placeholder=\"Имя\" size=\"large\" prefix={<UserOutlined />} />\n          </Form.Item>\n\n          <Form.Item\n            name=\"email\"\n            rules={[\n              { required: true, type: 'email', message: 'Некорректный email' }\n            ]}\n          >\n            <Input prefix={<MailOutlined />} placeholder=\"Email\" size=\"large\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"password\"\n            rules={[\n              {\n                required: true,\n                message: 'Введите пароль! Минимум 6 символов.',\n                min: 6\n              }\n            ]}\n          >\n            <Input.Password\n              placeholder=\"Пароль\"\n              prefix={<LockOutlined />}\n              size=\"large\"\n            />\n          </Form.Item>\n\n          <Form.Item\n            name=\"confirm-password\"\n            dependencies={['password']}\n            rules={[\n              {\n                required: true,\n                message: 'Введите подтверждение пароля! Минимум 6 символов.',\n                min: 6\n              },\n              ({ getFieldValue }) => ({\n                validator(_, value) {\n                  if (!value || getFieldValue('password') === value) {\n                    return Promise.resolve()\n                  }\n                  return Promise.reject(new Error('Пароли должны совпадать!'))\n                }\n              })\n            ]}\n          >\n            <Input.Password\n              placeholder=\"Пароль еще раз\"\n              prefix={<LockOutlined />}\n              size=\"large\"\n            />\n          </Form.Item>\n\n          {loading && (\n            <Spin\n              className=\"center\"\n              indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n              delay={500}\n            />\n          )}\n\n          <Button\n            className=\"submit-button\"\n            type=\"primary\"\n            htmlType=\"submit\"\n            size=\"large\"\n            block\n            disabled={loading}\n          >\n            Зарегистрироваться\n          </Button>\n        </Form>\n      </Card>\n    </div>\n  )\n}\n\nexport { Register }\n","import { FC, useState } from 'react'\nimport { Form, Input, Button, Card, Alert, Spin } from 'antd'\nimport { MailOutlined, LoadingOutlined } from '@ant-design/icons'\nimport { authService } from 'services/auth'\n\ninterface IFormValues {\n  email: string\n}\n\nconst Recover: FC = () => {\n  const emptyMessage = { type: '', message: '' }\n  const [form] = Form.useForm()\n  const [alert, setAlert] = useState(emptyMessage)\n  const [loading, setLoading] = useState(false)\n\n  const onFinish = async (values: IFormValues) => {\n    try {\n      setAlert(emptyMessage)\n      setLoading(true)\n\n      const { email } = values\n      const { type, message } = await authService.recover({\n        email\n      })\n\n      if (message) {\n        setAlert({ type, message })\n        setLoading(false)\n        if (type === 'error') return\n      }\n\n      form.resetFields()\n      setLoading(false)\n    } catch (error) {\n      setAlert(error)\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"flex-center\">\n      <Card className=\"card\" title=\"Восстановление пароля\">\n        {alert.message && (\n          <Alert\n            className=\"alert\"\n            message={alert.message}\n            type={alert.type as any}\n          />\n        )}\n        {alert.type !== 'success' && (\n          <>\n            <p>\n              Укажите email, указанный при регистрации и мы вышлем на него\n              ссылку для восстановления пароля.\n            </p>\n            <Form\n              form={form}\n              name=\"recover\"\n              className=\"login-form\"\n              initialValues={{ remember: true }}\n              onFinish={onFinish}\n              validateTrigger=\"onBlur\"\n            >\n              <Form.Item\n                name=\"email\"\n                rules={[\n                  {\n                    required: true,\n                    type: 'email',\n                    message: 'Некорректный email!'\n                  }\n                ]}\n              >\n                <Input\n                  prefix={<MailOutlined />}\n                  placeholder=\"Email\"\n                  size=\"large\"\n                />\n              </Form.Item>\n\n              {loading && (\n                <Spin\n                  className=\"center\"\n                  indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n                  delay={500}\n                />\n              )}\n\n              <Button\n                size=\"large\"\n                type=\"primary\"\n                htmlType=\"submit\"\n                block\n                disabled={loading}\n              >\n                Восстановить пароль\n              </Button>\n            </Form>\n          </>\n        )}\n      </Card>\n    </div>\n  )\n}\n\nexport { Recover }\n","import { FC } from 'react'\nimport { Empty } from 'antd'\nimport { Scrollbar } from 'containers/Scrollbar'\n\ninterface IMessagesProps {\n  channel: IChannelData\n}\n\nexport interface IChannelData {\n  id: number | string\n  ownerId: number\n  name: string\n  type: string\n  photo: string\n  members: string[]\n  messages: IMessage[]\n}\n\nexport interface IContactData {\n  name: string\n  type: string\n  photo: string\n  messages: IMessage[]\n}\n\ninterface IMessage {\n  id: string\n  text: string\n  from: string | number // todo userId\n  type?: string\n}\n\nconst Messages: FC<IMessagesProps> = ({\n  channel: { messages }\n}: IMessagesProps) =>\n  (!messages?.length && (\n    <div className=\"chat-empty\">\n      <Empty description=\"Сообщений нет\" />\n    </div>\n  )) || (\n    <div className=\"chat-window\">\n      <Scrollbar style={{ height: 'calc(100vh - 104px)' }}>\n        {messages.map(({ id, text, from }) => (\n          <div key={id}>\n            <strong>{from}</strong>: {text}\n          </div>\n        ))}\n      </Scrollbar>\n    </div>\n  )\n\nexport { Messages }\n","import { FC, memo } from 'react'\nimport { Form, Input, Button } from 'antd'\nimport { SendOutlined } from '@ant-design/icons'\nimport { notify } from 'services/notification'\n\ninterface IFormValues {\n  text: string\n}\n\ninterface IChatInputProps {\n  sendMessage: (text: string) => void\n}\n\nconst InputMessage: FC<IChatInputProps> = memo(({ sendMessage }) => {\n  const [form] = Form.useForm()\n\n  const onFinish = async (values: IFormValues) => {\n    try {\n      const { text } = values\n      sendMessage(text)\n      form.resetFields()\n    } catch (error) {\n      notify.error(error.message)\n    }\n  }\n  return (\n    <div className=\"chat-input\">\n      <Form size=\"large\" className=\"input-form\" form={form} onFinish={onFinish}>\n        <Form.Item className=\"input-messaage\" required name=\"text\">\n          <Input autoFocus placeholder=\"Введите сообщение\" />\n        </Form.Item>\n        <Form.Item className=\"send-button\">\n          <Button htmlType=\"submit\" type=\"primary\" icon={<SendOutlined />}>\n            Отправить\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  )\n})\n\nexport { InputMessage }\n","import { useCallback } from 'react'\nimport { nanoid } from 'nanoid'\nimport { UserDTO } from 'services/user'\nimport { Empty, Alert, Typography, Button } from 'antd'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport {\n  sendChannelMessage,\n  sendContactMessage,\n  removeContact,\n  setActiveChannel,\n  addContact\n} from 'modules/Chat/actions'\nimport { userRemoveContact } from 'modules/Auth/actions'\nimport { useActions } from 'hooks/useActions'\nimport { socketService } from 'services/socket'\nimport { notify } from 'services/notification'\nimport { chatService } from 'services/chat'\nimport { Messages } from './Messages'\nimport { InputMessage } from './InputMessage'\n\nconst { Text, Title } = Typography\n\nconst Chat = () => {\n  const user = useShallowEqualSelector((state) => state.auth.user) as UserDTO\n  const [\n    dispatchSendChannelMessage,\n    dispatchSendContactMessage,\n    dispatchRemoveContact,\n    dispatchUserRemoveContact,\n    dispatchActiveChannel,\n    dispatchAddContact\n  ] = useActions(\n    [\n      sendChannelMessage,\n      sendContactMessage,\n      removeContact,\n      userRemoveContact,\n      setActiveChannel,\n      addContact\n    ],\n    null\n  )\n  const { activeChannel, channels, contacts } = useShallowEqualSelector(\n    (state) => state.chat\n  ) as any\n\n  const onSendMessage = useCallback(\n    (text: string): void => {\n      if (!activeChannel) return\n      if (!text) return\n\n      const id = nanoid()\n      const { id: userId, name } = user\n      const message = { id, text, from: `${name}(${userId})` }\n      const payload = {\n        activeChannelId: activeChannel.id,\n        message\n      }\n\n      if (activeChannel.type === 'channel') {\n        dispatchSendChannelMessage(payload)\n        socketService.sendChannelMessage(payload)\n      }\n\n      if (activeChannel.type === 'contact') {\n        dispatchSendContactMessage(payload)\n        socketService.sendContactMessage({\n          from: user.id,\n          to: activeChannel.id,\n          message\n        })\n      }\n    },\n    [\n      activeChannel,\n      dispatchSendChannelMessage,\n      dispatchSendContactMessage,\n      user\n    ]\n  )\n\n  if (!user || !activeChannel || (!channels && !contacts))\n    return (\n      <div className=\"chat-empty\">\n        <Empty description=\"Выберите канал для начала общения!\" />\n      </div>\n    )\n\n  const { id, type, name, isContactRequest, isInvite, text } = activeChannel\n\n  if (isContactRequest) {\n    return (\n      <>\n        <Alert\n          showIcon\n          message=\"Ожидание подтверждения\"\n          description={`Запрос на добавление в контакты отправлен пользователю ${name}`}\n          type=\"info\"\n        />\n        {text && (\n          <div className=\"invitation-text\">\n            <Title level={5}>Ваше сообщение пользователю:</Title>\n            <Text>\n              <blockquote>{text}</blockquote>\n            </Text>\n          </div>\n        )}\n      </>\n    )\n  }\n\n  const removeInviteHandler = async () => {\n    try {\n      const { type: responseType, message } = await chatService.removeInvite({\n        inviterId: activeChannel.id,\n        userId: user.id\n      })\n\n      if (message) {\n        if (responseType === 'success') {\n          notify.success(message)\n        }\n        if (responseType === 'error') {\n          notify.error(message)\n          return\n        }\n      }\n\n      dispatchRemoveContact(activeChannel.id)\n      dispatchActiveChannel(null)\n\n      socketService.removeInviteRequest({ to: activeChannel.id, contact: user })\n    } catch (error) {\n      notify.error(error.message)\n    }\n  }\n\n  const addContactHandler = async () => {\n    try {\n      const {\n        type: responseType,\n        message: serverMessage,\n        data\n      } = await chatService.addContact({\n        inviterId: activeChannel.id,\n        userId: user.id\n      })\n\n      if (serverMessage) {\n        if (responseType === 'success') {\n          dispatchAddContact({\n            ...data,\n            type: 'contact',\n            messages: []\n          })\n          dispatchActiveChannel({\n            ...data,\n            type: 'contact'\n          })\n\n          socketService.addContactRequest({\n            to: data.id,\n            contact: {\n              ...user,\n              type: 'contact',\n              messages: []\n            }\n          })\n\n          notify.success(serverMessage)\n        }\n\n        if (responseType === 'error') {\n          // @todo refactor\n          if (serverMessage === 'Пользователь отменил свое приглашение') {\n            dispatchRemoveContact(activeChannel.id)\n            dispatchUserRemoveContact(activeChannel.id)\n            dispatchActiveChannel(null)\n          }\n\n          notify.error(serverMessage)\n        }\n      }\n    } catch (error) {\n      notify.error(error.message)\n    }\n  }\n\n  if (isInvite) {\n    return (\n      <>\n        <Alert\n          showIcon\n          message=\"Запрос на добавление в контакты\"\n          description={`Пользователь ${name} хочет добавить Вас в свой список контактов`}\n          type=\"info\"\n        />\n        {text && (\n          <div className=\"invitation-text\">\n            <Title level={5}>Приветственное сообщение:</Title>\n            <Text>\n              <blockquote>{text}</blockquote>\n            </Text>\n          </div>\n        )}\n        <div className=\"stretch-container\">\n          <Button block onClick={addContactHandler}>\n            Добавить\n          </Button>\n          <Button block danger onClick={removeInviteHandler}>\n            Отказать\n          </Button>\n        </div>\n      </>\n    )\n  }\n\n  const channelData =\n    type === 'channel' ? channels && channels[id] : contacts && contacts[id]\n\n  if (!channelData) return null\n\n  return (\n    <>\n      <Messages channel={channelData} />\n      <InputMessage sendMessage={onSendMessage} />\n    </>\n  )\n}\n\nexport { Chat }\n","import { FC } from 'react'\nimport { Switch, Route, Redirect } from 'react-router-dom'\n\nimport { PrivateRoute } from 'containers/PrivateRoute'\nimport { Login } from 'components/Auth/Login'\nimport { ChangePassword } from 'components/Auth/ChangePassword'\nimport { Activation } from 'components/Auth/Activation'\nimport { Register } from 'components/Auth/Register'\nimport { Recover } from 'components/Auth/Recover'\nimport { Chat } from '../Chat'\n\nconst Routes: FC = () => (\n  <Switch>\n    <PrivateRoute exact path=\"/\" component={Chat} />\n    <Route path=\"/auth/login\" component={Login} />\n    <Route path=\"/auth/register\" component={Register} />\n    <Route path=\"/auth/activation/:code\" component={Activation} />\n    <Route path=\"/auth/recover\" component={Recover} />\n    <Route path=\"/auth/change-password/:code\" component={ChangePassword} />\n    <Route path=\"*\">\n      <Redirect to=\"/auth/login\" />\n    </Route>\n  </Switch>\n)\n\nexport { Routes }\n","import { FC, useState, useEffect } from 'react'\nimport { UserDTO } from 'services/user'\nimport { Layout } from 'antd'\nimport { PrivateContainer } from 'containers/Private'\nimport {\n  sendChannelMessage,\n  sendContactMessage,\n  initChannelsData,\n  initContactsData,\n  addContact,\n  setActiveChannel,\n  removeContact,\n  addChannel\n} from 'modules/Chat/actions'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport { useActions } from 'hooks/useActions'\nimport { socketService } from 'services/socket'\nimport { notify } from 'services/notification'\nimport { Header } from './Header'\nimport { Sidebar } from './Sidebar'\nimport { Routes } from '../Routes'\n\nconst { Content } = Layout\n\nconst App: FC = () => {\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false)\n  const [\n    dispatchSendChannelMessage,\n    dispatchSendContactMessage,\n    dispatchInitChannelsData,\n    dispatchInitContactsData,\n    dispatchAddContact,\n    dispatchActiveChannel,\n    dispatchRemoveContact,\n    dispatchAddChannel\n  ] = useActions(\n    [\n      sendChannelMessage,\n      sendContactMessage,\n      initChannelsData,\n      initContactsData,\n      addContact,\n      setActiveChannel,\n      removeContact,\n      addChannel\n    ],\n    null\n  )\n\n  const user = useShallowEqualSelector((state) => state.auth.user) as UserDTO\n\n  const onSidebarToggle = (isCollapsed: boolean) => {\n    setSidebarCollapsed(isCollapsed)\n  }\n\n  useEffect(() => {\n    if (!user) return () => {}\n\n    const subscribeToSocketEvents = async () => {\n      await socketService.connect(user)\n      const {\n        channels: channelsData,\n        contacts: contactsData\n      } = await socketService.subscribeToChannels(user)\n\n      dispatchInitChannelsData(channelsData)\n      dispatchInitContactsData(contactsData)\n\n      socketService.subscribeToDisconnect(user)\n\n      socketService.subscribeToChannelMessageBroadcast(\n        ({ activeChannelId, message }) => {\n          dispatchSendChannelMessage({ activeChannelId, message })\n        }\n      )\n\n      socketService.subscribeToContactMessagePrivate((message, from) => {\n        dispatchSendContactMessage({\n          activeChannelId: from,\n          message\n        })\n      })\n\n      socketService.subscribeToInviteContact((payload) => {\n        dispatchAddContact(payload)\n      })\n\n      socketService.subscribeToAddContact((payload) => {\n        const { id, name, type } = payload\n        dispatchAddContact(payload)\n        dispatchActiveChannel({\n          id,\n          name,\n          type\n        })\n        notify.success(\n          'Добавление в контакты',\n          `Пользователь ${name} добавил(а) Вас в свой список контактов`\n        )\n      })\n\n      socketService.subscribeToRemoveInvite((payload) => {\n        const { id, name } = payload\n        dispatchRemoveContact(id)\n        dispatchActiveChannel(null)\n\n        notify.error(\n          'Отказ добавления в контакты',\n          `Пользователь ${name} не стал(а) добавлять Вас в свой список контактов`\n        )\n      })\n\n      socketService.subscribeToCancelInvite((payload) => {\n        const { id, name } = payload\n        dispatchRemoveContact(id)\n        dispatchActiveChannel(null)\n\n        notify.error(\n          'Отмена добавления в контакты',\n          `Пользователь ${name} отменил запрос на добавление в контакты`\n        )\n      })\n\n      socketService.subscribeToAddToChannel((payload) => {\n        const { inviterName, channel } = payload\n        socketService.subscribeToChannel(channel.id)\n        dispatchAddChannel(channel)\n\n        const { id, name, type } = channel\n        dispatchActiveChannel({ id, name, type })\n\n        notify.success(\n          'Добавление в канал',\n          `Пользователь ${inviterName} добавил(а) Вас в канал ${name}`\n        )\n      })\n    }\n\n    subscribeToSocketEvents()\n\n    return () => {\n      socketService.unsubscribeFromSocketEvents()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [user])\n\n  return (\n    <Layout className=\"wrap-layout\">\n      <PrivateContainer>\n        <Sidebar\n          sidebarCollapsed={sidebarCollapsed}\n          onSidebarToggle={onSidebarToggle}\n        />\n      </PrivateContainer>\n\n      <Layout className=\"site-layout\">\n        <Header\n          sidebarCollapsed={sidebarCollapsed}\n          onSidebarToggle={onSidebarToggle}\n        />\n        <Content className=\"content\">\n          <Routes />\n        </Content>\n      </Layout>\n    </Layout>\n  )\n}\n\nexport { App }\n","import { takeEvery, put, call, fork } from 'redux-saga/effects'\r\nimport { authService } from 'services/auth'\r\nimport { socketService } from 'services/socket'\r\nimport {\r\n  userLoginRequest,\r\n  userLogoutRequest,\r\n  userFetchSuccess\r\n} from './actions'\r\nimport {\r\n  // initChannelsData,\r\n  // initContactsData,\r\n  setActiveChannel\r\n} from '../Chat/actions'\r\n\r\n/** login */\r\nexport function* userLoginRequestFlow({ payload: { data: user, token } }) {\r\n  yield put(userFetchSuccess(user))\r\n  yield call([authService, authService.setToken], token)\r\n\r\n  // const { channels, contacts } = yield call(\r\n  //   [socketService, socketService.connect],\r\n  //   user\r\n  // )\r\n\r\n  // yield put(initChannelsData(channels))\r\n  // yield put(initContactsData(contacts))\r\n}\r\nexport function* userLoginWatcher() {\r\n  yield takeEvery(userLoginRequest, userLoginRequestFlow)\r\n}\r\n\r\n/** logout */\r\nexport function* userLogoutRequestFlow() {\r\n  yield call([authService, authService.removeToken])\r\n  yield put(userFetchSuccess(false))\r\n  yield put(setActiveChannel(null))\r\n  yield call([socketService, socketService.disconnect])\r\n}\r\nexport function* userLogoutWatcher() {\r\n  yield takeEvery(userLogoutRequest, userLogoutRequestFlow)\r\n}\r\n\r\nconst authSagas = function* generator() {\r\n  yield fork(userLoginWatcher)\r\n  yield fork(userLogoutWatcher)\r\n}\r\n\r\nexport { authSagas }\r\n","import { combineReducers } from 'redux'\r\nimport { handleActions } from 'redux-actions'\r\nimport { UserDTO } from 'services/user'\r\nimport {\r\n  userFetchSuccess,\r\n  userFetchFailure,\r\n  userUpdatePhoto,\r\n  userRemoveContact,\r\n  userAddContact\r\n} from './actions'\r\n\r\nexport interface IAuthState {\r\n  user: UserDTO\r\n}\r\n\r\nexport const initialState = {\r\n  user: null\r\n}\r\n\r\nconst user = handleActions(\r\n  {\r\n    [userFetchSuccess]: (_state, action) => action.payload,\r\n    [userFetchFailure]: () => false,\r\n    [userUpdatePhoto]: (state, action) => ({ ...state, photo: action.payload }),\r\n    [userRemoveContact]: (state, action) => {\r\n      if (!state.contacts) {\r\n        return state\r\n      }\r\n\r\n      const oldContacts = JSON.parse(state.contacts)\r\n\r\n      let updatedContacts = oldContacts.filter(\r\n        (id: number) => action.payload !== id\r\n      )\r\n      if (!updatedContacts.length) {\r\n        updatedContacts = null\r\n      } else {\r\n        updatedContacts = JSON.stringify(updatedContacts)\r\n      }\r\n\r\n      return { ...state, contacts: updatedContacts }\r\n    },\r\n    [userAddContact]: (state, action) => {\r\n      let contacts\r\n\r\n      if (!state.contacts) {\r\n        contacts = `[${action.payload}]`\r\n      } else {\r\n        const oldContacts = JSON.parse(state.contacts)\r\n        oldContacts.push(action.payload)\r\n        contacts = JSON.stringify(oldContacts)\r\n      }\r\n\r\n      return { ...state, contacts }\r\n    }\r\n  },\r\n  null\r\n)\r\n\r\nconst authReducer = combineReducers<IAuthState>({\r\n  user\r\n})\r\n\r\nexport { authReducer }\r\n","import { combineReducers } from 'redux'\r\nimport { handleActions } from 'redux-actions'\r\nimport {\r\n  setActiveChannel,\r\n  initChannelsData,\r\n  initContactsData,\r\n  sendChannelMessage,\r\n  sendContactMessage,\r\n  addChannel,\r\n  addContact,\r\n  populateChannel,\r\n  removeContact,\r\n  addChannelMember\r\n} from './actions'\r\n\r\nexport interface IActiveChannel {\r\n  id: number\r\n  name: string\r\n  type: string\r\n  isContactRequest?: boolean\r\n  text?: string\r\n}\r\n\r\nexport interface IChatState {\r\n  activeChannel: IActiveChannel\r\n  channels: Object\r\n  contacts: Object\r\n}\r\n\r\nexport const initialState: IChatState = {\r\n  activeChannel: null,\r\n  channels: null,\r\n  contacts: null\r\n}\r\n\r\nconst activeChannel = handleActions(\r\n  {\r\n    [setActiveChannel]: (_state, action) => action.payload\r\n  },\r\n  null\r\n)\r\n\r\nconst addMessage = (state, action) => {\r\n  if (!state) return state\r\n\r\n  return {\r\n    ...state,\r\n    [action.payload.activeChannelId]: {\r\n      ...state[action.payload.activeChannelId],\r\n      messages: [\r\n        ...state[action.payload.activeChannelId].messages,\r\n        action.payload.message\r\n      ]\r\n    }\r\n  }\r\n}\r\n\r\nconst channels = handleActions(\r\n  {\r\n    [initChannelsData]: (_state, action) => action.payload,\r\n    [sendChannelMessage]: addMessage,\r\n    [addChannel]: (state, action) => ({\r\n      ...state,\r\n      [action.payload.id]: {\r\n        ownerId: action.payload.ownerId,\r\n        name: action.payload.name,\r\n        members: action.payload.members,\r\n        photo: action.payload.photo,\r\n        type: action.payload.type,\r\n        messages: []\r\n      }\r\n    }),\r\n    [populateChannel]: (state, action) => ({\r\n      ...state,\r\n      [action.payload.id]: {\r\n        ...state[action.payload.id],\r\n        owner: action.payload.owner,\r\n        members: action.payload.members,\r\n        populated: true\r\n      }\r\n    }),\r\n    [addChannelMember]: (state, action) => ({\r\n      ...state,\r\n      [action.payload.id]: {\r\n        ...state[action.payload.id],\r\n        members: [...state[action.payload.id].members, action.payload.member]\r\n      }\r\n    })\r\n  },\r\n  null\r\n)\r\n\r\nconst contacts = handleActions(\r\n  {\r\n    [initContactsData]: (_state, action) => action.payload,\r\n    [sendContactMessage]: addMessage,\r\n    [addContact]: (state, action) => {\r\n      const contact = {\r\n        [action.payload.id]: {\r\n          ...action.payload\r\n        }\r\n      }\r\n      delete contact[action.payload.id].id\r\n\r\n      return state ? { ...state, ...contact } : { ...contact }\r\n    },\r\n    [removeContact]: (state, action) => {\r\n      let newState = { ...state }\r\n      delete newState[action.payload]\r\n      if (!Object.keys(newState).length) {\r\n        newState = null\r\n      }\r\n      return newState\r\n    }\r\n  },\r\n  null\r\n)\r\n\r\nconst chatReducer = combineReducers<IChatState>({\r\n  activeChannel,\r\n  channels,\r\n  contacts\r\n})\r\n\r\nexport { chatReducer }\r\n","import { combineReducers } from 'redux'\nimport { handleActions } from 'redux-actions'\nimport {\n  changeCreateChannelModalState,\n  changeUserProfileModalState,\n  changeAddContactModalState,\n  changeContactInfoModalState,\n  changeChannelInfoModalState,\n  changeAddToChannelModalState\n} from './actions'\n\nexport interface IModalsState {\n  createChannel: boolean\n  userProfile: boolean\n  addContact: boolean\n  contactInfo: boolean\n  channelInfo: boolean\n  addToChannel: boolean\n}\n\nexport const initialState = {\n  createChannel: false,\n  userProfile: false,\n  addContact: false,\n  contactInfo: false,\n  channelInfo: false,\n  addToChannel: false\n}\n\nconst createChannel = handleActions(\n  { [changeCreateChannelModalState]: (_state, action) => action.payload },\n  false\n)\n\nconst userProfile = handleActions(\n  { [changeUserProfileModalState]: (_state, action) => action.payload },\n  false\n)\n\nconst addContact = handleActions(\n  { [changeAddContactModalState]: (_state, action) => action.payload },\n  false\n)\n\nconst contactInfo = handleActions(\n  { [changeContactInfoModalState]: (_state, action) => action.payload },\n  false\n)\n\nconst channelInfo = handleActions(\n  { [changeChannelInfoModalState]: (_state, action) => action.payload },\n  false\n)\n\nconst addToChannel = handleActions(\n  { [changeAddToChannelModalState]: (_state, action) => action.payload },\n  false\n)\n\nconst modalsReducer = combineReducers<IModalsState>({\n  createChannel,\n  userProfile,\n  addContact,\n  contactInfo,\n  channelInfo,\n  addToChannel\n})\n\nexport { modalsReducer }\n","import { call, put } from 'redux-saga/effects'\nimport { authService } from 'services/auth'\n// import { socketService } from 'services/socket'\nimport { userFetchSuccess, userFetchFailure } from './Auth/actions'\n// import { initChannelsData, initContactsData } from './Chat/actions'\n\n/** Launch saga once when on app start */\nconst launchSaga = function* launchSaga() {\n  try {\n    const token = yield call([authService, authService.getToken])\n\n    if (!token) {\n      yield put(userFetchFailure())\n      return\n    }\n    const { data: user } = yield call([authService, authService.fetchByToken], {\n      token\n    })\n\n    if (!user) {\n      yield call([authService, authService.removeToken])\n      yield put(userFetchFailure())\n      return\n    }\n\n    yield put(userFetchSuccess(user))\n    // const { channels, contacts } = yield call(\n    //   [socketService, socketService.connect],\n    //   user\n    // )\n    // yield put(initChannelsData(channels))\n    // yield put(initContactsData(contacts))\n  } catch (error) {\n    yield call([authService, authService.removeToken])\n    yield put(userFetchFailure(error))\n  }\n}\n\nexport { launchSaga }\n","import { combineReducers } from 'redux'\nimport { fork } from 'redux-saga/effects'\nimport { authSagas } from 'modules/Auth/sagas'\nimport {\n  authReducer,\n  IAuthState,\n  initialState as authInitialState\n} from 'modules/Auth/reducer'\nimport {\n  chatReducer,\n  IChatState,\n  initialState as chatInitialState\n} from 'modules/Chat/reducer'\nimport {\n  modalsReducer,\n  IModalsState,\n  initialState as modalsInitialState\n} from 'modules/Modals/reducer'\nimport { launchSaga } from 'modules/launchSaga'\n\nexport interface IRootState {\n  auth: IAuthState\n  chat: IChatState\n  modals: IModalsState\n}\n\nexport const initialState: IRootState = {\n  auth: authInitialState,\n  chat: chatInitialState,\n  modals: modalsInitialState\n}\n\nexport const rootReducer = combineReducers({\n  auth: authReducer,\n  chat: chatReducer,\n  modals: modalsReducer\n})\n\nexport function* rootSaga() {\n  yield fork(authSagas)\n  yield fork(launchSaga)\n}\n","import { createStore, compose, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport createSagaMiddleware from 'redux-saga'\nimport { rootReducer, rootSaga } from 'modules'\n\nconst createAppStore = () => {\n  const sagaMiddleware = createSagaMiddleware()\n  const store = createStore(\n    rootReducer,\n    compose(composeWithDevTools(applyMiddleware(sagaMiddleware)))\n  )\n\n  sagaMiddleware.run(rootSaga)\n  return store\n}\n\nexport { createAppStore }\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\n// eslint-disable-next-line import/no-default-export\nexport default reportWebVitals\n","import { StrictMode } from 'react'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport { render } from 'react-dom'\nimport { App } from 'components/App'\nimport { createAppStore } from 'modules/store'\nimport reportWebVitals from 'reportWebVitals'\nimport 'index.scss'\n\nconst store = createAppStore()\n\nrender(\n  <StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}