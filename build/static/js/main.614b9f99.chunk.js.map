{"version":3,"sources":["hooks/useShallowEqualSelector.ts","containers/Private.tsx","modules/Chat/actions.ts","hooks/useActions.ts","services/api.ts","services/chat.ts","services/socket.ts","components/MainMenu/index.tsx","modules/Modals/actions.ts","modules/Auth/actions.ts","containers/ModalWindow.tsx","services/user.ts","components/PhotoUploader/index.tsx","components/Modals/UserProfile/index.tsx","components/UserMenu/index.tsx","components/Modals/ContactInfo/index.tsx","components/Modals/ChannelInfo/index.tsx","components/App/Header/index.tsx","containers/Scrollbar.tsx","components/Modals/CreateChannel/index.tsx","components/Modals/AddContact/index.tsx","components/App/Sidebar/SidebarMenu/index.tsx","components/App/Sidebar/index.tsx","hooks/useEscape.ts","containers/PrivateRoute.tsx","services/auth.ts","components/Auth/Login/index.tsx","components/Auth/ChangePassword/index.tsx","components/Auth/Activation/index.tsx","components/Auth/Register/index.tsx","components/Auth/Recover/index.tsx","components/Chat/Messages/index.tsx","components/Chat/InputMessage/index.tsx","components/Chat/index.tsx","components/Routes/index.tsx","components/App/index.tsx","modules/Auth/sagas.ts","modules/Auth/reducer.ts","modules/Chat/reducer.ts","modules/Modals/reducer.ts","modules/launchSaga.ts","modules/index.ts","modules/store.ts","reportWebVitals.ts","index.tsx"],"names":["useShallowEqualSelector","selector","useSelector","shallowEqual","PrivateContainer","children","state","auth","user","addChannel","createAction","setActiveChannel","initChannelsData","populateChannel","addContact","removeContact","initContactsData","sendChannelMessage","sendContactMessage","useActions","actions","deps","dispatch","useDispatch","useMemo","Array","isArray","map","a","bindActionCreators","AUTH_TOKEN_STORAGE_KEY","makeError","error","response","data","status","message","type","apiService","getToken","localStorage","getItem","send","method","endpoint","payload","axios","interceptors","request","use","config","token","headers","Authorization","chatService","createChannel","api","getChannelsList","channelsData","channelsList","channels","populatedChannels","reduce","acc","id","ownerId","name","members","photo","messages","populated","getContactsList","contactsData","contactsList","contacts","populatedContacts","email","getSubscriptions","console","log","socketService","socket","undefined","connect","io","autoConnect","userId","subscribeToChannels","Object","keys","emit","subscribeToChannel","channelId","inviteToChannel","disconnect","menuItems","key","label","path","icon","PieChartOutlined","MainMenu","location","useLocation","history","useHistory","find","item","pathname","mode","selectedKeys","onClick","clicked","_item","push","Item","changeCreateChannelModalState","changeUserProfileModalState","changeAddContactModalState","changeContactInfoModalState","changeChannelInfoModalState","userLoginRequest","userLogoutRequest","userFetchSuccess","userFetchFailure","userUpdatePhoto","userAddContact","userRemoveContact","ModalWindow","props","title","visible","onOk","onCancel","afterClose","destroyOnClose","footer","style","centered","userService","changePhoto","contactId","getUsersList","beforeUpload","file","isJpgOrPng","isLt2M","size","getBase64","src","url","Promise","resolve","reader","FileReader","readAsDataURL","originFileObj","onload","event","img","Image","target","result","el","elem","document","createElement","scaleFactor","width","height","ctx","getContext","drawImage","srcEncoded","canvas","toDataURL","onPreview","image","window","open","write","outerHTML","PhotoUploader","preloadedPhoto","onChangePhoto","onRemovePhoto","initialPhoto","useState","fileList","setFileList","onChange","newFileList","imageUrl","className","rotate","shape","modalTitle","modalOk","modalCancel","listType","customRequest","options","onSuccess","length","UserProfile","loading","setLoading","setPhoto","userProfile","modals","dispatchUserUpdatePhoto","dispatchChangeUserProfileModalState","onSaveChanges","indicator","LoadingOutlined","fontSize","spin","delay","disabled","UserMenu","dispatchUserLogoutRequest","menu","ProfileOutlined","Divider","LogoutOutlined","overlay","trigger","UserOutlined","Title","Typography","Paragraph","ContactInfo","activeContact","dispatchChangeContactInfoModalState","dispatchRemoveContact","dispatchUserRemoveContact","dispatchActiveChannel","chat","contactInfo","contact","removeContactHandler","serverMessage","success","align","flex","level","block","danger","ChannelInfo","activeChannel","dispatchChangeChannelInfoModalState","disaptchPopulateChannel","channelInfo","channel","useEffect","owner","member","getChannelData","leaveChannel","Text","AntHeader","Layout","Header","chatInfoRef","useRef","onSidebarToggle","sidebarCollapsed","onTriggerClick","menuTrigger","MenuUnfoldOutlined","padding","MenuFoldOutlined","activeChat","onKeyDown","current","focus","ref","role","tabIndex","renderTrackVertical","ownProps","backgroundColor","right","bottom","top","borderRadius","renderThumbVertical","boxShadow","Scrollbar","hideTracksWhenNotNeeded","autoHide","autoHideTimeout","CreateChannel","Form","useForm","form","dispatchAddChannel","dispatchChangeCreateChannelModalState","onFinish","values","description","activeChannelPayload","layout","rules","required","max","placeholder","htmlType","AddContact","addContactModalState","dispatchChangeAddContactModalState","dispatchAddContact","dispatchUserAddContact","from","resetFields","min","prefix","MailOutlined","SidebarMenu","UsergroupAddOutlined","UserAddOutlined","ContactsOutlined","SettingOutlined","MenuOutlined","Sider","Sidebar","onEscape","sidebarLocked","setSidebarLocked","handleEsc","addEventListener","removeEventListener","onClickMenu","split","channelType","intChannelId","parseInt","selectedMenuKey","collapsed","collapsedWidth","theme","overflow","LockOutlined","UnlockOutlined","PlusCircleOutlined","entries","MessageFilled","color","PrivateRoute","Component","component","rest","render","routeProps","to","defaultProps","authService","register","activate","code","login","fetchByToken","recover","checkSecret","changePassword","setToken","setItem","removeToken","removeItem","Login","emptyMessage","alert","setAlert","dispatchUserLoginRequest","password","initialValues","remember","Password","noStyle","ChangePassword","useParams","secretError","setSecretError","changeSuccess","setChangeSuccess","secretType","match","dependencies","getFieldValue","validator","_","value","reject","Error","Activation","activateUser","Register","validateTrigger","pattern","Recover","Messages","text","InputMessage","memo","sendMessage","autoFocus","SendOutlined","Chat","dispatchSendChannelMessage","dispatchSendContactMessage","onSendMessage","useCallback","nanoid","activeChannelId","channelData","Routes","exact","Content","App","needRecreateRef","setNeedRecreateRef","setSidebarCollapsed","SR","isCollapsed","on","reason","off","userLoginRequestFlow","userLoginWatcher","userLogoutRequestFlow","userLogoutWatcher","put","call","takeLatest","authSagas","generator","fork","handleActions","_state","action","updatedContacts","JSON","parse","filter","stringify","oldContacts","authReducer","combineReducers","addMessage","newState","chatReducer","modalsReducer","launchSaga","rootSaga","rootReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","sagaMiddleware","createSagaMiddleware","createStore","compose","composeWithDevTools","applyMiddleware","run","createAppStore","getElementById"],"mappings":"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","file":"static/js/main.614b9f99.chunk.js","sourcesContent":["import { useSelector, shallowEqual } from 'react-redux'\nimport { IRootState } from 'modules'\n\nconst useShallowEqualSelector = (selector: any) =>\n  useSelector<IRootState>(selector, shallowEqual)\n\nexport { useShallowEqualSelector }\n","import { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\n\nconst PrivateContainer = ({ children }) => {\n  const user = useShallowEqualSelector((state) => state.auth.user)\n  if (!user) return null\n\n  return children\n}\n\nexport { PrivateContainer }\n","import { createAction } from 'redux-actions'\r\n\r\n/** Добавление нового канала */\r\nexport const addChannel: any = createAction('CHAT/ADD_CHANNEL')\r\n/** Установить активный канал чата (id, label) */\r\nexport const setActiveChannel: any = createAction('CHAT/SET_ACTIVE_CHANNEL')\r\n/** Начальное состояние каналов на момент захода пользователя */\r\nexport const initChannelsData: any = createAction('CHAT/INIT_CHANNELS_DATA')\r\n/** Дополнить данные о канале */\r\nexport const populateChannel: any = createAction('CHAT/POPULATE_CHANNEL')\r\n\r\n/** Добавление нового контакта */\r\nexport const addContact: any = createAction('CHAT/ADD_CONTACT')\r\n/** Удаление контакта */\r\nexport const removeContact: any = createAction('CHAT/REMOVE_CONTACT')\r\n/** Начальное состояние контактов на момент захода пользователя */\r\nexport const initContactsData: any = createAction('CHAT/INIT_CONTACTS_DATA')\r\n/** Отправить сообщение в чат канала */\r\nexport const sendChannelMessage: any = createAction('CHAT/SEND_CHANNEL_MESSAGE')\r\n/** Отправить приватное сообщение пользователю */\r\nexport const sendContactMessage: any = createAction('CHAT/SEND_CONTACT_MESSAGE')\r\n","import { bindActionCreators } from 'redux'\nimport { useDispatch } from 'react-redux'\nimport { useMemo } from 'react'\n\nconst useActions = (actions, deps) => {\n  const dispatch = useDispatch()\n\n  return useMemo(\n    () => {\n      if (Array.isArray(actions)) {\n        return actions.map((a) => bindActionCreators(a, dispatch))\n      }\n      return bindActionCreators(actions, dispatch)\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    deps ? [dispatch, ...deps] : [dispatch]\n  )\n}\n\nexport { useActions }\n","import axios, { AxiosRequestConfig, AxiosResponse } from 'axios'\n\nexport interface IServerResponse {\n  type: any\n  message?: string\n  data?: any\n  errors?: string[]\n  token?: string\n}\n\n/** Сообщение при недоступном соединении */\nexport const SERVER_UNAVAILABLE =\n  'Сервер не отвечает или временно недоступен. Попробуйте повторить запрос позднее.'\n\n/** Ключ, по которому в localStorage хранится токен */\nexport const AUTH_TOKEN_STORAGE_KEY = 'auth'\n\n/** Отказ в предоставлении ресурса из-за неверного токена */\nexport const AUTH_REJECTION_MESSAGE =\n  'Войдите или зарегистрируйтесь для просмотра данного содержимого.'\n\nexport const makeError = (error: any): IServerResponse => {\n  const {\n    response: { data, status }\n  } = error\n\n  if (typeof data === 'string' && (status === 502 || status === 500)) {\n    return {\n      type: 'error',\n      message: SERVER_UNAVAILABLE\n    }\n  }\n\n  if (data?.message === 'No authorization token was found') {\n    return {\n      type: 'error',\n      message: AUTH_REJECTION_MESSAGE\n    }\n  }\n\n  return data\n}\n\nconst apiService = {\n  getToken: (): string | null => localStorage.getItem(AUTH_TOKEN_STORAGE_KEY),\n\n  send: async ({\n    method,\n    endpoint,\n    payload = {}\n  }): Promise<IServerResponse> => {\n    try {\n      const response: AxiosResponse = await axios[method](endpoint, payload)\n      return response.data\n    } catch (error) {\n      return makeError(error)\n    }\n  }\n}\n\naxios.interceptors.request.use(\n  (config: AxiosRequestConfig) => {\n    const token = apiService.getToken()\n\n    if (token) {\n      // eslint-disable-next-line no-param-reassign\n      config.headers = {\n        Authorization: `Bearer ${token}`\n      }\n    }\n\n    return config\n  },\n  (error) => makeError(error)\n)\n\nexport { apiService }\n","import { apiService as api, IServerResponse } from './api'\n\ninterface ICreateChannelData {\n  name: string\n  description?: string\n  photo?: string\n  ownerId: number\n}\n\nconst chatService = {\n  /** Создать канал */\n  createChannel: async (\n    payload: ICreateChannelData\n  ): Promise<IServerResponse> =>\n    api.send({\n      method: 'put',\n      endpoint: '/api/v1/chat/channel',\n      payload\n    }),\n\n  /** Получить список каналов пользователя с развернутыми данными */\n  getChannelsList: async (channelsData) => {\n    let channelsList = null\n\n    if (channelsData) {\n      const populatedChannels = await api.send({\n        method: 'post',\n        endpoint: `/api/v1/chat/channels`,\n        payload: { channels: channelsData }\n      })\n\n      channelsList = populatedChannels.data.reduce(\n        (acc, { id, ownerId, name, members, photo }) => ({\n          ...acc,\n          [id]: {\n            ownerId,\n            name,\n            members,\n            type: 'channel',\n            photo,\n            messages: [],\n            populated: false\n          }\n        }),\n        {}\n      )\n    }\n\n    return channelsList\n  },\n\n  /** Получить список контактов пользователя с развернутыми данными */\n  getContactsList: async (contactsData) => {\n    let contactsList = null\n\n    if (contactsData) {\n      const populatedContacts = await api.send({\n        method: 'post',\n        endpoint: `/api/v1/user/contacts`,\n        payload: { contacts: contactsData }\n      })\n\n      contactsList = populatedContacts.data.reduce(\n        (acc, { id, name, email, photo }) => ({\n          ...acc,\n          [id]: {\n            name,\n            email,\n            photo,\n            type: 'contact',\n            messages: []\n          }\n        }),\n        {}\n      )\n    }\n\n    return contactsList\n  },\n\n  /** Получить список каналов и контактов для пользователя */\n  getSubscriptions: async ({ channelsData, contactsData }): Promise<any> => {\n    try {\n      const channels = await chatService.getChannelsList(channelsData)\n      const contacts = await chatService.getContactsList(contactsData)\n\n      return { channels, contacts }\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(error)\n    }\n\n    return null\n  }\n}\n\nexport { chatService }\n","import { io } from 'socket.io-client'\nimport { chatService } from 'services/chat'\nimport { UserDTO } from './user'\n\nconst socketService = {\n  socket: undefined,\n  connect: async (user: UserDTO) => {\n    if (!socketService.socket) {\n      socketService.socket = io('/chat', { autoConnect: false })\n      socketService.socket.auth = { userId: user.id }\n      socketService.socket.connect()\n    }\n\n    return socketService.subscribeToChannels(user)\n  },\n  subscribeToChannels: async (user: UserDTO) => {\n    const { channels, contacts } = await chatService.getSubscriptions({\n      channelsData: user.channels,\n      contactsData: user.contacts\n    })\n\n    if (user.channels) {\n      const channelsList = Object.keys(channels)\n      socketService.socket.emit('channels:subscribe', channelsList)\n    }\n\n    return { channels, contacts }\n  },\n  subscribeToChannel: async (channelId: number) => {\n    socketService.socket.emit('channel:subscribe', channelId)\n  },\n  inviteToChannel: async (userId: number, channelId: number) => {\n    socketService.socket.emit('channel:invite', { userId, channelId })\n  },\n  sendChannelMessage: (payload) => {\n    socketService.socket.emit('channel:message:send', payload)\n  },\n  sendContactMessage: (payload) => {\n    socketService.socket.emit('contact:message:send', payload)\n  },\n  disconnect: () => {\n    socketService.socket.disconnect()\n    socketService.socket = undefined\n  }\n}\n\nexport { socketService }\n","import { FC } from 'react'\nimport { useLocation, useHistory } from 'react-router-dom'\nimport { Menu } from 'antd'\nimport { PieChartOutlined } from '@ant-design/icons'\n\nconst menuItems = [\n  {\n    key: 'login',\n    label: 'Войти',\n    path: '/auth/login',\n    icon: <PieChartOutlined />\n  },\n  {\n    key: 'register',\n    label: 'Регистрация',\n    path: '/auth/register',\n    icon: <PieChartOutlined />\n  }\n]\n\nconst MainMenu: FC = () => {\n  const location = useLocation()\n  const history = useHistory()\n\n  const key = menuItems.find((item) => location.pathname === item.path)?.key\n  if (!key) return null\n\n  const onClickMenu = (item) => {\n    if (item.key === key) return\n    const clicked = menuItems.find((_item) => _item.key === item.key)\n    history.push(clicked.path)\n  }\n\n  return (\n    <Menu mode=\"horizontal\" selectedKeys={[key]} onClick={onClickMenu}>\n      {menuItems.map((item) => (\n        <Menu.Item key={item.key} icon={item.icon}>\n          {item.label}\n        </Menu.Item>\n      ))}\n    </Menu>\n  )\n}\n\nexport { MainMenu }\n","import { createAction } from 'redux-actions'\n\n/** Модальное окно создания канала */\nexport const changeCreateChannelModalState: any = createAction(\n  'MODALS/CHANGE_CREATE_CHANNEL_MODAL_STATE'\n)\n/** Модальное окно профиля пользователя */\nexport const changeUserProfileModalState: any = createAction(\n  'MODALS/CHANGE_USER_PROFILE_MODAL_STATE'\n)\n/** Модальное окно добавления контакта */\nexport const changeAddContactModalState: any = createAction(\n  'MODALS/CHANGE_ADD_CONTACT_MODAL_STATE'\n)\n\n/** Модальное окно информации о контакте */\nexport const changeContactInfoModalState: any = createAction(\n  'MODALS/CHANGE_CONTACT_INFO_MODAL_STATE'\n)\n\n/** Модальное окно информации о канале */\nexport const changeChannelInfoModalState: any = createAction(\n  'MODALS/CHANGE_CHANNEL_INFO_MODAL_STATE'\n)\n","import { createAction } from 'redux-actions'\r\n\r\n/** Записать токен пользователя в стор */\r\nexport const userLoginRequest: any = createAction('AUTH/USER_LOGIN_REQUEST')\r\n\r\n/** Выход пользователя из системы (logout) */\r\nexport const userLogoutRequest: any = createAction('AUTH/USER_LOGOUT_REQUEST')\r\n\r\n/** Записать объект пользователя в стор */\r\nexport const userFetchSuccess: any = createAction('AUTH/USER_FETCH_SUCCESS')\r\n\r\n/** Ошибка получения объекта пользователя */\r\nexport const userFetchFailure: any = createAction('AUTH/USER_FETCH_FAILURE')\r\n\r\n/** Обновление объекта пользователя (фото) */\r\nexport const userUpdatePhoto: any = createAction('AUTH/USER_UPDATE_PHOTO')\r\n\r\n/** Добавление контакта пользователя */\r\nexport const userAddContact: any = createAction('AUTH/USER_ADD_CONTACT')\r\n\r\n/** Удаление контакта пользователя */\r\nexport const userRemoveContact: any = createAction('AUTH/USER_REMOVE_CONTACT')\r\n","import { FC, Component, ReactElement } from 'react'\nimport { Modal } from 'antd'\n\ninterface IModalWindowProps {\n  title?: string\n  visible?: boolean\n  centered?: boolean\n  onOk?: () => any | null\n  onCancel?: () => any | null\n  afterClose?: () => any | null\n  destroyOnClose?: boolean\n  footer?: Component[] | FC[] | ReactElement[] | null\n  style?: object | null\n}\n\nconst ModalWindow: FC<IModalWindowProps> = (props) => {\n  const {\n    children,\n    title = '',\n    visible = false,\n    onOk = null,\n    onCancel = null,\n    afterClose = null,\n    destroyOnClose = true,\n    footer = null,\n    style = null\n  } = props\n\n  return (\n    <Modal\n      centered\n      title={title}\n      visible={visible}\n      onOk={onOk}\n      onCancel={onCancel}\n      afterClose={afterClose}\n      destroyOnClose={destroyOnClose}\n      footer={footer}\n      style={style}\n    >\n      {children}\n    </Modal>\n  )\n}\n\nexport { ModalWindow }\n","import { apiService as api, IServerResponse } from './api'\n\nexport interface UserDTO {\n  id: number\n  name: string\n  email: string\n  photo: string\n  role: string\n  channels: string\n  contacts: string\n}\n\nexport interface ChangePhotoRequestDTO {\n  id: number // userId\n  photo: string\n}\n\nexport interface IAddContactRequestDTO {\n  from: number // user.id who adding contact\n  email: string\n}\n\ninterface IUsersListData {\n  members: string\n}\n\ninterface IRemoveContactData {\n  userId: number\n  contactId: number\n}\n\nconst userService = {\n  /** Изменить или удалить фото пользователя */\n  changePhoto: async (\n    payload: ChangePhotoRequestDTO\n  ): Promise<IServerResponse> =>\n    api.send({\n      method: 'patch',\n      endpoint: '/api/v1/user/photo',\n      payload\n    }),\n\n  /** Добавить новый контакт */\n  addContact: async (\n    payload: IAddContactRequestDTO\n  ): Promise<IServerResponse> =>\n    api.send({\n      method: 'patch',\n      endpoint: '/api/v1/user/contacts',\n      payload\n    }),\n\n  /** Удалить контакт */\n  removeContact: async (\n    payload: IRemoveContactData\n  ): Promise<IServerResponse> => {\n    const { userId, contactId } = payload\n    return api.send({\n      method: 'delete',\n      endpoint: `/api/v1/user/${userId}/contact/${contactId}`\n    })\n  },\n\n  /** Получить информацию о нескольких пользователях */\n  getUsersList: async (payload: IUsersListData): Promise<IServerResponse> =>\n    api.send({\n      method: 'post',\n      endpoint: '/api/v1/user/list',\n      payload\n    })\n}\n\nexport { userService }\n","import { FC, useState } from 'react'\nimport { message, Upload } from 'antd'\nimport ImgCrop from 'antd-img-crop'\n\ninterface IPhotoUploaderProps {\n  /** base64 photo url */\n  preloadedPhoto?: string | null\n  onChangePhoto?: (imageUrl: string) => void\n  onRemovePhoto?: () => void\n}\n\nconst beforeUpload = (file) => {\n  const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png'\n  if (!isJpgOrPng) {\n    message.error('Допустимые форматы файлов: JPG или PNG!')\n  }\n  const isLt2M = file.size / 1024 / 1024 < 2\n  if (!isLt2M) {\n    message.error('Размер изображения не должен превышать 2Мб!')\n  }\n  return isJpgOrPng && isLt2M\n}\n\nconst getBase64 = async (file): Promise<string> => {\n  let src = file.url\n  const resizeWidth = 300\n\n  if (!src) {\n    src = await new Promise((resolve) => {\n      const reader = new FileReader()\n      reader.readAsDataURL(file.originFileObj)\n      reader.onload = (event) => {\n        const img = new Image()\n        img.src = event.target.result as string\n        img.onload = (el: any) => {\n          const elem = document.createElement('canvas')\n          const scaleFactor = resizeWidth / el.target.width\n          elem.width = resizeWidth\n          elem.height = el.target.height * scaleFactor\n          const ctx = elem.getContext('2d')\n          ctx.drawImage(el.target, 0, 0, elem.width, elem.height)\n          const srcEncoded = ctx.canvas.toDataURL('image/jpeg', 0.3)\n          resolve(srcEncoded)\n        }\n      }\n    })\n  }\n  return src\n}\n\nconst onPreview = async (file) => {\n  const src = await getBase64(file)\n  const image = new Image()\n  image.src = src\n  const imgWindow = window.open(src)\n  imgWindow.document.write(image.outerHTML)\n}\n\nconst PhotoUploader: FC<IPhotoUploaderProps> = (props) => {\n  const { preloadedPhoto, onChangePhoto, onRemovePhoto } = props\n  const initialPhoto = preloadedPhoto ? [{ url: preloadedPhoto }] : []\n  const [fileList, setFileList] = useState(initialPhoto)\n\n  const customRequest = (options) => {\n    const { onSuccess, file } = options\n    onSuccess(null, file)\n  }\n\n  const onChange = async ({ fileList: newFileList }) => {\n    const file = newFileList[0]\n    if (file?.status === 'done') {\n      const imageUrl = await getBase64(file)\n      onChangePhoto(imageUrl)\n    }\n\n    if (!file) {\n      onRemovePhoto()\n    }\n\n    setFileList(newFileList)\n  }\n\n  return (\n    <div className=\"photo-uploader\">\n      <ImgCrop\n        rotate\n        shape=\"round\"\n        modalTitle=\"Редактировать изображение\"\n        modalOk=\"Применить\"\n        modalCancel=\"Отмена\"\n      >\n        <Upload\n          listType=\"picture-card\"\n          fileList={fileList as any}\n          onChange={onChange}\n          beforeUpload={beforeUpload}\n          onPreview={onPreview}\n          customRequest={customRequest}\n        >\n          {!fileList.length && 'Выбрать фото'}\n        </Upload>\n      </ImgCrop>\n    </div>\n  )\n}\n\nexport { PhotoUploader }\n","import { FC, useState } from 'react'\nimport { Button, Spin, message } from 'antd'\nimport { LoadingOutlined } from '@ant-design/icons'\nimport { ModalWindow } from 'containers/ModalWindow'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport { userService, UserDTO } from 'services/user'\nimport { PhotoUploader } from 'components/PhotoUploader'\nimport { useActions } from 'hooks/useActions'\nimport { changeUserProfileModalState } from 'modules/Modals/actions'\nimport { userUpdatePhoto } from 'modules/Auth/actions'\n\ninterface IUserProfileProps {}\n\nconst UserProfile: FC<IUserProfileProps> = () => {\n  const [loading, setLoading] = useState(false)\n  const [photo, setPhoto] = useState('')\n  const { id, name, email, photo: preloadedPhoto } = useShallowEqualSelector(\n    (state) => state.auth.user\n  ) as UserDTO\n  const userProfile = useShallowEqualSelector(\n    (state) => state.modals.userProfile\n  ) as any\n\n  const [\n    dispatchUserUpdatePhoto,\n    dispatchChangeUserProfileModalState\n  ] = useActions([userUpdatePhoto, changeUserProfileModalState], null)\n\n  const onSaveChanges = async () => {\n    if (photo === '') {\n      dispatchChangeUserProfileModalState(false)\n      return\n    }\n\n    try {\n      setLoading(true)\n\n      const { type, message: serverMessage } = await userService.changePhoto({\n        id,\n        photo\n      })\n\n      if (serverMessage) {\n        if (type === 'error') {\n          setLoading(false)\n          return\n        }\n      }\n\n      setLoading(false)\n      dispatchUserUpdatePhoto(photo)\n      dispatchChangeUserProfileModalState(false)\n    } catch (error) {\n      setLoading(false)\n      message.error(error.message)\n    }\n  }\n\n  return (\n    <ModalWindow\n      title=\"Профиль\"\n      visible={userProfile}\n      onCancel={() => dispatchChangeUserProfileModalState(false)}\n      onOk={() => dispatchChangeUserProfileModalState(false)}\n    >\n      <PhotoUploader\n        preloadedPhoto={preloadedPhoto}\n        onChangePhoto={(imageUrl) => setPhoto(imageUrl)}\n        onRemovePhoto={() => setPhoto(null)}\n      />\n      <p>Имя: {name}</p>\n      <p>Email: {email}</p>\n\n      <div className=\"form-footer\">\n        {loading && (\n          <Spin\n            className=\"center\"\n            indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n            delay={500}\n          />\n        )}\n        <Button\n          key=\"back\"\n          onClick={() => dispatchChangeUserProfileModalState(false)}\n          disabled={loading}\n        >\n          Отмена\n        </Button>\n        <Button type=\"primary\" disabled={loading} onClick={onSaveChanges}>\n          Сохранить\n        </Button>\n      </div>\n    </ModalWindow>\n  )\n}\n\nexport { UserProfile }\n","import { FC } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { Menu, Dropdown, Avatar } from 'antd'\nimport {\n  UserOutlined,\n  LogoutOutlined,\n  ProfileOutlined\n} from '@ant-design/icons'\nimport { useActions } from 'hooks/useActions'\nimport { changeUserProfileModalState } from 'modules/Modals/actions'\n\nimport { userLogoutRequest } from 'modules/Auth/actions'\nimport { UserDTO } from 'services/user'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport { UserProfile } from 'components/Modals/UserProfile'\n\nconst UserMenu: FC = () => {\n  const history = useHistory()\n\n  const { photo } = useShallowEqualSelector(\n    (state) => state.auth.user\n  ) as UserDTO\n\n  const [\n    dispatchUserLogoutRequest,\n    dispatchChangeUserProfileModalState\n  ] = useActions([userLogoutRequest, changeUserProfileModalState], null)\n\n  const handleMenuClick = (event) => {\n    const { key } = event\n\n    switch (key) {\n      case 'profile':\n        dispatchChangeUserProfileModalState(true)\n        break\n      case 'logout':\n        dispatchUserLogoutRequest()\n        history.push('/auth/login')\n        break\n      default:\n        break\n    }\n  }\n\n  const menu = (\n    <Menu onClick={handleMenuClick}>\n      <Menu.Item key=\"profile\" icon={<ProfileOutlined />}>\n        Профиль\n      </Menu.Item>\n      <Menu.Divider />\n      <Menu.Item key=\"logout\" icon={<LogoutOutlined />}>\n        Выход\n      </Menu.Item>\n    </Menu>\n  )\n\n  return (\n    <>\n      <Dropdown overlay={menu} trigger={['click']}>\n        <Avatar\n          size={40}\n          className=\"user-profile\"\n          src={photo}\n          icon={<UserOutlined />}\n        />\n      </Dropdown>\n      <UserProfile />\n    </>\n  )\n}\n\nexport { UserMenu }\n","import { FC, useState } from 'react'\nimport {\n  Button,\n  message,\n  Avatar,\n  Typography,\n  Row,\n  Col,\n  Divider,\n  Spin\n} from 'antd'\nimport { LoadingOutlined } from '@ant-design/icons'\nimport { ModalWindow } from 'containers/ModalWindow'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport { UserDTO, userService } from 'services/user'\nimport { useActions } from 'hooks/useActions'\nimport { changeContactInfoModalState } from 'modules/Modals/actions'\nimport { IActiveChannel } from 'modules/Chat/reducer'\nimport { removeContact, setActiveChannel } from 'modules/Chat/actions'\nimport { userRemoveContact } from 'modules/Auth/actions'\n\nconst { Title, Paragraph } = Typography\n\ninterface IContactInfoProps {\n  activeContact: IActiveChannel\n}\n\nconst ContactInfo: FC<IContactInfoProps> = (props) => {\n  const { activeContact } = props\n  const [loading, setLoading] = useState(false)\n\n  const [\n    dispatchChangeContactInfoModalState,\n    dispatchRemoveContact,\n    dispatchUserRemoveContact,\n    dispatchActiveChannel\n  ] = useActions(\n    [\n      changeContactInfoModalState,\n      removeContact,\n      userRemoveContact,\n      setActiveChannel\n    ],\n    null\n  )\n\n  const user = useShallowEqualSelector((state) => state.auth.user) as UserDTO\n\n  const contacts = useShallowEqualSelector(\n    (state) => state.chat.contacts\n  ) as UserDTO\n\n  const contactInfo = useShallowEqualSelector(\n    (state) => state.modals.contactInfo\n  ) as any\n\n  const contact = activeContact && contacts && contacts[activeContact.id]\n\n  if (!contact) return null\n\n  const { name, email, photo } = contact as UserDTO\n\n  const removeContactHandler = async () => {\n    try {\n      setLoading(true)\n\n      const { type, message: serverMessage } = await userService.removeContact({\n        userId: user.id,\n        contactId: activeContact.id\n      })\n\n      if (serverMessage) {\n        if (type === 'success') {\n          message.success(serverMessage)\n        }\n        if (type === 'error') {\n          message.error(serverMessage)\n          setLoading(false)\n          return\n        }\n      }\n\n      dispatchRemoveContact(activeContact.id)\n      dispatchUserRemoveContact(activeContact.id)\n      dispatchActiveChannel(null)\n      dispatchChangeContactInfoModalState(false)\n\n      setLoading(false)\n    } catch (error) {\n      message.error(error.message)\n    }\n  }\n\n  return (\n    <ModalWindow\n      title=\"Информация\"\n      visible={contactInfo}\n      onCancel={() => dispatchChangeContactInfoModalState(false)}\n      onOk={() => dispatchChangeContactInfoModalState(false)}\n    >\n      <Row align=\"middle\">\n        <Col flex=\"150px\">\n          <Avatar size={128} src={photo} />\n        </Col>\n        <Col flex=\"auto\">\n          <Title level={4}>{name}</Title>\n          <Paragraph>ID: {activeContact.id}</Paragraph>\n          <Paragraph>Email: {email}</Paragraph>\n        </Col>\n      </Row>\n      <Divider />\n      <div className=\"form-footer\">\n        {loading && (\n          <Spin\n            className=\"center\"\n            indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n            delay={500}\n          />\n        )}\n        <Button\n          block\n          danger\n          type=\"default\"\n          onClick={removeContactHandler}\n          disabled={loading}\n        >\n          Удалить контакт\n        </Button>\n      </div>\n    </ModalWindow>\n  )\n}\n\nexport { ContactInfo }\n","import { FC, useEffect } from 'react'\nimport { Button, message, Avatar, Typography, Row, Col, Divider } from 'antd'\nimport { ModalWindow } from 'containers/ModalWindow'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport { userService, UserDTO } from 'services/user'\nimport { useActions } from 'hooks/useActions'\nimport { changeChannelInfoModalState } from 'modules/Modals/actions'\nimport { IActiveChannel } from 'modules/Chat/reducer'\nimport { populateChannel } from 'modules/Chat/actions'\n\nconst { Title, Paragraph } = Typography\n\ninterface IChannelInfoProps {\n  activeChannel: IActiveChannel\n}\n\nconst ChannelInfo: FC<IChannelInfoProps> = (props) => {\n  const { activeChannel } = props\n\n  const [\n    dispatchChangeChannelInfoModalState,\n    disaptchPopulateChannel\n  ] = useActions([changeChannelInfoModalState, populateChannel], null)\n\n  const channels = useShallowEqualSelector(\n    (state) => state.chat.channels\n  ) as UserDTO\n\n  const channelInfo = useShallowEqualSelector(\n    (state) => state.modals.channelInfo\n  ) as any\n\n  const channel = activeChannel && channels[activeChannel.id]\n\n  useEffect(() => {\n    if (!channel || channel.populated) return\n\n    const getChannelData = async () => {\n      const { members, ownerId } = channel\n      const { data } = await userService.getUsersList({ members })\n      const owner = data.find((member) => member.id === ownerId)\n      disaptchPopulateChannel({ id: activeChannel?.id, members: data, owner })\n    }\n\n    getChannelData()\n  }, [channel, disaptchPopulateChannel, activeChannel?.id])\n\n  if (!channel) return null\n\n  const { name, members, photo } = channel\n\n  const leaveChannel = async () => {\n    try {\n      dispatchChangeChannelInfoModalState(false)\n    } catch (error) {\n      message.error(error.message)\n    }\n  }\n\n  return (\n    <ModalWindow\n      title=\"Информация о канале\"\n      visible={channelInfo}\n      onCancel={() => dispatchChangeChannelInfoModalState(false)}\n      onOk={() => dispatchChangeChannelInfoModalState(false)}\n    >\n      <Row align=\"middle\">\n        <Col flex=\"150px\">\n          <Avatar size={128} src={photo} />\n        </Col>\n        <Col flex=\"auto\">\n          <Title level={4}>{name}</Title>\n          <Paragraph>Участников: {members.length}</Paragraph>\n          <Paragraph>Владелец: {channel.owner?.name}</Paragraph>\n        </Col>\n      </Row>\n      <Divider />\n      <div className=\"form-footer\">\n        <Button block danger type=\"default\" onClick={leaveChannel}>\n          Покинуть канал\n        </Button>\n      </div>\n    </ModalWindow>\n  )\n}\n\nexport { ChannelInfo }\n","import { FC, KeyboardEvent, useRef } from 'react'\nimport { Layout, Typography } from 'antd'\nimport { MenuUnfoldOutlined, MenuFoldOutlined } from '@ant-design/icons'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport { MainMenu } from 'components/MainMenu'\nimport { UserMenu } from 'components/UserMenu'\nimport { PrivateContainer } from 'containers/Private'\nimport { UserDTO } from 'services/user'\nimport { ContactInfo } from 'components/Modals/ContactInfo'\nimport { ChannelInfo } from 'components/Modals/ChannelInfo'\nimport { useActions } from 'hooks/useActions'\nimport {\n  changeContactInfoModalState,\n  changeChannelInfoModalState\n} from 'modules/Modals/actions'\n\nconst { Text } = Typography\n\ninterface IHeaderProps {\n  sidebarCollapsed: boolean\n  onSidebarToggle: (isCollapsed: boolean) => void\n}\n\nconst { Header: AntHeader } = Layout\n\nconst Header: FC<IHeaderProps> = (props: IHeaderProps) => {\n  const user = useShallowEqualSelector((state) => state.auth.user) as UserDTO\n\n  const [\n    dispatchChangeContactInfoModalState,\n    dispatchChangeChannelInfoModalState\n  ] = useActions(\n    [changeContactInfoModalState, changeChannelInfoModalState],\n    null\n  )\n\n  const chatInfoRef = useRef(null)\n  const activeChannel = useShallowEqualSelector(\n    (state) => state.chat.activeChannel\n  ) as any\n\n  const { onSidebarToggle, sidebarCollapsed } = props\n\n  const onTriggerClick = () => {\n    onSidebarToggle(!sidebarCollapsed)\n  }\n\n  const menuTrigger = sidebarCollapsed ? (\n    <MenuUnfoldOutlined\n      style={{ fontSize: '20px', padding: '22px' }}\n      className=\"trigger\"\n      onClick={onTriggerClick}\n      label=\"Свернуть\"\n    />\n  ) : (\n    <MenuFoldOutlined\n      style={{ fontSize: '20px', padding: '22px' }}\n      className=\"trigger\"\n      onClick={onTriggerClick}\n    />\n  )\n\n  const openActiveChatInfo = () => {\n    if (activeChannel?.type === 'contact') {\n      dispatchChangeContactInfoModalState(true)\n    }\n    if (activeChannel?.type === 'channel') {\n      dispatchChangeChannelInfoModalState(true)\n    }\n  }\n\n  const onKeyDownHandler = (event: KeyboardEvent<HTMLDivElement>) => {\n    if (event.key === 'Enter') {\n      chatInfoRef.current.focus()\n    }\n  }\n\n  const activeChat = activeChannel && (\n    <div\n      className=\"active-channel\"\n      onClick={openActiveChatInfo}\n      onKeyDown={onKeyDownHandler}\n      ref={chatInfoRef}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <Text className=\"active-channel-text\">{activeChannel.name}</Text>\n      {activeChannel.type === 'channel' ? (\n        <Text className=\"active-channel-text\" type=\"secondary\">\n          5 участников\n        </Text>\n      ) : (\n        <Text className=\"active-channel-text\" type=\"secondary\">\n          был(а) 1 час назад\n        </Text>\n      )}\n    </div>\n  )\n\n  return (\n    <AntHeader className=\"header background-white\">\n      <PrivateContainer>\n        {menuTrigger}\n        {activeChat}\n        <ContactInfo activeContact={activeChannel} />\n        <ChannelInfo activeChannel={activeChannel} />\n      </PrivateContainer>\n\n      <div className=\"header-menu\">\n        <MainMenu />\n        <PrivateContainer>\n          <span className=\"header-username\">{user?.name}</span>\n          <UserMenu />\n        </PrivateContainer>\n      </div>\n    </AntHeader>\n  )\n}\n\nexport { Header }\n","import { FC } from 'react'\nimport { Scrollbars } from 'react-custom-scrollbars'\n\nconst renderTrackVertical = ({ style, ...ownProps }) => (\n  <div\n    {...ownProps}\n    className=\"scrollTrackVertical\"\n    style={{\n      ...style,\n      backgroundColor: '#E5E5E5',\n      right: '2px',\n      bottom: '2px',\n      top: '2px',\n      borderRadius: '3px'\n    }}\n  />\n)\n\nconst renderThumbVertical = ({ style, ...ownProps }) => (\n  <div\n    {...ownProps}\n    className=\"scrollThumbVertical\"\n    style={{\n      ...style,\n      borderRadius: '4px',\n      boxShadow: '0 2px 4px 0 rgba(0, 0, 0, 0.16)',\n      backgroundColor: '#9A9A9A'\n    }}\n  />\n)\n\ninterface IScrollbarProps {\n  style?: { [key: string]: string | number }\n}\n\nconst Scrollbar: FC<IScrollbarProps> = (props) => {\n  const { children, style } = props\n  return (\n    <Scrollbars\n      style={style}\n      hideTracksWhenNotNeeded\n      autoHide\n      autoHideTimeout={400}\n      renderTrackVertical={renderTrackVertical}\n      renderThumbVertical={renderThumbVertical}\n    >\n      {children}\n    </Scrollbars>\n  )\n}\n\nexport { Scrollbar }\n","import { FC, useState } from 'react'\nimport { Form, Input, message, Button, Spin } from 'antd'\nimport { LoadingOutlined } from '@ant-design/icons'\nimport { ModalWindow } from 'containers/ModalWindow'\nimport { PhotoUploader } from 'components/PhotoUploader'\nimport { UserDTO } from 'services/user'\nimport { useActions } from 'hooks/useActions'\nimport { setActiveChannel, addChannel } from 'modules/Chat/actions'\nimport { changeCreateChannelModalState } from 'modules/Modals/actions'\nimport { chatService } from 'services/chat'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport { socketService } from 'services/socket'\n\ninterface IFormValues {\n  name: string\n  description?: string\n  photo?: string\n}\n\ninterface ICreateChannelProps {}\n\nconst CreateChannel: FC<ICreateChannelProps> = () => {\n  const createChannel = useShallowEqualSelector(\n    (state) => state.modals.createChannel\n  ) as any\n  const user = useShallowEqualSelector((state) => state.auth.user) as UserDTO\n  const [form] = Form.useForm()\n  const [loading, setLoading] = useState(false)\n  const [photo, setPhoto] = useState(null)\n  const [\n    dispatchActiveChannel,\n    dispatchAddChannel,\n    dispatchChangeCreateChannelModalState\n  ] = useActions(\n    [setActiveChannel, addChannel, changeCreateChannelModalState],\n    null\n  )\n\n  const onFinish = async (values: IFormValues) => {\n    try {\n      const { name, description } = values\n      setLoading(true)\n\n      const {\n        type,\n        message: serverMessage,\n        data\n      } = await chatService.createChannel({\n        name,\n        description,\n        photo,\n        ownerId: user.id\n      })\n\n      if (serverMessage) {\n        if (type === 'success') {\n          message.success(serverMessage)\n        }\n        if (type === 'error') {\n          message.error(serverMessage)\n          setLoading(false)\n          return\n        }\n      }\n\n      const activeChannelPayload = { id: data.channelId, name, type: 'channel' }\n\n      dispatchAddChannel({\n        ...activeChannelPayload,\n        ownerId: user.id,\n        photo,\n        members: [user.id]\n      })\n      dispatchActiveChannel(activeChannelPayload)\n      socketService.subscribeToChannel(data.channelId)\n\n      setLoading(false)\n      dispatchChangeCreateChannelModalState(false)\n    } catch (error) {\n      setLoading(false)\n      message.error(error.message)\n    }\n  }\n\n  const resetForm = () => dispatchChangeCreateChannelModalState(false)\n\n  return (\n    <ModalWindow\n      title=\"Создать канал\"\n      visible={createChannel}\n      onCancel={() => dispatchChangeCreateChannelModalState(false)}\n    >\n      <PhotoUploader onChangePhoto={(imageUrl) => setPhoto(imageUrl)} />\n      <Form\n        form={form}\n        name=\"createChannel\"\n        className=\"create-channel-form\"\n        layout=\"vertical\"\n        onFinish={onFinish}\n      >\n        <Form.Item\n          name=\"name\"\n          rules={[\n            { required: true, message: 'Введите название канала' },\n            { max: 20, message: 'Не более 20 символов' }\n          ]}\n        >\n          <Input placeholder=\"Название канала\" />\n        </Form.Item>\n        <Form.Item\n          name=\"description\"\n          rules={[{ max: 50, message: 'Не более 50 символов' }]}\n        >\n          <Input placeholder=\"Описание (не обязательно)\" type=\"textarea\" />\n        </Form.Item>\n        <div className=\"form-footer\">\n          {loading && (\n            <Spin\n              className=\"center\"\n              indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n              delay={500}\n            />\n          )}\n          <Button key=\"back\" onClick={resetForm} disabled={loading}>\n            Отмена\n          </Button>\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            htmlType=\"submit\"\n            disabled={loading}\n          >\n            Создать\n          </Button>\n        </div>\n      </Form>\n    </ModalWindow>\n  )\n}\n\nexport { CreateChannel }\n","import { FC, useState } from 'react'\nimport { Form, Input, message, Button, Spin, Typography } from 'antd'\nimport { LoadingOutlined, MailOutlined } from '@ant-design/icons'\nimport { ModalWindow } from 'containers/ModalWindow'\nimport { userService, UserDTO } from 'services/user'\nimport { useActions } from 'hooks/useActions'\nimport { addContact, setActiveChannel } from 'modules/Chat/actions'\nimport { userAddContact } from 'modules/Auth/actions'\nimport { changeAddContactModalState } from 'modules/Modals/actions'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\n\nconst { Text } = Typography\n\ninterface IFormValues {\n  email: string\n}\n\ninterface IAddContactProps {}\n\nconst AddContact: FC<IAddContactProps> = () => {\n  const addContactModalState = useShallowEqualSelector(\n    (state) => state.modals.addContact\n  ) as any\n  const user = useShallowEqualSelector((state) => state.auth.user) as UserDTO\n  const [form] = Form.useForm()\n  const [loading, setLoading] = useState(false)\n  const [\n    dispatchChangeAddContactModalState,\n    dispatchAddContact,\n    dispatchUserAddContact,\n    dispatchActiveChannel\n  ] = useActions(\n    [changeAddContactModalState, addContact, userAddContact, setActiveChannel],\n    null\n  )\n\n  const onFinish = async (values: IFormValues) => {\n    try {\n      const { email } = values\n      setLoading(true)\n\n      const {\n        type,\n        message: serverMessage,\n        data\n      } = await userService.addContact({\n        from: user.id,\n        email\n      })\n\n      if (serverMessage) {\n        if (type === 'success') {\n          message.success(serverMessage)\n        }\n        if (type === 'error') {\n          message.error(serverMessage)\n          setLoading(false)\n          return\n        }\n      }\n\n      form.resetFields()\n\n      dispatchAddContact({ ...data, type: 'contact', messages: [] })\n      dispatchUserAddContact(data.id)\n      dispatchActiveChannel({ id: data.id, name: data.name, type: 'contact' })\n      dispatchChangeAddContactModalState(false)\n\n      setLoading(false)\n    } catch (error) {\n      setLoading(false)\n      message.error(error.message)\n    }\n  }\n\n  return (\n    <ModalWindow\n      title=\"Добавить контакт\"\n      visible={addContactModalState}\n      onCancel={() => dispatchChangeAddContactModalState(false)}\n    >\n      <Text>Введите Email контакта, которого Вы хотели добавить</Text>\n      <Form\n        form={form}\n        name=\"addContact\"\n        className=\"add-contact-form\"\n        layout=\"vertical\"\n        onFinish={onFinish}\n      >\n        <Form.Item\n          name=\"email\"\n          rules={[\n            {\n              required: true,\n              type: 'email',\n              min: 4,\n              message: 'Некорректный email'\n            }\n          ]}\n        >\n          <Input prefix={<MailOutlined />} placeholder=\"Email\" size=\"large\" />\n        </Form.Item>\n\n        <div className=\"form-footer\">\n          {loading && (\n            <Spin\n              className=\"center\"\n              indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n              delay={500}\n            />\n          )}\n          <Button\n            key=\"back\"\n            onClick={() => dispatchChangeAddContactModalState(false)}\n            disabled={loading}\n          >\n            Отмена\n          </Button>\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            htmlType=\"submit\"\n            disabled={loading}\n          >\n            Добавить\n          </Button>\n        </div>\n      </Form>\n    </ModalWindow>\n  )\n}\n\nexport { AddContact }\n","import { FC } from 'react'\nimport { Menu, Dropdown } from 'antd'\nimport {\n  MenuOutlined,\n  UserAddOutlined,\n  UsergroupAddOutlined,\n  ContactsOutlined,\n  SettingOutlined\n} from '@ant-design/icons'\nimport { useActions } from 'hooks/useActions'\nimport {\n  changeCreateChannelModalState,\n  changeAddContactModalState\n} from 'modules/Modals/actions'\nimport { CreateChannel } from 'components/Modals/CreateChannel'\nimport { AddContact } from 'components/Modals/AddContact'\n\nexport interface ISidebarMenuProps {}\n\nconst SidebarMenu: FC<ISidebarMenuProps> = () => {\n  const [\n    dispatchChangeCreateChannelModalState,\n    dispatchChangeAddContactModalState\n  ] = useActions(\n    [changeCreateChannelModalState, changeAddContactModalState],\n    null\n  )\n\n  const handleMenuClick = (event) => {\n    const { key } = event\n\n    switch (key) {\n      case 'createChannel':\n        dispatchChangeCreateChannelModalState(true)\n        break\n      case 'addContact':\n        dispatchChangeAddContactModalState(true)\n        break\n      default:\n        break\n    }\n  }\n\n  const menu = (\n    <Menu onClick={handleMenuClick}>\n      <Menu.Item key=\"createChannel\" icon={<UsergroupAddOutlined />}>\n        Создать канал\n      </Menu.Item>\n      <Menu.Item key=\"addContact\" icon={<UserAddOutlined />}>\n        Добавить контакт\n      </Menu.Item>\n      <Menu.Divider />\n      <Menu.Item key=\"contacts\" icon={<ContactsOutlined />}>\n        Контакты\n      </Menu.Item>\n      <Menu.Item key=\"settings\" icon={<SettingOutlined />}>\n        Настройки\n      </Menu.Item>\n    </Menu>\n  )\n\n  return (\n    <>\n      <Dropdown overlay={menu} trigger={['click']}>\n        <MenuOutlined className=\"sidebar-icon\" />\n      </Dropdown>\n      <CreateChannel />\n      <AddContact />\n    </>\n  )\n}\n\nexport { SidebarMenu }\n","import { FC, useState } from 'react'\nimport { Layout, Menu, Avatar } from 'antd'\nimport {\n  LockOutlined,\n  UnlockOutlined,\n  MessageFilled,\n  PlusCircleOutlined\n} from '@ant-design/icons'\nimport { useEscape } from 'hooks/useEscape'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport { setActiveChannel } from 'modules/Chat/actions'\nimport { useActions } from 'hooks/useActions'\nimport { IChannelData, IContactData } from 'components/Chat/Messages'\nimport {\n  changeCreateChannelModalState,\n  changeAddContactModalState\n} from 'modules/Modals/actions'\nimport { Scrollbar } from 'containers/Scrollbar'\nimport { SidebarMenu } from './SidebarMenu'\n\nconst { Sider } = Layout\n\ninterface ISidebarProps {\n  sidebarCollapsed: boolean\n  onSidebarToggle: (isCollapsed: boolean) => void\n}\n\nconst Sidebar: FC<ISidebarProps> = (props: ISidebarProps) => {\n  const [sidebarLocked, setSidebarLocked] = useState(true)\n  const { sidebarCollapsed, onSidebarToggle } = props\n  const [\n    dispatchActiveChannel,\n    dispatchChangeCreateChannelModalState,\n    dispatchChangeAddContactModalState\n  ] = useActions(\n    [\n      setActiveChannel,\n      changeCreateChannelModalState,\n      changeAddContactModalState\n    ],\n    null\n  )\n  const chat = useShallowEqualSelector((state) => state.chat) as any\n  const { activeChannel, channels, contacts } = chat\n\n  useEscape(() => {\n    if (!activeChannel) return\n    dispatchActiveChannel(null)\n  })\n\n  const onClickMenu = ({ key }) => {\n    if (activeChannel) {\n      const { id, type } = activeChannel\n      if (key === `${type}-${id}`) return\n    }\n\n    const [channelType, channelId] = key.split('-')\n    const place = channelType === 'channel' ? channels : contacts\n    const { name, type } = place[channelId]\n\n    const intChannelId = parseInt(channelId, 10)\n    dispatchActiveChannel({ id: intChannelId, name, type })\n\n    if (!sidebarLocked) {\n      onSidebarToggle(true)\n    }\n  }\n\n  const selectedMenuKey = activeChannel\n    ? [`${activeChannel.type}-${activeChannel.id}`]\n    : []\n\n  return (\n    <>\n      <Sider\n        trigger={null}\n        collapsed={sidebarCollapsed}\n        collapsedWidth={0}\n        className=\"sider\"\n        theme=\"dark\"\n        width=\"230\"\n        style={{\n          overflow: 'auto',\n          height: '100vh'\n        }}\n      >\n        <div className=\"sidebar-top\">\n          <SidebarMenu />\n          {sidebarLocked ? (\n            <LockOutlined\n              title=\"Отмена фиксации\"\n              className=\"sidebar-icon\"\n              onClick={() => setSidebarLocked(false)}\n            />\n          ) : (\n            <UnlockOutlined\n              title=\"Фиксировать меню\"\n              className=\"sidebar-icon\"\n              onClick={() => setSidebarLocked(true)}\n            />\n          )}\n        </div>\n\n        <div className=\"channels-menu\">\n          <div className=\"sidebar-top\">\n            <span className=\"channels-menu-title\">Каналы</span>\n            <PlusCircleOutlined\n              className=\"sidebar-icon\"\n              title=\"Создать канал\"\n              onClick={() => dispatchChangeCreateChannelModalState(true)}\n            />\n          </div>\n\n          {(channels && (\n            <Scrollbar style={{ height: 'calc(50vh - 100px)' }}>\n              <Menu\n                theme=\"dark\"\n                mode=\"inline\"\n                selectedKeys={selectedMenuKey}\n                onClick={onClickMenu}\n              >\n                {Object.entries(channels as IChannelData[]).map(\n                  ([channelId, channel]) => (\n                    <Menu.Item\n                      className=\"channels-menu-item\"\n                      style={{ height: '50px' }}\n                      key={`${channel.type}-${channelId}`}\n                    >\n                      {channel.photo ? (\n                        <Avatar\n                          size={40}\n                          className=\"channel-photo\"\n                          src={channel.photo}\n                        />\n                      ) : (\n                        <Avatar\n                          size={40}\n                          className=\"channel-photo\"\n                          icon={<MessageFilled style={{ color: '#fefefe' }} />}\n                        />\n                      )}\n\n                      <span className=\"channel-name\">{channel.name}</span>\n                    </Menu.Item>\n                  )\n                )}\n              </Menu>\n            </Scrollbar>\n          )) || <p className=\"nocontent\">нет каналов</p>}\n        </div>\n\n        <div className=\"contacts-menu\">\n          <div className=\"sidebar-top\">\n            <span className=\"contacts-menu-title\">Контакты</span>\n            <PlusCircleOutlined\n              className=\"sidebar-icon\"\n              title=\"Добавить контакт\"\n              onClick={() => dispatchChangeAddContactModalState(true)}\n            />\n          </div>\n          {(contacts && (\n            <Scrollbar style={{ height: 'calc(50vh - 100px)' }}>\n              <Menu\n                theme=\"dark\"\n                mode=\"inline\"\n                selectedKeys={selectedMenuKey}\n                onClick={onClickMenu}\n              >\n                {Object.entries(contacts as IContactData[]).map(\n                  ([contactId, contact]) => (\n                    <Menu.Item\n                      className=\"contacts-menu-item\"\n                      style={{ height: '50px' }}\n                      key={`${contact.type}-${contactId}`}\n                    >\n                      <Avatar\n                        size={40}\n                        className=\"contact-photo\"\n                        src={\n                          contact.photo ? (\n                            contact.photo\n                          ) : (\n                            <MessageFilled style={{ color: '#fefefe' }} />\n                          )\n                        }\n                      />\n                      <span className=\"channel-name\">{contact.name}</span>\n                    </Menu.Item>\n                  )\n                )}\n              </Menu>\n            </Scrollbar>\n          )) || <p className=\"nocontent\">нет контактов</p>}\n        </div>\n      </Sider>\n    </>\n  )\n}\n\nexport { Sidebar }\n","import { useEffect } from 'react'\n\nconst useEscape = (onEscape: () => any) => {\n  useEffect(() => {\n    const handleEsc = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') onEscape()\n    }\n    window.addEventListener('keydown', handleEsc)\n\n    return () => {\n      window.removeEventListener('keydown', handleEsc)\n    }\n  }, [onEscape])\n}\n\nexport { useEscape }\n","import { FC } from 'react'\r\nimport { Route, Redirect, RouteProps } from 'react-router-dom'\r\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\r\nimport { IRootState } from 'modules'\r\n\r\ninterface IPrivateRouteProps extends RouteProps {\r\n  component?: any\r\n  children?: any\r\n}\r\n\r\nconst PrivateRoute: FC<IPrivateRouteProps> = ({\r\n  component: Component,\r\n  children,\r\n  ...rest\r\n}) => {\r\n  const user = useShallowEqualSelector((state: IRootState) => state.auth.user)\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(routeProps) => {\r\n        if (user === null) return null\r\n\r\n        if (user === false) {\r\n          return (\r\n            <Redirect\r\n              to={{\r\n                pathname: '/auth/login',\r\n                state: { from: routeProps.location }\r\n              }}\r\n            />\r\n          )\r\n        }\r\n\r\n        if (Component) {\r\n          return <Component {...routeProps} />\r\n        }\r\n\r\n        return children\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nPrivateRoute.defaultProps = {\r\n  component: undefined\r\n}\r\n\r\nexport { PrivateRoute }\r\n","import {\n  apiService as api,\n  AUTH_TOKEN_STORAGE_KEY,\n  IServerResponse\n} from './api'\n\nexport interface UserLoginRequestDTO {\n  email: string\n  password: string\n}\n\nexport interface UserCreateRequestDTO {\n  name: string\n  email: string\n  password: string\n}\n\nexport interface UserRecoverPasswordRequestDTO {\n  email: string\n}\n\nexport interface CheckSecretRequestDTO {\n  code: string\n  secretType: string\n}\n\nexport interface ChangePasswordRequestDTO {\n  code: string\n  password: string\n}\n\nexport interface UserFetchByTokenRequestDTO {\n  token: string\n}\n\nconst authService = {\n  /** Регистрация нового пользователя */\n  register: async (payload: UserCreateRequestDTO): Promise<IServerResponse> =>\n    api.send({\n      method: 'put',\n      endpoint: '/api/v1/auth/register',\n      payload\n    }),\n\n  /** Активация пользователя по коду из письма */\n  activate: async (code: string): Promise<IServerResponse> =>\n    api.send({\n      method: 'patch',\n      endpoint: `/api/v1/auth/activate/${code}`\n    }),\n\n  /** Вход пользователя в систему и полуение токена */\n  login: async (payload: UserLoginRequestDTO): Promise<IServerResponse> =>\n    api.send({\n      method: 'post',\n      endpoint: '/api/v1/auth/login',\n      payload\n    }),\n\n  /** Попытка получить объект пользователя по токену */\n  fetchByToken: async (\n    payload: UserFetchByTokenRequestDTO\n  ): Promise<IServerResponse> =>\n    api.send({\n      method: 'post',\n      endpoint: '/api/v1/auth/fetch-by-token',\n      payload\n    }),\n\n  /** Запрос на изменение пароля, отправка письма со ссылкой на email */\n  recover: async (\n    payload: UserRecoverPasswordRequestDTO\n  ): Promise<IServerResponse> =>\n    api.send({\n      method: 'post',\n      endpoint: '/api/v1/auth/recover',\n      payload\n    }),\n\n  /** Проверка секретного ключа для доступа к форме восстановления пароля */\n  checkSecret: async (\n    payload: CheckSecretRequestDTO\n  ): Promise<IServerResponse> =>\n    api.send({\n      method: 'post',\n      endpoint: '/api/v1/auth/check-secret',\n      payload\n    }),\n\n  /** Изменение пароля пользователя */\n  changePassword: async (\n    payload: ChangePasswordRequestDTO\n  ): Promise<IServerResponse> =>\n    api.send({\n      method: 'patch',\n      endpoint: '/api/v1/auth/change-password',\n      payload\n    }),\n\n  getToken: (): string | null => localStorage.getItem(AUTH_TOKEN_STORAGE_KEY),\n\n  setToken: (payload: string): void =>\n    localStorage.setItem(AUTH_TOKEN_STORAGE_KEY, payload),\n\n  removeToken: (): void => localStorage.removeItem(AUTH_TOKEN_STORAGE_KEY)\n}\n\nexport { authService }\n","import { FC, useState } from 'react'\nimport { Form, Input, Button, Card, Alert, Spin } from 'antd'\nimport { MailOutlined, LockOutlined, LoadingOutlined } from '@ant-design/icons'\nimport { Link, useHistory } from 'react-router-dom'\nimport { useActions } from 'hooks/useActions'\nimport { authService } from 'services/auth'\nimport { userLoginRequest } from 'modules/Auth/actions'\n\ninterface IFormValues {\n  email: string\n  password: string\n}\n\nconst Login: FC = () => {\n  const emptyMessage = { type: '', message: '' }\n  const [form] = Form.useForm()\n  const [alert, setAlert] = useState(emptyMessage)\n  const [loading, setLoading] = useState(false)\n  const [dispatchUserLoginRequest] = useActions([userLoginRequest], null)\n  const history = useHistory()\n\n  const onFinish = async (values: IFormValues) => {\n    try {\n      setAlert(emptyMessage)\n      setLoading(true)\n\n      const { email, password } = values\n      const { type, message, token, data } = await authService.login({\n        email,\n        password\n      })\n\n      if (message) {\n        setAlert({ type, message })\n        setLoading(false)\n        if (type === 'error') return\n      }\n\n      dispatchUserLoginRequest({ data, token })\n      setLoading(false)\n\n      history.push('/')\n    } catch (error) {\n      setAlert(error)\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"flex-center\">\n      <Card className=\"card\" title=\"Вход в систему\">\n        {alert.message && (\n          <Alert\n            className=\"alert\"\n            message={alert.message}\n            type={alert.type as any}\n          />\n        )}\n        <Form\n          form={form}\n          name=\"login\"\n          className=\"login-form\"\n          initialValues={{ remember: true }}\n          onFinish={onFinish}\n        >\n          <Form.Item\n            name=\"email\"\n            rules={[\n              {\n                required: true,\n                type: 'email',\n                min: 4,\n                message: 'Некорректный email'\n              }\n            ]}\n          >\n            <Input prefix={<MailOutlined />} placeholder=\"Email\" size=\"large\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"password\"\n            rules={[{ required: true, min: 6, message: 'Минимум 6 символов' }]}\n          >\n            <Input.Password\n              placeholder=\"Пароль\"\n              prefix={<LockOutlined />}\n              size=\"large\"\n            />\n          </Form.Item>\n\n          <Form.Item>\n            <Form.Item name=\"register\" noStyle>\n              <Link to=\"/auth/register\">Регистрация</Link>\n            </Form.Item>\n\n            <Link className=\"link-recover\" to=\"/auth/recover\">\n              Забыли пароль?\n            </Link>\n          </Form.Item>\n\n          {loading && (\n            <Spin\n              className=\"center\"\n              indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n              delay={500}\n            />\n          )}\n\n          <Button size=\"large\" type=\"primary\" htmlType=\"submit\" block>\n            Войти\n          </Button>\n        </Form>\n      </Card>\n    </div>\n  )\n}\n\nexport { Login }\n","import { FC, useState, useEffect } from 'react'\nimport { useParams, Link } from 'react-router-dom'\nimport { Form, Input, Button, Card, Alert } from 'antd'\nimport { LockOutlined } from '@ant-design/icons'\nimport { authService } from 'services/auth'\n\ninterface IChangePasswordParams {\n  code?: string\n}\n\ninterface IFormValues {\n  password: string\n  confirmPassword: string\n}\n\nconst ChangePassword: FC = () => {\n  const { code }: IChangePasswordParams = useParams()\n  const emptyMessage = { type: '', message: '' }\n  const [alert, setAlert] = useState(emptyMessage)\n  const [secretError, setSecretError] = useState(false)\n  const [changeSuccess, setChangeSuccess] = useState(false)\n  const [loading, setLoading] = useState(false)\n\n  useEffect(() => {\n    const checkSecret = async () => {\n      const { type, message } = await authService.checkSecret({\n        code,\n        secretType: 'RECOVER_PASSWORD'\n      })\n      if (type === 'error') {\n        setAlert({ type, message })\n        setSecretError(true)\n      }\n    }\n\n    if (\n      code.match(\n        /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i\n      )\n    ) {\n      checkSecret()\n    } else {\n      setAlert({ type: 'error', message: 'Неверный секретный код!' })\n      setSecretError(true)\n    }\n  }, [code])\n\n  const onFinish = async (values: IFormValues) => {\n    try {\n      setAlert(emptyMessage)\n      setLoading(true)\n\n      const { password } = values\n      const { type, message } = await authService.changePassword({\n        code,\n        password\n      })\n\n      if (message) {\n        setAlert({ type, message })\n        setLoading(false)\n        if (type === 'error') return\n      }\n\n      setChangeSuccess(true)\n      setLoading(false)\n    } catch (error) {\n      setAlert(error)\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"flex-center\">\n      <Card className=\"card\" title=\"Изменение пароля\">\n        {alert.message && (\n          <Alert\n            className=\"alert\"\n            message={alert.message}\n            type={alert.type as any}\n          />\n        )}\n\n        {changeSuccess && (\n          <p>\n            Теперь Вы можете <Link to=\"/auth/login\">Войти</Link> в приложение\n          </p>\n        )}\n\n        {!secretError && !changeSuccess && (\n          <>\n            <p>Придумайте новый пароль</p>\n            <Form\n              name=\"change-password-request\"\n              initialValues={{ remember: true }}\n              onFinish={onFinish}\n            >\n              <Form.Item\n                name=\"password\"\n                rules={[{ required: true, message: 'Введите пароль!' }]}\n              >\n                <Input.Password\n                  placeholder=\"Пароль\"\n                  prefix={<LockOutlined />}\n                  size=\"large\"\n                />\n              </Form.Item>\n\n              <Form.Item\n                name=\"confirmPassword\"\n                dependencies={['password']}\n                rules={[\n                  { required: true, message: 'Введите подтверждение пароля!' },\n                  ({ getFieldValue }) => ({\n                    validator(_, value) {\n                      if (!value || getFieldValue('password') === value) {\n                        return Promise.resolve()\n                      }\n                      return Promise.reject(\n                        new Error('Пароли должны совпадать!')\n                      )\n                    }\n                  })\n                ]}\n              >\n                <Input.Password\n                  placeholder=\"Пароль еще раз\"\n                  prefix={<LockOutlined />}\n                  size=\"large\"\n                />\n              </Form.Item>\n\n              <Button\n                className=\"submit-button\"\n                type=\"primary\"\n                htmlType=\"submit\"\n                size=\"large\"\n                block\n                disabled={loading}\n              >\n                Изменить пароль\n              </Button>\n            </Form>\n          </>\n        )}\n      </Card>\n    </div>\n  )\n}\n\nexport { ChangePassword }\n","import { FC, useState, useEffect } from 'react'\nimport { Card, Alert } from 'antd'\nimport { Link, useParams } from 'react-router-dom'\nimport { authService } from 'services/auth'\n\ninterface IActivationParams {\n  code?: string\n}\n\nconst Activation: FC = () => {\n  const { code }: IActivationParams = useParams()\n  const emptyMessage = { type: '', message: '' }\n  const [alert, setAlert] = useState(emptyMessage)\n\n  useEffect(() => {\n    const activateUser = async () => {\n      const { type, message } = await authService.activate(code)\n      if (message) {\n        setAlert({ type, message })\n      }\n    }\n    activateUser()\n  }, [code])\n\n  return (\n    <div className=\"flex-center\">\n      <Card className=\"card\" title=\"Активация нового пользователя\">\n        {alert.message && (\n          <Alert\n            className=\"alert\"\n            message={alert.message}\n            type={alert.type as any}\n          />\n        )}\n        <Link className=\"login-link\" to=\"/auth/login\">\n          Вход\n        </Link>\n        <Link className=\"link-recover\" to=\"/auth/recover\">\n          Восстановить пароль\n        </Link>\n      </Card>\n    </div>\n  )\n}\n\nexport { Activation }\n","import { FC, useState } from 'react'\nimport { Form, Input, Button, Card, Alert, Spin } from 'antd'\nimport {\n  UserOutlined,\n  LockOutlined,\n  MailOutlined,\n  LoadingOutlined\n} from '@ant-design/icons'\nimport { authService } from 'services/auth'\n\ninterface IFormValues {\n  name: string\n  email: string\n  password: string\n}\n\nconst Register: FC = () => {\n  const emptyMessage = { type: '', message: '' }\n  const [form] = Form.useForm()\n  const [alert, setAlert] = useState(emptyMessage)\n  const [loading, setLoading] = useState(false)\n\n  const onFinish = async (values: IFormValues) => {\n    try {\n      setAlert(emptyMessage)\n      setLoading(true)\n\n      const { name, email, password } = values\n      const { type, message } = await authService.register({\n        name,\n        email,\n        password\n      })\n\n      if (message) {\n        setAlert({ type, message })\n        setLoading(false)\n        if (type === 'error') return\n      }\n\n      form.resetFields()\n      setLoading(false)\n    } catch (error) {\n      setAlert(error)\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"flex-center\">\n      <Card className=\"card\" title=\"Регистрация\">\n        {alert.message && (\n          <Alert\n            className=\"alert\"\n            message={alert.message}\n            type={alert.type as any}\n          />\n        )}\n        <Form\n          form={form}\n          name=\"register\"\n          initialValues={{ remember: true }}\n          onFinish={onFinish}\n          validateTrigger=\"onBlur\"\n        >\n          <Form.Item\n            name=\"name\"\n            rules={[\n              {\n                required: true,\n                message:\n                  \"Имя должно содержать минимум 4 символа английского или русского алфавита, допустимы цифры и знаки '- _'\",\n                pattern: /^[a-zA-Zа-яА-ЯёЁ0-9-_\\s]{4,}$/\n              }\n            ]}\n          >\n            <Input placeholder=\"Имя\" size=\"large\" prefix={<UserOutlined />} />\n          </Form.Item>\n\n          <Form.Item\n            name=\"email\"\n            rules={[\n              { required: true, type: 'email', message: 'Некорректный email' }\n            ]}\n          >\n            <Input prefix={<MailOutlined />} placeholder=\"Email\" size=\"large\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"password\"\n            rules={[\n              {\n                required: true,\n                message: 'Введите пароль! Минимум 6 символов.',\n                min: 6\n              }\n            ]}\n          >\n            <Input.Password\n              placeholder=\"Пароль\"\n              prefix={<LockOutlined />}\n              size=\"large\"\n            />\n          </Form.Item>\n\n          <Form.Item\n            name=\"confirm-password\"\n            dependencies={['password']}\n            rules={[\n              {\n                required: true,\n                message: 'Введите подтверждение пароля! Минимум 6 символов.',\n                min: 6\n              },\n              ({ getFieldValue }) => ({\n                validator(_, value) {\n                  if (!value || getFieldValue('password') === value) {\n                    return Promise.resolve()\n                  }\n                  return Promise.reject(new Error('Пароли должны совпадать!'))\n                }\n              })\n            ]}\n          >\n            <Input.Password\n              placeholder=\"Пароль еще раз\"\n              prefix={<LockOutlined />}\n              size=\"large\"\n            />\n          </Form.Item>\n\n          {loading && (\n            <Spin\n              className=\"center\"\n              indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n              delay={500}\n            />\n          )}\n\n          <Button\n            className=\"submit-button\"\n            type=\"primary\"\n            htmlType=\"submit\"\n            size=\"large\"\n            block\n            disabled={loading}\n          >\n            Зарегистрироваться\n          </Button>\n        </Form>\n      </Card>\n    </div>\n  )\n}\n\nexport { Register }\n","import { FC, useState } from 'react'\nimport { Form, Input, Button, Card, Alert, Spin } from 'antd'\nimport { MailOutlined, LoadingOutlined } from '@ant-design/icons'\nimport { authService } from 'services/auth'\n\ninterface IFormValues {\n  email: string\n}\n\nconst Recover: FC = () => {\n  const emptyMessage = { type: '', message: '' }\n  const [form] = Form.useForm()\n  const [alert, setAlert] = useState(emptyMessage)\n  const [loading, setLoading] = useState(false)\n\n  const onFinish = async (values: IFormValues) => {\n    try {\n      setAlert(emptyMessage)\n      setLoading(true)\n\n      const { email } = values\n      const { type, message } = await authService.recover({\n        email\n      })\n\n      if (message) {\n        setAlert({ type, message })\n        setLoading(false)\n        if (type === 'error') return\n      }\n\n      form.resetFields()\n      setLoading(false)\n    } catch (error) {\n      setAlert(error)\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"flex-center\">\n      <Card className=\"card\" title=\"Восстановление пароля\">\n        {alert.message && (\n          <Alert\n            className=\"alert\"\n            message={alert.message}\n            type={alert.type as any}\n          />\n        )}\n        {alert.type !== 'success' && (\n          <>\n            <p>\n              Укажите email, указанный при регистрации и мы вышлем на него\n              ссылку для восстановления пароля.\n            </p>\n            <Form\n              form={form}\n              name=\"recover\"\n              className=\"login-form\"\n              initialValues={{ remember: true }}\n              onFinish={onFinish}\n              validateTrigger=\"onBlur\"\n            >\n              <Form.Item\n                name=\"email\"\n                rules={[\n                  {\n                    required: true,\n                    type: 'email',\n                    message: 'Некорректный email!'\n                  }\n                ]}\n              >\n                <Input\n                  prefix={<MailOutlined />}\n                  placeholder=\"Email\"\n                  size=\"large\"\n                />\n              </Form.Item>\n\n              {loading && (\n                <Spin\n                  className=\"center\"\n                  indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n                  delay={500}\n                />\n              )}\n\n              <Button\n                size=\"large\"\n                type=\"primary\"\n                htmlType=\"submit\"\n                block\n                disabled={loading}\n              >\n                Восстановить пароль\n              </Button>\n            </Form>\n          </>\n        )}\n      </Card>\n    </div>\n  )\n}\n\nexport { Recover }\n","import { FC } from 'react'\nimport { Empty } from 'antd'\nimport { Scrollbar } from 'containers/Scrollbar'\n\ninterface IMessagesProps {\n  channel: IChannelData\n}\n\nexport interface IChannelData {\n  id: number | string\n  ownerId: number\n  name: string\n  type: string\n  photo: string\n  members: string[]\n  messages: IMessage[]\n}\n\nexport interface IContactData {\n  name: string\n  type: string\n  photo: string\n  messages: IMessage[]\n}\n\ninterface IMessage {\n  id: string\n  text: string\n  from: string | number // todo userId\n  type?: string\n}\n\nconst Messages: FC<IMessagesProps> = ({\n  channel: { messages }\n}: IMessagesProps) =>\n  (!messages?.length && (\n    <div className=\"chat-empty\">\n      <Empty description=\"Сообщений нет\" />\n    </div>\n  )) || (\n    <div className=\"chat-window\">\n      <Scrollbar style={{ height: 'calc(100vh - 104px)' }}>\n        {messages.map(({ id, text, from }) => (\n          <div key={id}>\n            <strong>{from}</strong>: {text}\n          </div>\n        ))}\n      </Scrollbar>\n    </div>\n  )\n\nexport { Messages }\n","import { FC, memo } from 'react'\nimport { Form, Input, Button } from 'antd'\nimport { SendOutlined } from '@ant-design/icons'\n\ninterface IFormValues {\n  text: string\n}\n\ninterface IChatInputProps {\n  sendMessage: (text: string) => void\n}\n\nconst InputMessage: FC<IChatInputProps> = memo(({ sendMessage }) => {\n  const [form] = Form.useForm()\n\n  const onFinish = async (values: IFormValues) => {\n    try {\n      const { text } = values\n      sendMessage(text)\n      form.resetFields()\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(error)\n    }\n  }\n  return (\n    <div className=\"chat-input\">\n      <Form size=\"large\" className=\"input-form\" form={form} onFinish={onFinish}>\n        <Form.Item className=\"input-messaage\" required name=\"text\">\n          <Input autoFocus placeholder=\"Введите сообщение\" />\n        </Form.Item>\n        <Form.Item className=\"send-button\">\n          <Button htmlType=\"submit\" type=\"primary\" icon={<SendOutlined />}>\n            Отправить\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  )\n})\n\nexport { InputMessage }\n","import { useCallback } from 'react'\nimport { nanoid } from 'nanoid'\nimport { UserDTO } from 'services/user'\nimport { Empty } from 'antd'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport { sendChannelMessage, sendContactMessage } from 'modules/Chat/actions'\nimport { useActions } from 'hooks/useActions'\nimport { socketService } from 'services/socket'\nimport { Messages } from './Messages'\nimport { InputMessage } from './InputMessage'\n\nconst Chat = () => {\n  const user = useShallowEqualSelector((state) => state.auth.user) as UserDTO\n  const [dispatchSendChannelMessage, dispatchSendContactMessage] = useActions(\n    [sendChannelMessage, sendContactMessage],\n    null\n  )\n  const { activeChannel, channels, contacts } = useShallowEqualSelector(\n    (state) => state.chat\n  ) as any\n\n  const onSendMessage = useCallback(\n    (text: string): void => {\n      if (!activeChannel) return\n      if (!text) return\n\n      const id = nanoid()\n      const { id: userId, name } = user\n      const message = { id, text, from: `${name}(${userId})` }\n      const payload = {\n        activeChannelId: activeChannel.id,\n        message\n      }\n\n      if (activeChannel.type === 'channel') {\n        dispatchSendChannelMessage(payload)\n        socketService.sendChannelMessage(payload)\n      }\n\n      if (activeChannel.type === 'contact') {\n        dispatchSendContactMessage(payload)\n        socketService.sendContactMessage({\n          from: user.id,\n          to: activeChannel.id,\n          message\n        })\n      }\n    },\n    [\n      activeChannel,\n      dispatchSendChannelMessage,\n      dispatchSendContactMessage,\n      user\n    ]\n  )\n\n  if (!user || !activeChannel || (!channels && !contacts))\n    return (\n      <div className=\"chat-empty\">\n        <Empty description=\"Выберите канал для начала общения!\" />\n      </div>\n    )\n\n  const { type, id } = activeChannel\n  const channelData =\n    type === 'channel' ? channels && channels[id] : contacts && contacts[id]\n\n  if (!channelData) return null\n\n  return (\n    <>\n      <Messages channel={channelData} />\n      <InputMessage sendMessage={onSendMessage} />\n    </>\n  )\n}\n\nexport { Chat }\n","import { FC } from 'react'\nimport { Switch, Route, Redirect } from 'react-router-dom'\n\nimport { PrivateRoute } from 'containers/PrivateRoute'\nimport { Login } from 'components/Auth/Login'\nimport { ChangePassword } from 'components/Auth/ChangePassword'\nimport { Activation } from 'components/Auth/Activation'\nimport { Register } from 'components/Auth/Register'\nimport { Recover } from 'components/Auth/Recover'\nimport { Chat } from '../Chat'\n\nconst Routes: FC = () => (\n  <Switch>\n    <PrivateRoute exact path=\"/\" component={Chat} />\n    <Route path=\"/auth/login\" component={Login} />\n    <Route path=\"/auth/register\" component={Register} />\n    <Route path=\"/auth/activation/:code\" component={Activation} />\n    <Route path=\"/auth/recover\" component={Recover} />\n    <Route path=\"/auth/change-password/:code\" component={ChangePassword} />\n    <Route path=\"*\">\n      <Redirect to=\"/auth/login\" />\n    </Route>\n  </Switch>\n)\n\nexport { Routes }\n","import { FC, useState, useEffect, useRef } from 'react'\nimport { UserDTO } from 'services/user'\nimport { Layout } from 'antd'\nimport { PrivateContainer } from 'containers/Private'\nimport { sendChannelMessage, sendContactMessage } from 'modules/Chat/actions'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport { useActions } from 'hooks/useActions'\nimport { socketService } from 'services/socket'\nimport { Header } from './Header'\nimport { Sidebar } from './Sidebar'\nimport { Routes } from '../Routes'\n\nconst { Content } = Layout\n\nconst App: FC = () => {\n  const [needRecreateRef, setNeedRecreateRef] = useState(0)\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false)\n  // const [onlineUsers, setOnlineUsers] = useState([])\n  const SR = useRef(null)\n  const [dispatchSendChannelMessage, dispatchSendContactMessage] = useActions(\n    [sendChannelMessage, sendContactMessage],\n    null\n  )\n  const activeChannel = useShallowEqualSelector(\n    (state) => state.chat.activeChannel\n  ) as any\n  const user = useShallowEqualSelector((state) => state.auth.user) as UserDTO\n\n  const onSidebarToggle = (isCollapsed: boolean) => {\n    setSidebarCollapsed(isCollapsed)\n  }\n\n  useEffect(() => {\n    if (!socketService.socket) return null\n    SR.current = socketService.socket\n\n    // Correct reconnection after server emits disconnected event\n    socketService.socket.on('disconnect', (reason: string) => {\n      if (reason === 'transport error' || reason === 'ping timeout') {\n        if (!user) return\n        socketService.disconnect()\n        socketService.connect(user)\n        setNeedRecreateRef((state) => state + 1)\n      }\n    })\n\n    socketService.socket.on('users:connected', () => {\n      // users.forEach((user) => {\n      // user.self = user.userId === WS.socket.id\n      // initReactiveProperties(user)\n      // dispatchUpdateUsersOnline(users)\n      // })\n      // put the current user first, and then sort by username\n      // setOnlineUsers(\n      //   users.sort((a, b) => {\n      //     if (a.self) return -1\n      //     if (b.self) return 1\n      //     if (a.username < b.username) return -1\n      //     return a.username > b.username ? 1 : 0\n      //   })\n      // )\n      // dispatchUpdateUsersOnline(users)\n      // eslint-disable-next-line no-console\n      // console.log(onlineUsers)\n    })\n\n    SR.current.on(\n      'channel:message:broadcast',\n      ({ activeChannelId: channelId, message }) => {\n        dispatchSendChannelMessage({\n          activeChannelId: channelId,\n          message\n        })\n      }\n    )\n\n    SR.current.on('contact:message:private', ({ message, from }) => {\n      // eslint-disable-next-line no-console\n      console.log('contact:message:private', message, `from: ${from}`)\n\n      dispatchSendContactMessage({\n        activeChannelId: from,\n        message\n      })\n    })\n\n    return () => {\n      SR.current.off('channel:message:broadcast')\n      SR.current.off('contact:message:private')\n    }\n  }, [\n    user,\n    activeChannel,\n    dispatchSendChannelMessage,\n    dispatchSendContactMessage,\n    needRecreateRef\n  ])\n\n  return (\n    <Layout className=\"wrap-layout\">\n      <PrivateContainer>\n        <Sidebar\n          sidebarCollapsed={sidebarCollapsed}\n          onSidebarToggle={onSidebarToggle}\n        />\n      </PrivateContainer>\n\n      <Layout className=\"site-layout\">\n        <Header\n          sidebarCollapsed={sidebarCollapsed}\n          onSidebarToggle={onSidebarToggle}\n        />\n        <Content className=\"content\">\n          <Routes />\n        </Content>\n      </Layout>\n    </Layout>\n  )\n}\n\nexport { App }\n","import { takeLatest, put, call, fork } from 'redux-saga/effects'\r\nimport { authService } from 'services/auth'\r\nimport { socketService } from 'services/socket'\r\nimport {\r\n  userLoginRequest,\r\n  userLogoutRequest,\r\n  userFetchSuccess\r\n} from './actions'\r\nimport {\r\n  initChannelsData,\r\n  initContactsData,\r\n  setActiveChannel\r\n} from '../Chat/actions'\r\n\r\n/** login */\r\nexport function* userLoginRequestFlow({ payload: { data: user, token } }) {\r\n  yield put(userFetchSuccess(user))\r\n  yield call([authService, authService.setToken], token)\r\n  const { channels, contacts } = yield call(\r\n    [socketService, socketService.connect],\r\n    user\r\n  )\r\n  yield put(initChannelsData(channels))\r\n  yield put(initContactsData(contacts))\r\n}\r\nexport function* userLoginWatcher() {\r\n  yield takeLatest(userLoginRequest, userLoginRequestFlow)\r\n}\r\n\r\n/** logout */\r\nexport function* userLogoutRequestFlow() {\r\n  yield call([authService, authService.removeToken])\r\n  yield put(userFetchSuccess(false))\r\n  yield put(setActiveChannel(null))\r\n  yield call([socketService, socketService.disconnect])\r\n}\r\nexport function* userLogoutWatcher() {\r\n  yield takeLatest(userLogoutRequest, userLogoutRequestFlow)\r\n}\r\n\r\nconst authSagas = function* generator() {\r\n  yield fork(userLoginWatcher)\r\n  yield fork(userLogoutWatcher)\r\n}\r\n\r\nexport { authSagas }\r\n","import { combineReducers } from 'redux'\r\nimport { handleActions } from 'redux-actions'\r\nimport { UserDTO } from 'services/user'\r\nimport {\r\n  userFetchSuccess,\r\n  userFetchFailure,\r\n  userUpdatePhoto,\r\n  userRemoveContact,\r\n  userAddContact\r\n} from './actions'\r\n\r\nexport interface IAuthState {\r\n  user: UserDTO\r\n}\r\n\r\nexport const initialState = {\r\n  user: null\r\n}\r\n\r\nconst user = handleActions(\r\n  {\r\n    [userFetchSuccess]: (_state, action) => action.payload,\r\n    [userFetchFailure]: () => false,\r\n    [userUpdatePhoto]: (state, action) => ({ ...state, photo: action.payload }),\r\n    [userRemoveContact]: (state, action) => {\r\n      const oldContacts = JSON.parse(state.contacts)\r\n      let updatedContacts = oldContacts.filter(\r\n        (id: number) => action.payload !== id\r\n      )\r\n      if (!updatedContacts.length) {\r\n        updatedContacts = null\r\n      } else {\r\n        updatedContacts = JSON.stringify(updatedContacts)\r\n      }\r\n\r\n      return { ...state, contacts: updatedContacts }\r\n    },\r\n    [userAddContact]: (state, action) => {\r\n      let contacts\r\n\r\n      if (!state.contacts) {\r\n        contacts = `[${action.payload}]`\r\n      } else {\r\n        const oldContacts = JSON.parse(state.contacts)\r\n        oldContacts.push(action.payload)\r\n        contacts = JSON.stringify(oldContacts)\r\n      }\r\n\r\n      return { ...state, contacts }\r\n    }\r\n  },\r\n  null\r\n)\r\n\r\nconst authReducer = combineReducers<IAuthState>({\r\n  user\r\n})\r\n\r\nexport { authReducer }\r\n","import { combineReducers } from 'redux'\r\nimport { handleActions } from 'redux-actions'\r\nimport {\r\n  setActiveChannel,\r\n  initChannelsData,\r\n  initContactsData,\r\n  sendChannelMessage,\r\n  sendContactMessage,\r\n  addChannel,\r\n  addContact,\r\n  populateChannel,\r\n  removeContact\r\n} from './actions'\r\n\r\nexport interface IActiveChannel {\r\n  id: number\r\n  name: string\r\n  type: string\r\n}\r\n\r\nexport interface IChatState {\r\n  activeChannel: IActiveChannel\r\n  channels: Object\r\n  contacts: Object\r\n}\r\n\r\nexport const initialState: IChatState = {\r\n  activeChannel: null,\r\n  channels: null,\r\n  contacts: null\r\n}\r\n\r\nconst activeChannel = handleActions(\r\n  {\r\n    [setActiveChannel]: (_state, action) => action.payload\r\n  },\r\n  null\r\n)\r\n\r\nconst addMessage = (state, action) => ({\r\n  ...state,\r\n  [action.payload.activeChannelId]: {\r\n    ...state[action.payload.activeChannelId],\r\n    messages: [\r\n      ...state[action.payload.activeChannelId].messages,\r\n      action.payload.message\r\n    ]\r\n  }\r\n})\r\n\r\nconst channels = handleActions(\r\n  {\r\n    [initChannelsData]: (_state, action) => action.payload,\r\n    [sendChannelMessage]: addMessage,\r\n    [addChannel]: (state, action) => ({\r\n      ...state,\r\n      [action.payload.id]: {\r\n        ownerId: action.payload.ownerId,\r\n        name: action.payload.name,\r\n        members: action.payload.members,\r\n        photo: action.payload.photo,\r\n        type: action.payload.type,\r\n        messages: []\r\n      }\r\n    }),\r\n    [populateChannel]: (state, action) => ({\r\n      ...state,\r\n      [action.payload.id]: {\r\n        ...state[action.payload.id],\r\n        owner: action.payload.owner,\r\n        members: action.payload.members,\r\n        populated: true\r\n      }\r\n    })\r\n  },\r\n  null\r\n)\r\n\r\nconst contacts = handleActions(\r\n  {\r\n    [initContactsData]: (_state, action) => action.payload,\r\n    [sendContactMessage]: addMessage,\r\n    [addContact]: (state, action) => {\r\n      const contact = {\r\n        [action.payload.id]: {\r\n          ...action.payload\r\n        }\r\n      }\r\n      delete contact[action.payload.id].id\r\n\r\n      return state ? { ...state, ...contact } : { ...contact }\r\n    },\r\n    [removeContact]: (state, action) => {\r\n      let newState = { ...state }\r\n      delete newState[action.payload]\r\n      if (!Object.keys(newState).length) {\r\n        newState = null\r\n      }\r\n      return newState\r\n    }\r\n  },\r\n  null\r\n)\r\n\r\nconst chatReducer = combineReducers<IChatState>({\r\n  activeChannel,\r\n  channels,\r\n  contacts\r\n})\r\n\r\nexport { chatReducer }\r\n","import { combineReducers } from 'redux'\nimport { handleActions } from 'redux-actions'\nimport {\n  changeCreateChannelModalState,\n  changeUserProfileModalState,\n  changeAddContactModalState,\n  changeContactInfoModalState,\n  changeChannelInfoModalState\n} from './actions'\n\nexport interface IModalsState {\n  createChannel: boolean\n  userProfile: boolean\n  addContact: boolean\n  contactInfo: boolean\n  channelInfo: boolean\n}\n\nexport const initialState = {\n  createChannel: false,\n  userProfile: false,\n  addContact: false,\n  contactInfo: false,\n  channelInfo: false\n}\n\nconst createChannel = handleActions(\n  { [changeCreateChannelModalState]: (_state, action) => action.payload },\n  false\n)\n\nconst userProfile = handleActions(\n  { [changeUserProfileModalState]: (_state, action) => action.payload },\n  false\n)\n\nconst addContact = handleActions(\n  { [changeAddContactModalState]: (_state, action) => action.payload },\n  false\n)\n\nconst contactInfo = handleActions(\n  { [changeContactInfoModalState]: (_state, action) => action.payload },\n  false\n)\n\nconst channelInfo = handleActions(\n  { [changeChannelInfoModalState]: (_state, action) => action.payload },\n  false\n)\n\nconst modalsReducer = combineReducers<IModalsState>({\n  createChannel,\n  userProfile,\n  addContact,\n  contactInfo,\n  channelInfo\n})\n\nexport { modalsReducer }\n","import { call, put } from 'redux-saga/effects'\nimport { authService } from 'services/auth'\nimport { socketService } from 'services/socket'\nimport { userFetchSuccess, userFetchFailure } from './Auth/actions'\nimport { initChannelsData, initContactsData } from './Chat/actions'\n\n/** Launch saga once when on app start */\nconst launchSaga = function* launchSaga() {\n  try {\n    const token = yield call([authService, authService.getToken])\n\n    if (!token) {\n      yield put(userFetchFailure())\n      return\n    }\n    const { data: user } = yield call([authService, authService.fetchByToken], {\n      token\n    })\n\n    if (!user) {\n      yield call([authService, authService.removeToken])\n      yield put(userFetchFailure())\n      return\n    }\n\n    yield put(userFetchSuccess(user))\n    const { channels, contacts } = yield call(\n      [socketService, socketService.connect],\n      user\n    )\n    yield put(initChannelsData(channels))\n    yield put(initContactsData(contacts))\n  } catch (error) {\n    yield call([authService, authService.removeToken])\n    yield put(userFetchFailure(error))\n  }\n}\n\nexport { launchSaga }\n","import { combineReducers } from 'redux'\nimport { fork } from 'redux-saga/effects'\nimport { authSagas } from 'modules/Auth/sagas'\nimport {\n  authReducer,\n  IAuthState,\n  initialState as authInitialState\n} from 'modules/Auth/reducer'\nimport {\n  chatReducer,\n  IChatState,\n  initialState as chatInitialState\n} from 'modules/Chat/reducer'\nimport {\n  modalsReducer,\n  IModalsState,\n  initialState as modalsInitialState\n} from 'modules/Modals/reducer'\nimport { launchSaga } from 'modules/launchSaga'\n\nexport interface IRootState {\n  auth: IAuthState\n  chat: IChatState\n  modals: IModalsState\n}\n\nexport const initialState: IRootState = {\n  auth: authInitialState,\n  chat: chatInitialState,\n  modals: modalsInitialState\n}\n\nexport const rootReducer = combineReducers({\n  auth: authReducer,\n  chat: chatReducer,\n  modals: modalsReducer\n})\n\nexport function* rootSaga() {\n  yield fork(authSagas)\n  yield fork(launchSaga)\n}\n","import { createStore, compose, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport createSagaMiddleware from 'redux-saga'\nimport { rootReducer, rootSaga } from 'modules'\n\nconst createAppStore = () => {\n  const sagaMiddleware = createSagaMiddleware()\n  const store = createStore(\n    rootReducer,\n    compose(composeWithDevTools(applyMiddleware(sagaMiddleware)))\n  )\n\n  sagaMiddleware.run(rootSaga)\n  return store\n}\n\nexport { createAppStore }\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\n// eslint-disable-next-line import/no-default-export\nexport default reportWebVitals\n","import { StrictMode } from 'react'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport { render } from 'react-dom'\nimport { App } from 'components/App'\nimport { createAppStore } from 'modules/store'\nimport reportWebVitals from 'reportWebVitals'\nimport 'index.scss'\n\nconst store = createAppStore()\n\nrender(\n  <StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}