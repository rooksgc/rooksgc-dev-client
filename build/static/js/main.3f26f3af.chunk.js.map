{"version":3,"sources":["hooks/useShallowEqualSelector.ts","components/MainMenu/index.tsx","hooks/useActions.ts","modules/Auth/actions.ts","components/UserProfile/index.tsx","containers/ModalWindow.tsx","components/UserMenu/index.tsx","containers/Private.tsx","components/App/Header/index.tsx","hooks/useEscape.ts","modules/Chat/actions.ts","components/App/Sidebar/index.tsx","components/Chat/Messages/index.tsx","components/Chat/InputMessage/index.tsx","services/socket.ts","components/Chat/index.tsx","services/auth.ts","components/Login/index.tsx","components/Register/index.tsx","components/Recover/index.tsx","components/ChangePassword/index.tsx","components/Activation/index.tsx","containers/PrivateRoute.tsx","components/Routes/index.tsx","components/App/index.tsx","reportWebVitals.ts","modules/Auth/sagas.ts","modules/Auth/reducer.ts","modules/Chat/reducer.ts","modules/launchSaga.ts","modules/index.ts","modules/store.ts","index.tsx"],"names":["useShallowEqualSelector","selector","useSelector","shallowEqual","menuItems","key","label","path","icon","PieChartOutlined","MainMenu","location","useLocation","history","useHistory","find","item","pathname","mode","selectedKeys","onClick","clicked","_item","push","map","Item","useActions","actions","deps","dispatch","useDispatch","useMemo","Array","isArray","a","bindActionCreators","userLoginRequest","createAction","userLogoutRequest","userFetchSuccess","userFetchFailure","UserProfile","state","auth","user","name","email","role","ModalWindow","props","children","title","visible","onOk","onCancel","footer","centered","UserMenu","useState","userProfileModalVisibility","setUserProfileModalVisibility","dispatchUserLogoutRequest","menu","event","ProfileOutlined","Divider","LogoutOutlined","overlay","trigger","className","UserOutlined","PrivateContainer","AntHeader","Layout","Header","activeChannel","chat","onSidebarToggle","sidebarCollapsed","onTriggerClick","menuTrigger","MenuUnfoldOutlined","style","fontSize","padding","MenuFoldOutlined","activeChannelLabel","count","marginBottom","backgroundColor","color","Private","useEscape","onEscape","useEffect","handleEsc","window","addEventListener","removeEventListener","setActiveChannel","initChannelsData","initContactsData","sendChannelMessage","sendContactMessage","Sider","Sidebar","sidebarLocked","setSidebarLocked","dispatchActiveChannel","channels","contacts","onClickMenu","id","type","split","channelType","channelId","intChannelId","parseInt","selectedMenuKey","collapsed","collapsedWidth","theme","overflow","height","LockOutlined","UnlockOutlined","Object","entries","channel","Messages","messages","length","description","text","from","InputMessage","sendMessage","Form","useForm","form","onFinish","values","resetFields","error","console","log","size","required","autoFocus","placeholder","htmlType","SendOutlined","memo","chatService","getUserChannelsData","userChannelsList","userContactsList","reduce","acc","userChannelsData","WS","socket","undefined","connect","io","autoConnect","userId","subscribeToChannels","emit","payload","disconnect","Chat","dispatchSendChannelMessage","dispatchSendContactMessage","onSendMessage","useCallback","nanoid","message","activeChannelId","to","channelData","AUTH_TOKEN_STORAGE_KEY","makeError","response","data","status","AuthService","getAllUsers","send","method","endpoint","register","activate","code","login","fetchByToken","recover","checkSecret","changePassword","getToken","localStorage","getItem","setToken","setItem","removeToken","removeItem","axios","interceptors","request","use","config","token","headers","Authorization","Login","emptyMessage","alert","setAlert","loading","setLoading","dispatchUserLoginRequest","password","authService","initialValues","remember","rules","min","prefix","MailOutlined","Password","noStyle","indicator","LoadingOutlined","spin","delay","block","Register","validateTrigger","pattern","dependencies","getFieldValue","validator","_","value","Promise","reject","Error","resolve","disabled","Recover","ChangePassword","useParams","secretError","setSecretError","changeSuccess","setChangeSuccess","secretType","match","Activation","activateUser","PrivateRoute","Component","component","rest","render","routeProps","defaultProps","Routes","exact","Content","App","needRecreateRef","setNeedRecreateRef","setSidebarCollapsed","SR","useRef","isCollapsed","current","on","reason","off","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","userLoginRequestFlow","userLoginWatcher","userLogoutRequestFlow","userLogoutWatcher","generator","put","call","takeLatest","fork","handleActions","_state","action","combineReducers","addMessage","launchSaga","rootSaga","authSagas","store","sagaMiddleware","createSagaMiddleware","createStore","rootReducer","compose","composeWithDevTools","applyMiddleware","run","createAppStore","document","getElementById"],"mappings":"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","file":"static/js/main.3f26f3af.chunk.js","sourcesContent":["import { useSelector, shallowEqual } from 'react-redux'\nimport { RootState } from '../modules'\n\nconst useShallowEqualSelector = (selector: any) =>\n  useSelector<RootState>(selector, shallowEqual)\n\nexport default useShallowEqualSelector\n","import { FC } from 'react'\nimport { useLocation, useHistory } from 'react-router-dom'\nimport { Menu } from 'antd'\nimport { PieChartOutlined } from '@ant-design/icons'\n\nconst menuItems = [\n  {\n    key: 'login',\n    label: 'Войти',\n    path: '/auth/login',\n    icon: <PieChartOutlined />\n  },\n  {\n    key: 'register',\n    label: 'Регистрация',\n    path: '/auth/register',\n    icon: <PieChartOutlined />\n  }\n]\n\nconst MainMenu: FC = () => {\n  const location = useLocation()\n  const history = useHistory()\n\n  const key = menuItems.find((item) => location.pathname === item.path)?.key\n  if (!key) return null\n\n  const onClickMenu = (item) => {\n    if (item.key === key) return\n    const clicked = menuItems.find((_item) => _item.key === item.key)\n    history.push(clicked.path)\n  }\n\n  return (\n    <Menu mode=\"horizontal\" selectedKeys={[key]} onClick={onClickMenu}>\n      {menuItems.map((item) => (\n        <Menu.Item key={item.key} icon={item.icon}>\n          {item.label}\n        </Menu.Item>\n      ))}\n    </Menu>\n  )\n}\n\nexport default MainMenu\n","import { bindActionCreators } from 'redux'\nimport { useDispatch } from 'react-redux'\nimport { useMemo } from 'react'\n\nconst useActions = (actions, deps) => {\n  const dispatch = useDispatch()\n\n  return useMemo(\n    () => {\n      if (Array.isArray(actions)) {\n        return actions.map((a) => bindActionCreators(a, dispatch))\n      }\n      return bindActionCreators(actions, dispatch)\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    deps ? [dispatch, ...deps] : [dispatch]\n  )\n}\n\nexport default useActions\n","import { createAction } from 'redux-actions'\r\n\r\n/** Записать токен пользователя в стор */\r\nexport const userLoginRequest: any = createAction('AUTH/USER_LOGIN_REQUEST')\r\n\r\n/** Выход пользователя из системы (logout) */\r\nexport const userLogoutRequest: any = createAction('AUTH/USER_LOGOUT_REQUEST')\r\n\r\n/** Записать объект пользователя в стор */\r\nexport const userFetchSuccess: any = createAction('AUTH/USER_FETCH_SUCCESS')\r\n\r\n/** Ошибка получения объекта пользователя */\r\nexport const userFetchFailure: any = createAction('AUTH/USER_FETCH_FAILURE')\r\n","import useShallowEqualSelector from '../../hooks/useShallowEqualSelector'\nimport { UserDTO } from '../../services/auth'\n\nconst UserProfile = () => {\n  const { name, email, role } = useShallowEqualSelector(\n    (state) => state.auth.user\n  ) as UserDTO\n  return (\n    <>\n      <p>Имя: {name}</p>\n      <p>Email: {email}</p>\n      <p>Роль: {role}</p>\n    </>\n  )\n}\n\nexport default UserProfile\n","import { FC, Component, ReactElement } from 'react'\nimport { Modal } from 'antd'\n\ninterface IModalWindowProps {\n  title?: string\n  visible?: boolean\n  centered?: boolean\n  onOk?: () => any | null\n  onCancel?: () => any | null\n  footer?: Component[] | FC[] | ReactElement[] | null\n}\n\nconst ModalWindow: FC<IModalWindowProps> = (props) => {\n  const {\n    children,\n    title = '',\n    visible = false,\n    onOk = null,\n    onCancel = null,\n    footer = null\n  } = props\n\n  return (\n    <Modal\n      centered\n      title={title}\n      visible={visible}\n      onOk={onOk}\n      onCancel={onCancel}\n      footer={footer}\n    >\n      {children}\n    </Modal>\n  )\n}\n\nexport default ModalWindow\n","import { FC, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { Menu, Dropdown, Avatar } from 'antd'\nimport {\n  UserOutlined,\n  LogoutOutlined,\n  ProfileOutlined\n} from '@ant-design/icons'\nimport useActions from '../../hooks/useActions'\nimport { userLogoutRequest } from '../../modules/Auth/actions'\nimport UserProfile from '../UserProfile'\nimport ModalWindow from '../../containers/ModalWindow'\n\nconst UserMenu: FC = () => {\n  const [userProfileModalVisibility, setUserProfileModalVisibility] = useState(\n    false\n  )\n  const history = useHistory()\n  const [dispatchUserLogoutRequest] = useActions([userLogoutRequest], null)\n\n  const handleMenuClick = (event) => {\n    const { key } = event\n\n    switch (key) {\n      case 'profile':\n        setUserProfileModalVisibility(true)\n        break\n      case 'logout':\n        dispatchUserLogoutRequest()\n        history.push('/auth/login')\n        break\n      default:\n        break\n    }\n  }\n\n  const menu = (\n    <Menu onClick={handleMenuClick}>\n      <Menu.Item key=\"profile\" icon={<ProfileOutlined />}>\n        Профиль\n      </Menu.Item>\n      <Menu.Divider />\n      <Menu.Item key=\"logout\" icon={<LogoutOutlined />}>\n        Выход\n      </Menu.Item>\n    </Menu>\n  )\n\n  return (\n    <>\n      <Dropdown overlay={menu} trigger={['click']}>\n        <Avatar className=\"user-profile\" icon={<UserOutlined />} />\n      </Dropdown>\n      <ModalWindow\n        title=\"Профиль\"\n        visible={userProfileModalVisibility}\n        onCancel={() => setUserProfileModalVisibility(false)}\n      >\n        <UserProfile />\n      </ModalWindow>\n    </>\n  )\n}\n\nexport default UserMenu\n","import useShallowEqualSelector from '../hooks/useShallowEqualSelector'\n\nconst PrivateContainer = ({ children }) => {\n  const user = useShallowEqualSelector((state) => state.auth.user)\n  if (!user) return null\n\n  return children\n}\n\nexport default PrivateContainer\n","import { FC } from 'react'\nimport { Layout, Badge } from 'antd'\nimport { MenuUnfoldOutlined, MenuFoldOutlined } from '@ant-design/icons'\nimport useShallowEqualSelector from 'src/hooks/useShallowEqualSelector'\nimport MainMenu from '../../MainMenu'\nimport UserMenu from '../../UserMenu'\nimport PrivateContainer from '../../../containers/Private'\n\ninterface IHeaderProps {\n  sidebarCollapsed: boolean\n  onSidebarToggle: (isCollapsed: boolean) => void\n}\n\nconst { Header: AntHeader } = Layout\n\nconst Header: FC<IHeaderProps> = (props: IHeaderProps) => {\n  const activeChannel = useShallowEqualSelector(\n    (state) => state.chat.activeChannel\n  ) as any\n\n  const { onSidebarToggle, sidebarCollapsed } = props\n\n  const onTriggerClick = () => {\n    const collapsedState = !sidebarCollapsed\n    onSidebarToggle(collapsedState)\n  }\n\n  const menuTrigger = sidebarCollapsed ? (\n    <MenuUnfoldOutlined\n      style={{ fontSize: '20px', padding: '22px' }}\n      className=\"trigger\"\n      onClick={onTriggerClick}\n      label=\"Свернуть\"\n    />\n  ) : (\n    <MenuFoldOutlined\n      style={{ fontSize: '20px', padding: '22px' }}\n      className=\"trigger\"\n      onClick={onTriggerClick}\n    />\n  )\n\n  const activeChannelLabel = activeChannel && (\n    <Badge\n      count={activeChannel.name}\n      style={{\n        marginBottom: '6px',\n        backgroundColor: '#E7F3FF',\n        color: '#000'\n      }}\n    />\n  )\n\n  return (\n    <AntHeader className=\"header background-white\">\n      <PrivateContainer>\n        {menuTrigger}\n        {activeChannelLabel}\n      </PrivateContainer>\n\n      <div className=\"header-menu\">\n        <MainMenu />\n        <PrivateContainer>\n          <UserMenu />\n        </PrivateContainer>\n      </div>\n    </AntHeader>\n  )\n}\n\nexport default Header\n","import { useEffect } from 'react'\n\nconst useEscape = (onEscape: () => any) => {\n  useEffect(() => {\n    const handleEsc = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') onEscape()\n    }\n    window.addEventListener('keydown', handleEsc)\n\n    return () => {\n      window.removeEventListener('keydown', handleEsc)\n    }\n  }, [onEscape])\n}\n\nexport default useEscape\n","import { createAction } from 'redux-actions'\r\n\r\n/** Установить активный канал чата (id, label) */\r\nexport const setActiveChannel: any = createAction('CHAT/SET_ACTIVE_CHANNEL')\r\n/** Начальное состояние каналов на момент захода пользователя */\r\nexport const initChannelsData: any = createAction('CHAT/INIT_CHANNELS_DATA')\r\n/** Начальное состояние контактов на момент захода пользователя */\r\nexport const initContactsData: any = createAction('CHAT/INIT_CONTACTS_DATA')\r\n/** Добавить сообщение в чат канала */\r\nexport const sendChannelMessage: any = createAction('CHAT/SEND_CHANNEL_MESSAGE')\r\n/** Добавить приватное сообщение пользователю */\r\nexport const sendContactMessage: any = createAction('CHAT/SEND_CONTACT_MESSAGE')\r\n","import { FC, useState } from 'react'\nimport { Layout, Menu } from 'antd'\nimport { LockOutlined, UnlockOutlined } from '@ant-design/icons'\nimport PrivateContainer from '../../../containers/Private'\nimport useEscape from '../../../hooks/useEscape'\nimport useShallowEqualSelector from '../../../hooks/useShallowEqualSelector'\nimport { setActiveChannel } from '../../../modules/Chat/actions'\nimport useActions from '../../../hooks/useActions'\nimport { IChannelData } from '../../Chat/Messages'\n\ninterface ISidebarProps {\n  sidebarCollapsed: boolean\n  onSidebarToggle: (isCollapsed: boolean) => void\n}\n\nconst { Sider } = Layout\n\nconst Sidebar: FC<ISidebarProps> = (props: ISidebarProps) => {\n  const [sidebarLocked, setSidebarLocked] = useState(true)\n  const { sidebarCollapsed, onSidebarToggle } = props\n  const [dispatchActiveChannel] = useActions([setActiveChannel], null)\n  const chat = useShallowEqualSelector((state) => state.chat) as any\n  const { activeChannel, channels, contacts } = chat\n\n  useEscape(() => {\n    if (!activeChannel) return\n    dispatchActiveChannel(null)\n  })\n\n  const onClickMenu = ({ key }) => {\n    if (activeChannel) {\n      const { id, type } = activeChannel\n      if (key === `${type}-${id}`) return\n    }\n\n    const [channelType, channelId] = key.split('-')\n    const place = channelType === 'channel' ? channels : contacts\n    const { name, type } = place[channelId]\n\n    const intChannelId = parseInt(channelId, 10)\n    dispatchActiveChannel({ id: intChannelId, name, type })\n\n    if (!sidebarLocked) {\n      onSidebarToggle(true)\n    }\n  }\n\n  const selectedMenuKey = activeChannel\n    ? [`${activeChannel.type}-${activeChannel.id}`]\n    : []\n\n  return (\n    <PrivateContainer>\n      <Sider\n        trigger={null}\n        collapsed={sidebarCollapsed}\n        collapsedWidth={0}\n        className=\"sider\"\n        theme=\"dark\"\n        style={{\n          overflow: 'auto',\n          height: '100vh'\n        }}\n      >\n        <div className=\"sidebar-top\">\n          {sidebarLocked ? (\n            <LockOutlined\n              title=\"Отмена фиксации\"\n              className=\"sidebar-locker\"\n              onClick={() => setSidebarLocked(false)}\n            />\n          ) : (\n            <UnlockOutlined\n              title=\"Фиксировать меню\"\n              className=\"sidebar-locker\"\n              onClick={() => setSidebarLocked(true)}\n            />\n          )}\n        </div>\n        {channels && (\n          <Menu\n            theme=\"dark\"\n            mode=\"inline\"\n            selectedKeys={selectedMenuKey}\n            onClick={onClickMenu}\n          >\n            {Object.entries(channels as IChannelData).map(\n              ([channelId, channel]) => (\n                <Menu.Item key={`${channel.type}-${channelId}`}>\n                  {channel.name}\n                </Menu.Item>\n              )\n            )}\n          </Menu>\n        )}\n        {contacts && (\n          <Menu\n            theme=\"dark\"\n            mode=\"inline\"\n            selectedKeys={selectedMenuKey}\n            onClick={onClickMenu}\n          >\n            {Object.entries(contacts as IChannelData).map(\n              ([channelId, channel]) => (\n                <Menu.Item key={`${channel.type}-${channelId}`}>\n                  {channel.name}\n                </Menu.Item>\n              )\n            )}\n          </Menu>\n        )}\n      </Sider>\n    </PrivateContainer>\n  )\n}\n\nexport default Sidebar\n","import { FC } from 'react'\nimport { Empty } from 'antd'\n\ninterface IMessagesProps {\n  channel: IChannelData\n}\n\nexport interface IChannelData {\n  id: number | string\n  name: string\n  type: string // contact(user) | channel\n  messages: IMessage[]\n}\n\ninterface IMessage {\n  id: string\n  text: string\n  from: string | number // todo userId\n  type?: string\n}\n\nconst Messages: FC<IMessagesProps> = ({\n  channel: { messages }\n}: IMessagesProps) =>\n  (!messages?.length && (\n    <div className=\"chat-empty\">\n      <Empty description=\"Сообщений нет\" />\n    </div>\n  )) || (\n    <div className=\"chat-window\">\n      {messages.map(({ id, text, from }) => (\n        <div key={id}>\n          <strong>{from}</strong>: {text}\n        </div>\n      ))}\n    </div>\n  )\n\nexport default Messages\n","import { FC, memo } from 'react'\nimport { Form, Input, Button } from 'antd'\nimport { SendOutlined } from '@ant-design/icons'\n\ninterface FormValues {\n  text: string\n}\n\ninterface IChatInputProps {\n  sendMessage: (text: string) => void\n}\n\nconst InputMessage: FC<IChatInputProps> = ({ sendMessage }) => {\n  const [form] = Form.useForm()\n\n  const onFinish = async (values: FormValues) => {\n    try {\n      const { text } = values\n      sendMessage(text)\n      form.resetFields()\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(error)\n    }\n  }\n  return (\n    <div className=\"chat-input\">\n      <Form size=\"large\" className=\"input-form\" form={form} onFinish={onFinish}>\n        <Form.Item className=\"input-messaage\" required name=\"text\">\n          <Input autoFocus placeholder=\"Введите сообщение\" />\n        </Form.Item>\n        <Form.Item className=\"send-button\">\n          <Button htmlType=\"submit\" type=\"primary\" icon={<SendOutlined />}>\n            Отправить\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  )\n}\n\nexport default memo(InputMessage)\n","import { io } from 'socket.io-client'\nimport { UserDTO } from './auth'\n\n// TODO: Move to \"Chat service\"\nconst chatService = {\n  getUserChannelsData: async (user: UserDTO) => {\n    // todo fetch from db\n    const userChannelsList = [\n      {\n        id: 1,\n        name: 'Общий чат',\n        type: 'channel'\n      }\n    ]\n    const userContactsList =\n      user.id === 1\n        ? [\n            {\n              id: 2,\n              name: 'Demo',\n              type: 'contact'\n            }\n          ]\n        : [\n            {\n              id: 1,\n              name: 'Rooks',\n              type: 'contact'\n            }\n          ]\n\n    const channels = await userChannelsList.reduce(\n      (acc, { id, name, type }) => ({\n        ...acc,\n        [id]: {\n          name,\n          type,\n          messages: []\n        }\n      }),\n      {}\n    )\n\n    const contacts = await userContactsList.reduce(\n      (acc, { id, name, type }) => ({\n        ...acc,\n        [id]: {\n          name,\n          type,\n          messages: []\n        }\n      }),\n      {}\n    )\n\n    const userChannelsData = { channels, contacts }\n\n    return { userChannelsList, userContactsList, userChannelsData }\n  }\n}\n\nconst WS = {\n  socket: undefined,\n  connect: async (user: UserDTO) => {\n    if (!WS.socket) {\n      WS.socket = io({\n        autoConnect: false\n      })\n\n      WS.socket.auth = { userId: user.id }\n      WS.socket.connect()\n    }\n\n    return WS.subscribeToChannels(user)\n  },\n  subscribeToChannels: async (user: UserDTO) => {\n    const {\n      userChannelsList,\n      userContactsList,\n      userChannelsData\n    } = await chatService.getUserChannelsData(user)\n\n    WS.socket.emit('channels:subscribe', { userChannelsList, userContactsList })\n    return userChannelsData\n  },\n  sendChannelMessage: (payload) => {\n    WS.socket.emit('channel:message:send', payload)\n  },\n  sendContactMessage: (payload) => {\n    WS.socket.emit('contact:message:send', payload)\n  },\n  disconnect: () => {\n    WS.socket.disconnect()\n    WS.socket = undefined\n  }\n}\n\nexport default WS\n","import { useCallback } from 'react'\nimport { nanoid } from 'nanoid'\nimport { UserDTO } from 'src/services/auth'\nimport { Empty } from 'antd'\nimport Messages from './Messages'\nimport InputMessage from './InputMessage'\nimport useShallowEqualSelector from '../../hooks/useShallowEqualSelector'\nimport {\n  sendChannelMessage,\n  sendContactMessage\n} from '../../modules/Chat/actions'\nimport useActions from '../../hooks/useActions'\nimport WS from '../../services/socket'\n\nconst Chat = () => {\n  const user = useShallowEqualSelector((state) => state.auth.user) as UserDTO\n  const [dispatchSendChannelMessage, dispatchSendContactMessage] = useActions(\n    [sendChannelMessage, sendContactMessage],\n    null\n  )\n  const { activeChannel, channels, contacts } = useShallowEqualSelector(\n    (state) => state.chat\n  ) as any\n\n  const onSendMessage = useCallback(\n    (text: string): void => {\n      if (!activeChannel) return\n      if (!text) return\n\n      const id = nanoid()\n      const { id: userId, name } = user\n      const message = { id, text, from: `${name}(${userId})` }\n      const payload = {\n        activeChannelId: activeChannel.id,\n        message\n      }\n\n      if (activeChannel.type === 'channel') {\n        dispatchSendChannelMessage(payload)\n        WS.sendChannelMessage(payload)\n      }\n\n      if (activeChannel.type === 'contact') {\n        dispatchSendContactMessage(payload)\n        WS.sendContactMessage({ from: user.id, to: activeChannel.id, message })\n      }\n    },\n    [\n      activeChannel,\n      dispatchSendChannelMessage,\n      dispatchSendContactMessage,\n      user\n    ]\n  )\n\n  if (!user || !activeChannel || (!channels && !contacts))\n    return (\n      <div className=\"chat-empty\">\n        <Empty description=\"Выберите канал для начала общения!\" />\n      </div>\n    )\n\n  const { type, id } = activeChannel\n  const channelData = type === 'channel' ? channels[id] : contacts[id]\n\n  if (!channelData) return null\n\n  return (\n    <>\n      <Messages channel={channelData} />\n      <InputMessage sendMessage={onSendMessage} />\n    </>\n  )\n}\n\nexport default Chat\n","import axios, { AxiosRequestConfig, AxiosResponse } from 'axios'\n\nexport interface ServerResponse {\n  type: any\n  message?: string\n  data?: any\n  errors?: string[]\n  token?: string\n}\n\nexport interface UserLoginRequestDTO {\n  email: string\n  password: string\n}\n\nexport interface UserCreateRequestDTO {\n  name: string\n  email: string\n  password: string\n}\n\nexport interface UserDTO {\n  id: number\n  name: string\n  email: string\n  role: string\n}\n\nexport interface UserRecoverPasswordRequestDTO {\n  email: string\n}\n\nexport interface CheckSecretRequestDTO {\n  code: string\n  secretType: string\n}\n\nexport interface ChangePasswordRequestDTO {\n  code: string\n  password: string\n}\n\nexport interface UserFetchByTokenRequestDTO {\n  token: string\n}\n\n/** Сообщение при недоступном соединении */\nexport const SERVER_UNAVAILABLE =\n  'Сервер не отвечает или временно недоступен. Попробуйте повторить запрос позднее.'\n\n/** Ключ, по которому в localStorage хранится токен */\nconst AUTH_TOKEN_STORAGE_KEY = 'auth'\n\n/** Отказ в предоставлении ресурса из-за неверного токена */\nexport const AUTH_REJECTION_MESSAGE =\n  'Войдите или зарегистрируйтесь для просмотра данного содержимого.'\n\nexport const makeError = (error: any): ServerResponse => {\n  const {\n    response: { data, status }\n  } = error\n\n  if (typeof data === 'string' && (status === 502 || status === 500)) {\n    return {\n      type: 'error',\n      message: SERVER_UNAVAILABLE\n    }\n  }\n\n  if (data?.message === 'No authorization token was found') {\n    return {\n      type: 'error',\n      message: AUTH_REJECTION_MESSAGE\n    }\n  }\n\n  return data\n}\n\nconst AuthService = {\n  /** Получить список всех пользователей */\n  getAllUsers: async (): Promise<ServerResponse> =>\n    AuthService.send({\n      method: 'get',\n      endpoint: '/api/v1/auth/users'\n    }),\n  /** Регистрация нового пользователя */\n  register: async (payload: UserCreateRequestDTO): Promise<ServerResponse> =>\n    AuthService.send({\n      method: 'put',\n      endpoint: '/api/v1/auth/register',\n      payload\n    }),\n\n  /** Активация пользователя по коду из письма */\n  activate: async (code: string): Promise<ServerResponse> =>\n    AuthService.send({\n      method: 'patch',\n      endpoint: `/api/v1/auth/activate/${code}`\n    }),\n\n  /** Вход пользователя в систему и полуение токена */\n  login: async (payload: UserLoginRequestDTO): Promise<ServerResponse> =>\n    AuthService.send({\n      method: 'post',\n      endpoint: '/api/v1/auth/login',\n      payload\n    }),\n\n  /** Попытка получить объект пользователя по токену */\n  fetchByToken: async (\n    payload: UserFetchByTokenRequestDTO\n  ): Promise<ServerResponse> =>\n    AuthService.send({\n      method: 'post',\n      endpoint: '/api/v1/auth/fetch-by-token',\n      payload\n    }),\n\n  /** Запрос на изменение пароля, отправка письма со ссылкой на email */\n  recover: async (\n    payload: UserRecoverPasswordRequestDTO\n  ): Promise<ServerResponse> =>\n    AuthService.send({\n      method: 'post',\n      endpoint: '/api/v1/auth/recover',\n      payload\n    }),\n\n  /** Проверка секретного ключа для доступа к форме восстановления пароля */\n  checkSecret: async (\n    payload: CheckSecretRequestDTO\n  ): Promise<ServerResponse> =>\n    AuthService.send({\n      method: 'post',\n      endpoint: '/api/v1/auth/check-secret',\n      payload\n    }),\n\n  /** Изменение пароля пользователя */\n  changePassword: async (\n    payload: ChangePasswordRequestDTO\n  ): Promise<ServerResponse> =>\n    AuthService.send({\n      method: 'patch',\n      endpoint: '/api/v1/auth/change-password',\n      payload\n    }),\n\n  getToken: (): string | null => localStorage.getItem(AUTH_TOKEN_STORAGE_KEY),\n\n  setToken: (payload: string): void =>\n    localStorage.setItem(AUTH_TOKEN_STORAGE_KEY, payload),\n\n  removeToken: (): void => localStorage.removeItem(AUTH_TOKEN_STORAGE_KEY),\n\n  send: async ({ method, endpoint, payload = {} }): Promise<ServerResponse> => {\n    try {\n      const response: AxiosResponse = await axios[method](endpoint, payload)\n      return response.data\n    } catch (error) {\n      return makeError(error)\n    }\n  }\n}\n\naxios.interceptors.request.use(\n  (config: AxiosRequestConfig) => {\n    const token = AuthService.getToken()\n\n    if (token) {\n      // eslint-disable-next-line no-param-reassign\n      config.headers = {\n        Authorization: `Bearer ${token}`\n      }\n    }\n\n    return config\n  },\n  (error) => makeError(error)\n)\n\nexport default AuthService\n","import { FC, useState } from 'react'\nimport { Form, Input, Button, Card, Alert, Spin } from 'antd'\nimport { MailOutlined, LockOutlined, LoadingOutlined } from '@ant-design/icons'\nimport { Link, useHistory } from 'react-router-dom'\nimport useActions from '../../hooks/useActions'\nimport authService from '../../services/auth'\nimport { userLoginRequest } from '../../modules/Auth/actions'\n\ninterface FormValues {\n  email: string\n  password: string\n}\n\nconst Login: FC = () => {\n  const emptyMessage = { type: '', message: '' }\n  const [form] = Form.useForm()\n  const [alert, setAlert] = useState(emptyMessage)\n  const [loading, setLoading] = useState(false)\n  const [dispatchUserLoginRequest] = useActions([userLoginRequest], null)\n  const history = useHistory()\n\n  const onFinish = async (values: FormValues) => {\n    try {\n      setAlert(emptyMessage)\n      setLoading(true)\n\n      const { email, password } = values\n      const { type, message, token, data } = await authService.login({\n        email,\n        password\n      })\n\n      if (message) {\n        setAlert({ type, message })\n        setLoading(false)\n        if (type === 'error') return\n      }\n\n      dispatchUserLoginRequest({ data, token })\n      setLoading(false)\n\n      history.push('/')\n    } catch (error) {\n      setAlert(error)\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"flex-center\">\n      <Card className=\"card\" title=\"Вход в систему\">\n        {alert.message && (\n          <Alert\n            className=\"alert\"\n            message={alert.message}\n            type={alert.type as any}\n          />\n        )}\n        <Form\n          form={form}\n          name=\"login\"\n          className=\"login-form\"\n          initialValues={{ remember: true }}\n          onFinish={onFinish}\n        >\n          <Form.Item\n            name=\"email\"\n            rules={[\n              {\n                required: true,\n                type: 'email',\n                min: 4,\n                message: 'Некорректный email'\n              }\n            ]}\n          >\n            <Input prefix={<MailOutlined />} placeholder=\"Email\" size=\"large\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"password\"\n            rules={[{ required: true, min: 6, message: 'Минимум 6 символов' }]}\n          >\n            <Input.Password\n              placeholder=\"Пароль\"\n              prefix={<LockOutlined />}\n              size=\"large\"\n            />\n          </Form.Item>\n\n          <Form.Item>\n            <Form.Item name=\"register\" noStyle>\n              <Link to=\"/auth/register\">Регистрация</Link>\n            </Form.Item>\n\n            <Link className=\"link-recover\" to=\"/auth/recover\">\n              Забыли пароль?\n            </Link>\n          </Form.Item>\n\n          {loading && (\n            <Spin\n              className=\"center\"\n              indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n              delay={500}\n            />\n          )}\n\n          <Button size=\"large\" type=\"primary\" htmlType=\"submit\" block>\n            Войти\n          </Button>\n        </Form>\n      </Card>\n    </div>\n  )\n}\n\nexport default Login\n","import { FC, useState } from 'react'\nimport { Form, Input, Button, Card, Alert, Spin } from 'antd'\nimport {\n  UserOutlined,\n  LockOutlined,\n  MailOutlined,\n  LoadingOutlined\n} from '@ant-design/icons'\nimport authService from '../../services/auth'\n\ninterface FormValues {\n  name: string\n  email: string\n  password: string\n}\n\nconst Register: FC = () => {\n  const emptyMessage = { type: '', message: '' }\n  const [form] = Form.useForm()\n  const [alert, setAlert] = useState(emptyMessage)\n  const [loading, setLoading] = useState(false)\n\n  const onFinish = async (values: FormValues) => {\n    try {\n      setAlert(emptyMessage)\n      setLoading(true)\n\n      const { name, email, password } = values\n      const { type, message } = await authService.register({\n        name,\n        email,\n        password\n      })\n\n      if (message) {\n        setAlert({ type, message })\n        setLoading(false)\n        if (type === 'error') return\n      }\n\n      form.resetFields()\n      setLoading(false)\n    } catch (error) {\n      setAlert(error)\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"flex-center\">\n      <Card className=\"card\" title=\"Регистрация\">\n        {alert.message && (\n          <Alert\n            className=\"alert\"\n            message={alert.message}\n            type={alert.type as any}\n          />\n        )}\n        <Form\n          form={form}\n          name=\"register\"\n          initialValues={{ remember: true }}\n          onFinish={onFinish}\n          validateTrigger=\"onBlur\"\n        >\n          <Form.Item\n            name=\"name\"\n            rules={[\n              {\n                required: true,\n                message:\n                  \"Имя должно содержать минимум 4 символа английского или русского алфавита, допустимы цифры и знаки '- _'\",\n                pattern: /^[a-zA-Zа-яА-ЯёЁ0-9-_\\s]{4,}$/\n              }\n            ]}\n          >\n            <Input placeholder=\"Имя\" size=\"large\" prefix={<UserOutlined />} />\n          </Form.Item>\n\n          <Form.Item\n            name=\"email\"\n            rules={[\n              { required: true, type: 'email', message: 'Некорректный email' }\n            ]}\n          >\n            <Input prefix={<MailOutlined />} placeholder=\"Email\" size=\"large\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"password\"\n            rules={[\n              {\n                required: true,\n                message: 'Введите пароль! Минимум 6 символов.',\n                min: 6\n              }\n            ]}\n          >\n            <Input.Password\n              placeholder=\"Пароль\"\n              prefix={<LockOutlined />}\n              size=\"large\"\n            />\n          </Form.Item>\n\n          <Form.Item\n            name=\"confirm-password\"\n            dependencies={['password']}\n            rules={[\n              {\n                required: true,\n                message: 'Введите подтверждение пароля! Минимум 6 символов.',\n                min: 6\n              },\n              ({ getFieldValue }) => ({\n                validator(_, value) {\n                  if (!value || getFieldValue('password') === value) {\n                    return Promise.resolve()\n                  }\n                  return Promise.reject(new Error('Пароли должны совпадать!'))\n                }\n              })\n            ]}\n          >\n            <Input.Password\n              placeholder=\"Пароль еще раз\"\n              prefix={<LockOutlined />}\n              size=\"large\"\n            />\n          </Form.Item>\n\n          {loading && (\n            <Spin\n              className=\"center\"\n              indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n              delay={500}\n            />\n          )}\n\n          <Button\n            className=\"submit-button\"\n            type=\"primary\"\n            htmlType=\"submit\"\n            size=\"large\"\n            block\n            disabled={loading}\n          >\n            Зарегистрироваться\n          </Button>\n        </Form>\n      </Card>\n    </div>\n  )\n}\n\nexport default Register\n","import { FC, useState } from 'react'\nimport { Form, Input, Button, Card, Alert, Spin } from 'antd'\nimport { MailOutlined, LoadingOutlined } from '@ant-design/icons'\nimport authService from '../../services/auth'\n\ninterface FormValues {\n  email: string\n}\n\nconst Recover: FC = () => {\n  const emptyMessage = { type: '', message: '' }\n  const [form] = Form.useForm()\n  const [alert, setAlert] = useState(emptyMessage)\n  const [loading, setLoading] = useState(false)\n\n  const onFinish = async (values: FormValues) => {\n    try {\n      setAlert(emptyMessage)\n      setLoading(true)\n\n      const { email } = values\n      const { type, message } = await authService.recover({\n        email\n      })\n\n      if (message) {\n        setAlert({ type, message })\n        setLoading(false)\n        if (type === 'error') return\n      }\n\n      form.resetFields()\n      setLoading(false)\n    } catch (error) {\n      setAlert(error)\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"flex-center\">\n      <Card className=\"card\" title=\"Восстановление пароля\">\n        {alert.message && (\n          <Alert\n            className=\"alert\"\n            message={alert.message}\n            type={alert.type as any}\n          />\n        )}\n        {alert.type !== 'success' && (\n          <>\n            <p>\n              Укажите email, указанный при регистрации и мы вышлем на него\n              ссылку для восстановления пароля.\n            </p>\n            <Form\n              form={form}\n              name=\"recover\"\n              className=\"login-form\"\n              initialValues={{ remember: true }}\n              onFinish={onFinish}\n              validateTrigger=\"onBlur\"\n            >\n              <Form.Item\n                name=\"email\"\n                rules={[\n                  {\n                    required: true,\n                    type: 'email',\n                    message: 'Некорректный email!'\n                  }\n                ]}\n              >\n                <Input\n                  prefix={<MailOutlined />}\n                  placeholder=\"Email\"\n                  size=\"large\"\n                />\n              </Form.Item>\n\n              {loading && (\n                <Spin\n                  className=\"center\"\n                  indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n                  delay={500}\n                />\n              )}\n\n              <Button\n                size=\"large\"\n                type=\"primary\"\n                htmlType=\"submit\"\n                block\n                disabled={loading}\n              >\n                Восстановить пароль\n              </Button>\n            </Form>\n          </>\n        )}\n      </Card>\n    </div>\n  )\n}\n\nexport default Recover\n","import { FC, useState, useEffect } from 'react'\nimport { useParams, Link } from 'react-router-dom'\nimport { Form, Input, Button, Card, Alert } from 'antd'\nimport { LockOutlined } from '@ant-design/icons'\nimport authService from '../../services/auth'\n\ninterface ChangePasswordParams {\n  code?: string\n}\n\ninterface FormValues {\n  password: string\n  confirmPassword: string\n}\n\nconst ChangePassword: FC = () => {\n  const { code }: ChangePasswordParams = useParams()\n  const emptyMessage = { type: '', message: '' }\n  const [alert, setAlert] = useState(emptyMessage)\n  const [secretError, setSecretError] = useState(false)\n  const [changeSuccess, setChangeSuccess] = useState(false)\n  const [loading, setLoading] = useState(false)\n\n  useEffect(() => {\n    const checkSecret = async () => {\n      const { type, message } = await authService.checkSecret({\n        code,\n        secretType: 'RECOVER_PASSWORD'\n      })\n      if (type === 'error') {\n        setAlert({ type, message })\n        setSecretError(true)\n      }\n    }\n\n    if (\n      code.match(\n        /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i\n      )\n    ) {\n      checkSecret()\n    } else {\n      setAlert({ type: 'error', message: 'Неверный секретный код!' })\n      setSecretError(true)\n    }\n  }, [code])\n\n  const onFinish = async (values: FormValues) => {\n    try {\n      setAlert(emptyMessage)\n      setLoading(true)\n\n      const { password } = values\n      const { type, message } = await authService.changePassword({\n        code,\n        password\n      })\n\n      if (message) {\n        setAlert({ type, message })\n        setLoading(false)\n        if (type === 'error') return\n      }\n\n      setChangeSuccess(true)\n      setLoading(false)\n    } catch (error) {\n      setAlert(error)\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"flex-center\">\n      <Card className=\"card\" title=\"Изменение пароля\">\n        {alert.message && (\n          <Alert\n            className=\"alert\"\n            message={alert.message}\n            type={alert.type as any}\n          />\n        )}\n\n        {changeSuccess && (\n          <p>\n            Теперь Вы можете <Link to=\"/auth/login\">Войти</Link> в приложение\n          </p>\n        )}\n\n        {!secretError && !changeSuccess && (\n          <>\n            <p>Придумайте новый пароль</p>\n            <Form\n              name=\"change-password-request\"\n              initialValues={{ remember: true }}\n              onFinish={onFinish}\n            >\n              <Form.Item\n                name=\"password\"\n                rules={[{ required: true, message: 'Введите пароль!' }]}\n              >\n                <Input.Password\n                  placeholder=\"Пароль\"\n                  prefix={<LockOutlined />}\n                  size=\"large\"\n                />\n              </Form.Item>\n\n              <Form.Item\n                name=\"confirmPassword\"\n                dependencies={['password']}\n                rules={[\n                  { required: true, message: 'Введите подтверждение пароля!' },\n                  ({ getFieldValue }) => ({\n                    validator(_, value) {\n                      if (!value || getFieldValue('password') === value) {\n                        return Promise.resolve()\n                      }\n                      return Promise.reject(\n                        new Error('Пароли должны совпадать!')\n                      )\n                    }\n                  })\n                ]}\n              >\n                <Input.Password\n                  placeholder=\"Пароль еще раз\"\n                  prefix={<LockOutlined />}\n                  size=\"large\"\n                />\n              </Form.Item>\n\n              <Button\n                className=\"submit-button\"\n                type=\"primary\"\n                htmlType=\"submit\"\n                size=\"large\"\n                block\n                disabled={loading}\n              >\n                Изменить пароль\n              </Button>\n            </Form>\n          </>\n        )}\n      </Card>\n    </div>\n  )\n}\n\nexport default ChangePassword\n","import { FC, useState, useEffect } from 'react'\nimport { Card, Alert } from 'antd'\nimport { Link, useParams } from 'react-router-dom'\nimport authService from '../../services/auth'\n\ninterface ActivationParams {\n  code?: string\n}\n\nconst Activation: FC = () => {\n  const { code }: ActivationParams = useParams()\n  const emptyMessage = { type: '', message: '' }\n  const [alert, setAlert] = useState(emptyMessage)\n\n  useEffect(() => {\n    const activateUser = async () => {\n      const { type, message } = await authService.activate(code)\n      if (message) {\n        setAlert({ type, message })\n      }\n    }\n    activateUser()\n  }, [code])\n\n  return (\n    <div className=\"flex-center\">\n      <Card className=\"card\" title=\"Активация нового пользователя\">\n        {alert.message && (\n          <Alert\n            className=\"alert\"\n            message={alert.message}\n            type={alert.type as any}\n          />\n        )}\n        <Link className=\"login-link\" to=\"/auth/login\">\n          Вход\n        </Link>\n        <Link className=\"link-recover\" to=\"/auth/recover\">\n          Восстановить пароль\n        </Link>\n      </Card>\n    </div>\n  )\n}\n\nexport default Activation\n","import { FC } from 'react'\r\nimport { Route, Redirect, RouteProps } from 'react-router-dom'\r\nimport useShallowEqualSelector from '../hooks/useShallowEqualSelector'\r\nimport { RootState } from '../modules'\r\n\r\ninterface PrivateRouteProps extends RouteProps {\r\n  component?: any\r\n  children?: any\r\n}\r\n\r\nconst PrivateRoute: FC<PrivateRouteProps> = ({\r\n  component: Component,\r\n  children,\r\n  ...rest\r\n}) => {\r\n  const user = useShallowEqualSelector((state: RootState) => state.auth.user)\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(routeProps) => {\r\n        if (user === null) return null\r\n\r\n        if (user === false) {\r\n          return (\r\n            <Redirect\r\n              to={{\r\n                pathname: '/auth/login',\r\n                state: { from: routeProps.location }\r\n              }}\r\n            />\r\n          )\r\n        }\r\n\r\n        if (Component) {\r\n          return <Component {...routeProps} />\r\n        }\r\n\r\n        return children\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nPrivateRoute.defaultProps = {\r\n  component: undefined\r\n}\r\n\r\nexport default PrivateRoute\r\n","import { FC } from 'react'\nimport { Switch, Route, Redirect } from 'react-router-dom'\n\nimport Chat from '../Chat'\nimport Login from '../Login'\nimport Register from '../Register'\nimport Recover from '../Recover'\nimport ChangePassword from '../ChangePassword'\nimport Activation from '../Activation'\nimport PrivateRoute from '../../containers/PrivateRoute'\n\nconst Routes: FC = () => (\n  <Switch>\n    <PrivateRoute exact path=\"/\" component={Chat} />\n    <Route path=\"/auth/login\" component={Login} />\n    <Route path=\"/auth/register\" component={Register} />\n    <Route path=\"/auth/activation/:code\" component={Activation} />\n    <Route path=\"/auth/recover\" component={Recover} />\n    <Route path=\"/auth/change-password/:code\" component={ChangePassword} />\n    <Route path=\"*\">\n      <Redirect to=\"/auth/login\" />\n    </Route>\n  </Switch>\n)\n\nexport default Routes\n","import { FC, useState, useEffect, useRef } from 'react'\nimport { UserDTO } from 'src/services/auth'\nimport { Layout } from 'antd'\nimport Header from './Header'\nimport Sidebar from './Sidebar'\nimport Routes from '../Routes'\nimport {\n  sendChannelMessage,\n  sendContactMessage\n} from '../../modules/Chat/actions'\nimport useShallowEqualSelector from '../../hooks/useShallowEqualSelector'\nimport useActions from '../../hooks/useActions'\nimport WS from '../../services/socket'\n\nconst { Content } = Layout\n\nconst App: FC = () => {\n  const [needRecreateRef, setNeedRecreateRef] = useState(0)\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false)\n  // const [onlineUsers, setOnlineUsers] = useState([])\n  const SR = useRef(null)\n  const [dispatchSendChannelMessage, dispatchSendContactMessage] = useActions(\n    [sendChannelMessage, sendContactMessage],\n    null\n  )\n  const activeChannel = useShallowEqualSelector(\n    (state) => state.chat.activeChannel\n  ) as any\n  const user = useShallowEqualSelector((state) => state.auth.user) as UserDTO\n\n  const onSidebarToggle = (isCollapsed: boolean) => {\n    setSidebarCollapsed(isCollapsed)\n  }\n\n  useEffect(() => {\n    if (!WS.socket) return null\n    SR.current = WS.socket\n\n    // Correct reconnection after server emits disconnected event\n    WS.socket.on('disconnect', (reason: string) => {\n      if (reason === 'transport error' || reason === 'ping timeout') {\n        if (!user) return\n        WS.disconnect()\n        WS.connect(user)\n        setNeedRecreateRef((state) => state + 1)\n      }\n    })\n\n    WS.socket.on('users:connected', () => {\n      // users.forEach((user) => {\n      // user.self = user.userId === WS.socket.id\n      // initReactiveProperties(user)\n      // dispatchUpdateUsersOnline(users)\n      // })\n      // put the current user first, and then sort by username\n      // setOnlineUsers(\n      //   users.sort((a, b) => {\n      //     if (a.self) return -1\n      //     if (b.self) return 1\n      //     if (a.username < b.username) return -1\n      //     return a.username > b.username ? 1 : 0\n      //   })\n      // )\n      // dispatchUpdateUsersOnline(users)\n      // eslint-disable-next-line no-console\n      // console.log(onlineUsers)\n    })\n\n    SR.current.on(\n      'channel:message:broadcast',\n      ({ activeChannelId: channelId, message }) => {\n        dispatchSendChannelMessage({\n          activeChannelId: channelId,\n          message\n        })\n      }\n    )\n\n    SR.current.on('contact:message:private', ({ message, from }) => {\n      // eslint-disable-next-line no-console\n      console.log('contact:message:private', message, `from: ${from}`)\n\n      dispatchSendContactMessage({\n        activeChannelId: from,\n        message\n      })\n    })\n\n    return () => {\n      SR.current.off('channel:message:broadcast')\n      SR.current.off('contact:message:private')\n    }\n  }, [\n    user,\n    activeChannel,\n    dispatchSendChannelMessage,\n    dispatchSendContactMessage,\n    needRecreateRef\n  ])\n\n  return (\n    <Layout className=\"wrap-layout\">\n      <Sidebar\n        sidebarCollapsed={sidebarCollapsed}\n        onSidebarToggle={onSidebarToggle}\n      />\n      <Layout className=\"site-layout\">\n        <Header\n          sidebarCollapsed={sidebarCollapsed}\n          onSidebarToggle={onSidebarToggle}\n        />\n        <Content className=\"content\">\n          <Routes />\n        </Content>\n      </Layout>\n    </Layout>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import { takeLatest, put, call, fork } from 'redux-saga/effects'\r\nimport {\r\n  userLoginRequest,\r\n  userLogoutRequest,\r\n  userFetchSuccess\r\n} from './actions'\r\nimport {\r\n  initChannelsData,\r\n  initContactsData,\r\n  setActiveChannel\r\n} from '../Chat/actions'\r\nimport authService from '../../services/auth'\r\nimport WS from '../../services/socket'\r\n\r\n/** login success */\r\nexport function* userLoginRequestFlow({ payload: { data, token } }) {\r\n  yield put(userFetchSuccess(data))\r\n  yield call([authService, authService.setToken], token)\r\n  const { channels, contacts } = yield call([WS, WS.connect], data)\r\n  yield put(initChannelsData(channels))\r\n  yield put(initContactsData(contacts))\r\n}\r\nexport function* userLoginWatcher() {\r\n  yield takeLatest(userLoginRequest, userLoginRequestFlow)\r\n}\r\n\r\n/** logout */\r\nexport function* userLogoutRequestFlow() {\r\n  yield call([authService, authService.removeToken])\r\n  yield put(userFetchSuccess(false))\r\n  yield put(setActiveChannel(null))\r\n  yield call([WS, WS.disconnect])\r\n}\r\nexport function* userLogoutWatcher() {\r\n  yield takeLatest(userLogoutRequest, userLogoutRequestFlow)\r\n}\r\n\r\nexport default function* generator() {\r\n  yield fork(userLoginWatcher)\r\n  yield fork(userLogoutWatcher)\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport { handleActions } from 'redux-actions'\r\nimport { UserDTO } from '../../services/auth'\r\nimport { userFetchSuccess, userFetchFailure } from './actions'\r\n\r\nexport interface IAuthState {\r\n  user: UserDTO\r\n}\r\n\r\nexport const initialState = {\r\n  user: null\r\n}\r\n\r\nconst user = handleActions(\r\n  {\r\n    [userFetchSuccess]: (_state, action) => action.payload,\r\n    [userFetchFailure]: () => false\r\n  },\r\n  null\r\n)\r\n\r\nexport default combineReducers<IAuthState>({\r\n  user\r\n})\r\n","import { combineReducers } from 'redux'\r\nimport { handleActions } from 'redux-actions'\r\nimport {\r\n  setActiveChannel,\r\n  initChannelsData,\r\n  initContactsData,\r\n  sendChannelMessage,\r\n  sendContactMessage\r\n} from './actions'\r\n\r\nexport interface IActiveChannel {\r\n  id: number | null\r\n  name: string\r\n  type: string\r\n}\r\n\r\nexport interface IChatState {\r\n  activeChannel: IActiveChannel\r\n  channels: Object\r\n  contacts: Object\r\n}\r\n\r\nexport const initialState: IChatState = {\r\n  activeChannel: null,\r\n  channels: null,\r\n  contacts: null\r\n}\r\n\r\nconst activeChannel = handleActions(\r\n  {\r\n    [setActiveChannel]: (_state, action) => action.payload\r\n  },\r\n  null\r\n)\r\n\r\nconst addMessage = (state, action) => ({\r\n  ...state,\r\n  [action.payload.activeChannelId]: {\r\n    ...state[action.payload.activeChannelId],\r\n    messages: [\r\n      ...state[action.payload.activeChannelId].messages,\r\n      action.payload.message\r\n    ]\r\n  }\r\n})\r\n\r\nconst channels = handleActions(\r\n  {\r\n    [initChannelsData]: (_state, action) => action.payload,\r\n    [sendChannelMessage]: addMessage\r\n  },\r\n  null\r\n)\r\n\r\nconst contacts = handleActions(\r\n  {\r\n    [initContactsData]: (_state, action) => action.payload,\r\n    [sendContactMessage]: addMessage\r\n  },\r\n  null\r\n)\r\n\r\nexport default combineReducers<IChatState>({\r\n  activeChannel,\r\n  channels,\r\n  contacts\r\n})\r\n","import { call, put } from 'redux-saga/effects'\nimport { userFetchSuccess, userFetchFailure } from './Auth/actions'\nimport authService from '../services/auth'\nimport WS from '../services/socket'\nimport { initChannelsData, initContactsData } from './Chat/actions'\n\n/** Launch saga once when on app start */\nconst launchSaga = function* launchSaga() {\n  try {\n    const token = yield call([authService, authService.getToken])\n\n    if (!token) {\n      yield put(userFetchFailure())\n      return\n    }\n    const { data } = yield call([authService, authService.fetchByToken], {\n      token\n    })\n\n    if (!data) {\n      yield call([authService, authService.removeToken])\n      yield put(userFetchFailure())\n      return\n    }\n\n    yield put(userFetchSuccess(data))\n    const { channels, contacts } = yield call([WS, WS.connect], data)\n    yield put(initChannelsData(channels))\n    yield put(initContactsData(contacts))\n  } catch (error) {\n    yield call([authService, authService.removeToken])\n    yield put(userFetchFailure(error))\n  }\n}\n\nexport default launchSaga\n","import { combineReducers } from 'redux'\nimport { fork } from 'redux-saga/effects'\nimport authSagas from './Auth/sagas'\nimport auth, { IAuthState } from './Auth/reducer'\nimport chat, { IChatState } from './Chat/reducer'\nimport launchSaga from './launchSaga'\n\n// Root state interface\nexport interface RootState {\n  auth: IAuthState\n  chat: IChatState\n}\n\nexport const initialState = {\n  auth: { user: null }\n}\n\n// Root reducer\nexport default combineReducers({ auth, chat })\n\n// Root saga\nexport function* rootSaga() {\n  yield fork(authSagas)\n  yield fork(launchSaga)\n}\n","import { createStore, compose, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport createSagaMiddleware from 'redux-saga'\nimport rootReducer, { rootSaga } from '.'\n\nconst createAppStore = () => {\n  const sagaMiddleware = createSagaMiddleware()\n  const store = createStore(\n    rootReducer,\n    compose(composeWithDevTools(applyMiddleware(sagaMiddleware)))\n  )\n\n  sagaMiddleware.run(rootSaga)\n  return store\n}\n\nexport default createAppStore\n","import { StrictMode } from 'react'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport { render } from 'react-dom'\nimport App from './components/App'\nimport './index.scss'\nimport reportWebVitals from './reportWebVitals'\nimport createAppStore from './modules/store'\n\nconst store = createAppStore()\n\nrender(\n  <StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}