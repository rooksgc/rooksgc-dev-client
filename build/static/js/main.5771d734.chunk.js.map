{"version":3,"sources":["hooks/useShallowEqualSelector.ts","containers/Private.tsx","modules/Chat/actions.ts","hooks/useActions.ts","services/api.ts","services/channel.ts","services/socket.ts","components/MainMenu/index.tsx","containers/ModalWindow.tsx","modules/Auth/actions.ts","services/auth.ts","components/PhotoUploader/index.tsx","components/UserProfile/index.tsx","components/UserMenu/index.tsx","components/App/Header/index.tsx","components/App/Sidebar/CreateChannel/index.tsx","components/App/Sidebar/SidebarMenu/index.tsx","components/App/Sidebar/index.tsx","hooks/useEscape.ts","containers/PrivateRoute.tsx","components/Chat/Messages/index.tsx","components/Chat/InputMessage/index.tsx","components/Chat/index.tsx","components/Login/index.tsx","components/Register/index.tsx","components/Recover/index.tsx","components/ChangePassword/index.tsx","components/Activation/index.tsx","components/Routes/index.tsx","components/App/index.tsx","modules/Auth/sagas.ts","modules/Auth/reducer.ts","modules/Chat/reducer.ts","modules/launchSaga.ts","modules/index.ts","modules/store.ts","reportWebVitals.ts","index.tsx"],"names":["useShallowEqualSelector","selector","useSelector","shallowEqual","PrivateContainer","children","state","auth","user","setActiveChannel","createAction","addChannel","initChannelsData","initContactsData","sendChannelMessage","sendContactMessage","useActions","actions","deps","dispatch","useDispatch","useMemo","Array","isArray","map","a","bindActionCreators","AUTH_TOKEN_STORAGE_KEY","makeError","error","response","data","status","message","type","apiService","getToken","localStorage","getItem","send","method","endpoint","payload","axios","interceptors","request","use","config","token","headers","Authorization","channelService","createChannel","api","populateUserChannels","getUserChannels","channelsData","channels","userChannelsData","userChannelsList","userContactsList","reduce","acc","id","ownerId","name","members","photo","messages","contacts","console","log","WS","socket","undefined","connect","io","autoConnect","userId","subscribeToChannels","emit","subscribeToChannel","channelId","inviteToChannel","disconnect","menuItems","key","label","path","icon","PieChartOutlined","MainMenu","location","useLocation","history","useHistory","find","item","pathname","mode","selectedKeys","onClick","clicked","_item","push","Item","ModalWindow","props","title","visible","onOk","onCancel","afterClose","destroyOnClose","footer","style","centered","userLoginRequest","userLogoutRequest","userFetchSuccess","userFetchFailure","userUpdatePhoto","authService","getAllUsers","register","activate","code","login","fetchByToken","recover","checkSecret","changePassword","changePhoto","setToken","setItem","removeToken","removeItem","beforeUpload","file","isJpgOrPng","isLt2M","size","getBase64","src","url","Promise","resolve","reader","FileReader","readAsDataURL","originFileObj","onload","event","img","Image","target","result","el","elem","document","createElement","scaleFactor","width","height","ctx","getContext","drawImage","srcEncoded","canvas","toDataURL","onPreview","image","window","open","write","outerHTML","PhotoUploader","preloadedPhoto","onChangePhoto","onRemovePhoto","initialPhoto","useState","fileList","setFileList","onChange","newFileList","imageUrl","className","rotate","shape","modalTitle","modalOk","modalCancel","listType","customRequest","options","onSuccess","length","UserProfile","loading","setLoading","setPhoto","email","dispatchUserUpdatePhoto","onSaveChanges","indicator","LoadingOutlined","fontSize","spin","delay","disabled","UserMenu","userProfileModalVisibility","setUserProfileModalVisibility","dispatchUserLogoutRequest","menu","ProfileOutlined","Divider","LogoutOutlined","overlay","trigger","UserOutlined","Text","Typography","AntHeader","Layout","Header","activeChannel","chat","onSidebarToggle","sidebarCollapsed","onTriggerClick","menuTrigger","MenuUnfoldOutlined","padding","MenuFoldOutlined","activeChannelLabel","CreateChannel","Form","useForm","form","dispatchActiveChannel","dispatchAddChannel","onFinish","values","description","serverMessage","success","activeChannelPayload","layout","rules","required","max","placeholder","htmlType","SidebarMenu","createChannelModalVisibility","setCreateChannelModalVisibility","UsergroupAddOutlined","UserAddOutlined","ContactsOutlined","SettingOutlined","MenuOutlined","Sider","renderTrackVertical","ownProps","backgroundColor","right","bottom","top","borderRadius","renderThumbVertical","boxShadow","Sidebar","onEscape","sidebarLocked","setSidebarLocked","useEffect","handleEsc","addEventListener","removeEventListener","onClickMenu","split","channelType","intChannelId","parseInt","selectedMenuKey","collapsed","collapsedWidth","theme","overflow","LockOutlined","UnlockOutlined","Object","keys","hideTracksWhenNotNeeded","autoHide","autoHideTimeout","entries","channel","MessageFilled","color","PrivateRoute","Component","component","rest","render","routeProps","to","from","defaultProps","Messages","text","InputMessage","memo","sendMessage","resetFields","autoFocus","SendOutlined","Chat","dispatchSendChannelMessage","dispatchSendContactMessage","onSendMessage","useCallback","nanoid","activeChannelId","channelData","Login","emptyMessage","alert","setAlert","dispatchUserLoginRequest","password","initialValues","remember","min","prefix","MailOutlined","Password","noStyle","block","Register","validateTrigger","pattern","dependencies","getFieldValue","validator","_","value","reject","Error","Recover","ChangePassword","useParams","secretError","setSecretError","changeSuccess","setChangeSuccess","secretType","match","Activation","activateUser","Routes","exact","Content","App","needRecreateRef","setNeedRecreateRef","setSidebarCollapsed","SR","useRef","isCollapsed","current","on","reason","off","userLoginRequestFlow","userLoginWatcher","userLogoutRequestFlow","userLogoutWatcher","put","call","takeLatest","authSagas","generator","fork","handleActions","_state","action","authReducer","combineReducers","addMessage","chatReducer","launchSaga","rootSaga","rootReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","sagaMiddleware","createSagaMiddleware","createStore","compose","composeWithDevTools","applyMiddleware","run","createAppStore","getElementById"],"mappings":"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","file":"static/js/main.5771d734.chunk.js","sourcesContent":["import { useSelector, shallowEqual } from 'react-redux'\nimport { IRootState } from 'modules'\n\nconst useShallowEqualSelector = (selector: any) =>\n  useSelector<IRootState>(selector, shallowEqual)\n\nexport { useShallowEqualSelector }\n","import { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\n\nconst PrivateContainer = ({ children }) => {\n  const user = useShallowEqualSelector((state) => state.auth.user)\n  if (!user) return null\n\n  return children\n}\n\nexport { PrivateContainer }\n","import { createAction } from 'redux-actions'\r\n\r\n/** Установить активный канал чата (id, label) */\r\nexport const setActiveChannel: any = createAction('CHAT/SET_ACTIVE_CHANNEL')\r\n\r\n/** Добавление нового канала */\r\nexport const addChannel: any = createAction('CHAT/ADD_CHANNEL')\r\n\r\n/** Начальное состояние каналов на момент захода пользователя */\r\nexport const initChannelsData: any = createAction('CHAT/INIT_CHANNELS_DATA')\r\n/** Начальное состояние контактов на момент захода пользователя */\r\nexport const initContactsData: any = createAction('CHAT/INIT_CONTACTS_DATA')\r\n/** Отправить сообщение в чат канала */\r\nexport const sendChannelMessage: any = createAction('CHAT/SEND_CHANNEL_MESSAGE')\r\n/** Отправить приватное сообщение пользователю */\r\nexport const sendContactMessage: any = createAction('CHAT/SEND_CONTACT_MESSAGE')\r\n","import { bindActionCreators } from 'redux'\nimport { useDispatch } from 'react-redux'\nimport { useMemo } from 'react'\n\nconst useActions = (actions, deps) => {\n  const dispatch = useDispatch()\n\n  return useMemo(\n    () => {\n      if (Array.isArray(actions)) {\n        return actions.map((a) => bindActionCreators(a, dispatch))\n      }\n      return bindActionCreators(actions, dispatch)\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    deps ? [dispatch, ...deps] : [dispatch]\n  )\n}\n\nexport { useActions }\n","import axios, { AxiosRequestConfig, AxiosResponse } from 'axios'\n\nexport interface IServerResponse {\n  type: any\n  message?: string\n  data?: any\n  errors?: string[]\n  token?: string\n}\n\n/** Сообщение при недоступном соединении */\nexport const SERVER_UNAVAILABLE =\n  'Сервер не отвечает или временно недоступен. Попробуйте повторить запрос позднее.'\n\n/** Ключ, по которому в localStorage хранится токен */\nexport const AUTH_TOKEN_STORAGE_KEY = 'auth'\n\n/** Отказ в предоставлении ресурса из-за неверного токена */\nexport const AUTH_REJECTION_MESSAGE =\n  'Войдите или зарегистрируйтесь для просмотра данного содержимого.'\n\nexport const makeError = (error: any): IServerResponse => {\n  const {\n    response: { data, status }\n  } = error\n\n  if (typeof data === 'string' && (status === 502 || status === 500)) {\n    return {\n      type: 'error',\n      message: SERVER_UNAVAILABLE\n    }\n  }\n\n  if (data?.message === 'No authorization token was found') {\n    return {\n      type: 'error',\n      message: AUTH_REJECTION_MESSAGE\n    }\n  }\n\n  return data\n}\n\nconst apiService = {\n  getToken: (): string | null => localStorage.getItem(AUTH_TOKEN_STORAGE_KEY),\n\n  send: async ({\n    method,\n    endpoint,\n    payload = {}\n  }): Promise<IServerResponse> => {\n    try {\n      const response: AxiosResponse = await axios[method](endpoint, payload)\n      return response.data\n    } catch (error) {\n      return makeError(error)\n    }\n  }\n}\n\naxios.interceptors.request.use(\n  (config: AxiosRequestConfig) => {\n    const token = apiService.getToken()\n\n    if (token) {\n      // eslint-disable-next-line no-param-reassign\n      config.headers = {\n        Authorization: `Bearer ${token}`\n      }\n    }\n\n    return config\n  },\n  (error) => makeError(error)\n)\n\nexport { apiService }\n","import { apiService as api, IServerResponse } from './api'\n\ninterface ICreateChannelData {\n  name: string\n  description?: string\n  photo?: string\n  ownerId: number\n}\n\ninterface IPopulateUserChannelsData {\n  channels: string\n}\n\nconst channelService = {\n  /** Создать новый канал */\n  createChannel: async (\n    payload: ICreateChannelData\n  ): Promise<IServerResponse> =>\n    api.send({\n      method: 'put',\n      endpoint: '/api/v1/chat/channel',\n      payload\n    }),\n\n  /** Редактировать канал */\n  // updateChannel: async (payload: any): Promise<ServerResponse> =>\n  //   api.send({\n  //     method: 'patch',\n  //     endpoint: '/api/v1/chat/channel',\n  //     payload\n  //   }),\n\n  // /** Удалить канал */\n  // removeChannel: async (payload: any): Promise<ServerResponse> =>\n  //   api.send({\n  //     method: 'delete',\n  //     endpoint: '/api/v1/chat/channel',\n  //     payload\n  //   }),\n\n  /** Развернуть информацию о списке каналов пользователя */\n  populateUserChannels: async (\n    payload: IPopulateUserChannelsData\n  ): Promise<IServerResponse> =>\n    api.send({\n      method: 'post',\n      endpoint: `/api/v1/chat/channels`,\n      payload\n    }),\n\n  /** Получить отформатированный список каналов */\n  getUserChannels: async (channelsData: string): Promise<any> => {\n    try {\n      const userChannelsData = await channelService.populateUserChannels({\n        channels: channelsData\n      })\n      const userChannelsList = userChannelsData.data\n      // todo populate Users\n      const userContactsList = []\n\n      const channels = userChannelsList.reduce(\n        (acc, { id, ownerId, name, members, photo }) => ({\n          ...acc,\n          [id]: {\n            ownerId,\n            name,\n            members,\n            type: 'channel',\n            photo,\n            messages: []\n          }\n        }),\n        {}\n      )\n\n      const contacts = userContactsList.reduce(\n        (acc, { id, name, type }) => ({\n          ...acc,\n          [id]: {\n            name,\n            type,\n            messages: []\n          }\n        }),\n        {}\n      )\n\n      const data = { channels, contacts }\n      return { userChannelsList, userContactsList, data }\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(error)\n    }\n\n    return null\n  }\n}\n\nexport { channelService }\n","import { io } from 'socket.io-client'\nimport { channelService } from 'services/channel'\nimport { UserDTO } from './auth'\n\nconst WS = {\n  socket: undefined,\n  connect: async (user: UserDTO) => {\n    if (!WS.socket) {\n      WS.socket = io('/chat', {\n        autoConnect: false\n      })\n\n      WS.socket.auth = { userId: user.id }\n      WS.socket.connect()\n    }\n\n    return WS.subscribeToChannels(user)\n  },\n  subscribeToChannels: async (user: UserDTO) => {\n    const {\n      userChannelsList,\n      userContactsList,\n      data\n    } = await channelService.getUserChannels(user.channels)\n\n    WS.socket.emit('channels:subscribe', { userChannelsList, userContactsList })\n    return data\n  },\n  subscribeToChannel: async (channelId: number) => {\n    WS.socket.emit('channel:subscribe', channelId)\n  },\n  inviteToChannel: async (userId: number, channelId: number) => {\n    WS.socket.emit('channel:invite', { userId, channelId })\n  },\n  sendChannelMessage: (payload) => {\n    WS.socket.emit('channel:message:send', payload)\n  },\n  sendContactMessage: (payload) => {\n    WS.socket.emit('contact:message:send', payload)\n  },\n  disconnect: () => {\n    WS.socket.disconnect()\n    WS.socket = undefined\n  }\n}\n\nexport { WS }\n","import { FC } from 'react'\nimport { useLocation, useHistory } from 'react-router-dom'\nimport { Menu } from 'antd'\nimport { PieChartOutlined } from '@ant-design/icons'\n\nconst menuItems = [\n  {\n    key: 'login',\n    label: 'Войти',\n    path: '/auth/login',\n    icon: <PieChartOutlined />\n  },\n  {\n    key: 'register',\n    label: 'Регистрация',\n    path: '/auth/register',\n    icon: <PieChartOutlined />\n  }\n]\n\nconst MainMenu: FC = () => {\n  const location = useLocation()\n  const history = useHistory()\n\n  const key = menuItems.find((item) => location.pathname === item.path)?.key\n  if (!key) return null\n\n  const onClickMenu = (item) => {\n    if (item.key === key) return\n    const clicked = menuItems.find((_item) => _item.key === item.key)\n    history.push(clicked.path)\n  }\n\n  return (\n    <Menu mode=\"horizontal\" selectedKeys={[key]} onClick={onClickMenu}>\n      {menuItems.map((item) => (\n        <Menu.Item key={item.key} icon={item.icon}>\n          {item.label}\n        </Menu.Item>\n      ))}\n    </Menu>\n  )\n}\n\nexport { MainMenu }\n","import { FC, Component, ReactElement } from 'react'\nimport { Modal } from 'antd'\n\ninterface IModalWindowProps {\n  title?: string\n  visible?: boolean\n  centered?: boolean\n  onOk?: () => any | null\n  onCancel?: () => any | null\n  afterClose?: () => any | null\n  destroyOnClose?: boolean\n  footer?: Component[] | FC[] | ReactElement[] | null\n  style?: object | null\n}\n\nconst ModalWindow: FC<IModalWindowProps> = (props) => {\n  const {\n    children,\n    title = '',\n    visible = false,\n    onOk = null,\n    onCancel = null,\n    afterClose = null,\n    destroyOnClose = true,\n    footer = null,\n    style = null\n  } = props\n\n  return (\n    <Modal\n      centered\n      title={title}\n      visible={visible}\n      onOk={onOk}\n      onCancel={onCancel}\n      afterClose={afterClose}\n      destroyOnClose={destroyOnClose}\n      footer={footer}\n      style={style}\n    >\n      {children}\n    </Modal>\n  )\n}\n\nexport { ModalWindow }\n","import { createAction } from 'redux-actions'\r\n\r\n/** Записать токен пользователя в стор */\r\nexport const userLoginRequest: any = createAction('AUTH/USER_LOGIN_REQUEST')\r\n\r\n/** Выход пользователя из системы (logout) */\r\nexport const userLogoutRequest: any = createAction('AUTH/USER_LOGOUT_REQUEST')\r\n\r\n/** Записать объект пользователя в стор */\r\nexport const userFetchSuccess: any = createAction('AUTH/USER_FETCH_SUCCESS')\r\n\r\n/** Ошибка получения объекта пользователя */\r\nexport const userFetchFailure: any = createAction('AUTH/USER_FETCH_FAILURE')\r\n\r\n/** Обновление объекта пользователя (фото) */\r\nexport const userUpdatePhoto: any = createAction('AUTH/USER_UPDATE_PHOTO')\r\n","import {\n  apiService as api,\n  AUTH_TOKEN_STORAGE_KEY,\n  IServerResponse\n} from './api'\n\nexport interface UserLoginRequestDTO {\n  email: string\n  password: string\n}\n\nexport interface UserCreateRequestDTO {\n  name: string\n  email: string\n  password: string\n}\n\nexport interface UserDTO {\n  id: number\n  name: string\n  email: string\n  photo: string\n  role: string\n  channels: string\n  contacts: string\n}\n\nexport interface UserRecoverPasswordRequestDTO {\n  email: string\n}\n\nexport interface CheckSecretRequestDTO {\n  code: string\n  secretType: string\n}\n\nexport interface ChangePasswordRequestDTO {\n  code: string\n  password: string\n}\n\nexport interface UserFetchByTokenRequestDTO {\n  token: string\n}\n\nexport interface ChangePhotoRequestDTO {\n  id: number // userId\n  photo: string\n}\n\nconst authService = {\n  /** Получить список всех пользователей */\n  getAllUsers: async (): Promise<IServerResponse> =>\n    api.send({\n      method: 'get',\n      endpoint: '/api/v1/auth/users'\n    }),\n  /** Регистрация нового пользователя */\n  register: async (payload: UserCreateRequestDTO): Promise<IServerResponse> =>\n    api.send({\n      method: 'put',\n      endpoint: '/api/v1/auth/register',\n      payload\n    }),\n\n  /** Активация пользователя по коду из письма */\n  activate: async (code: string): Promise<IServerResponse> =>\n    api.send({\n      method: 'patch',\n      endpoint: `/api/v1/auth/activate/${code}`\n    }),\n\n  /** Вход пользователя в систему и полуение токена */\n  login: async (payload: UserLoginRequestDTO): Promise<IServerResponse> =>\n    api.send({\n      method: 'post',\n      endpoint: '/api/v1/auth/login',\n      payload\n    }),\n\n  /** Попытка получить объект пользователя по токену */\n  fetchByToken: async (\n    payload: UserFetchByTokenRequestDTO\n  ): Promise<IServerResponse> =>\n    api.send({\n      method: 'post',\n      endpoint: '/api/v1/auth/fetch-by-token',\n      payload\n    }),\n\n  /** Запрос на изменение пароля, отправка письма со ссылкой на email */\n  recover: async (\n    payload: UserRecoverPasswordRequestDTO\n  ): Promise<IServerResponse> =>\n    api.send({\n      method: 'post',\n      endpoint: '/api/v1/auth/recover',\n      payload\n    }),\n\n  /** Проверка секретного ключа для доступа к форме восстановления пароля */\n  checkSecret: async (\n    payload: CheckSecretRequestDTO\n  ): Promise<IServerResponse> =>\n    api.send({\n      method: 'post',\n      endpoint: '/api/v1/auth/check-secret',\n      payload\n    }),\n\n  /** Изменение пароля пользователя */\n  changePassword: async (\n    payload: ChangePasswordRequestDTO\n  ): Promise<IServerResponse> =>\n    api.send({\n      method: 'patch',\n      endpoint: '/api/v1/auth/change-password',\n      payload\n    }),\n\n  /** Изменение фото пользователя */\n  changePhoto: async (\n    payload: ChangePhotoRequestDTO\n  ): Promise<IServerResponse> =>\n    api.send({\n      method: 'patch',\n      endpoint: '/api/v1/auth/change-photo',\n      payload\n    }),\n\n  getToken: (): string | null => localStorage.getItem(AUTH_TOKEN_STORAGE_KEY),\n\n  setToken: (payload: string): void =>\n    localStorage.setItem(AUTH_TOKEN_STORAGE_KEY, payload),\n\n  removeToken: (): void => localStorage.removeItem(AUTH_TOKEN_STORAGE_KEY)\n}\n\nexport { authService }\n","import { FC, useState } from 'react'\nimport { message, Upload } from 'antd'\nimport ImgCrop from 'antd-img-crop'\n\ninterface IPhotoUploaderProps {\n  /** base64 photo url */\n  preloadedPhoto?: string | null\n  onChangePhoto?: (imageUrl: string) => void\n  onRemovePhoto?: () => void\n}\n\nconst beforeUpload = (file) => {\n  const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png'\n  if (!isJpgOrPng) {\n    message.error('Допустимые форматы файлов: JPG или PNG!')\n  }\n  const isLt2M = file.size / 1024 / 1024 < 2\n  if (!isLt2M) {\n    message.error('Размер изображения не должен превышать 2Мб!')\n  }\n  return isJpgOrPng && isLt2M\n}\n\nconst getBase64 = async (file): Promise<string> => {\n  let src = file.url\n  const resizeWidth = 300\n\n  if (!src) {\n    src = await new Promise((resolve) => {\n      const reader = new FileReader()\n      reader.readAsDataURL(file.originFileObj)\n      reader.onload = (event) => {\n        const img = new Image()\n        img.src = event.target.result as string\n        img.onload = (el: any) => {\n          const elem = document.createElement('canvas')\n          const scaleFactor = resizeWidth / el.target.width\n          elem.width = resizeWidth\n          elem.height = el.target.height * scaleFactor\n          const ctx = elem.getContext('2d')\n          ctx.drawImage(el.target, 0, 0, elem.width, elem.height)\n          const srcEncoded = ctx.canvas.toDataURL('image/jpeg', 0.3)\n          resolve(srcEncoded)\n        }\n      }\n    })\n  }\n  return src\n}\n\nconst onPreview = async (file) => {\n  const src = await getBase64(file)\n  const image = new Image()\n  image.src = src\n  const imgWindow = window.open(src)\n  imgWindow.document.write(image.outerHTML)\n}\n\nconst PhotoUploader: FC<IPhotoUploaderProps> = (props) => {\n  const { preloadedPhoto, onChangePhoto, onRemovePhoto } = props\n  const initialPhoto = preloadedPhoto ? [{ url: preloadedPhoto }] : []\n  const [fileList, setFileList] = useState(initialPhoto)\n\n  const customRequest = (options) => {\n    const { onSuccess, file } = options\n    onSuccess(null, file)\n  }\n\n  const onChange = async ({ fileList: newFileList }) => {\n    const file = newFileList[0]\n    if (file?.status === 'done') {\n      const imageUrl = await getBase64(file)\n      onChangePhoto(imageUrl)\n    }\n\n    if (!file) {\n      onRemovePhoto()\n    }\n\n    setFileList(newFileList)\n  }\n\n  return (\n    <div className=\"photo-uploader\">\n      <ImgCrop\n        rotate\n        shape=\"round\"\n        modalTitle=\"Редактировать изображение\"\n        modalOk=\"Применить\"\n        modalCancel=\"Отмена\"\n      >\n        <Upload\n          listType=\"picture-card\"\n          fileList={fileList as any}\n          onChange={onChange}\n          beforeUpload={beforeUpload}\n          onPreview={onPreview}\n          customRequest={customRequest}\n        >\n          {!fileList.length && 'Выбрать фото'}\n        </Upload>\n      </ImgCrop>\n    </div>\n  )\n}\n\nexport { PhotoUploader }\n","import { FC, useState } from 'react'\nimport { Button, Spin, message } from 'antd'\nimport { LoadingOutlined } from '@ant-design/icons'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport { authService, UserDTO } from 'services/auth'\nimport { PhotoUploader } from 'components/PhotoUploader'\nimport { useActions } from 'hooks/useActions'\nimport { userUpdatePhoto } from 'modules/Auth/actions'\n\ninterface IUserProfileProps {\n  onCancel?: () => any\n  onOk?: () => any\n}\n\nconst UserProfile: FC<IUserProfileProps> = (props) => {\n  const { onCancel, onOk } = props\n  const [loading, setLoading] = useState(false)\n  const [photo, setPhoto] = useState('')\n  const { id, name, email, photo: preloadedPhoto } = useShallowEqualSelector(\n    (state) => state.auth.user\n  ) as UserDTO\n\n  const [dispatchUserUpdatePhoto] = useActions([userUpdatePhoto], null)\n\n  const onSaveChanges = async () => {\n    if (photo === '') {\n      onOk()\n      return\n    }\n\n    try {\n      setLoading(true)\n\n      const { type, message: serverMessage } = await authService.changePhoto({\n        id,\n        photo\n      })\n\n      if (serverMessage) {\n        if (type === 'error') {\n          setLoading(false)\n          return\n        }\n      }\n\n      setLoading(false)\n      dispatchUserUpdatePhoto(photo)\n      onOk()\n    } catch (error) {\n      setLoading(false)\n      message.error(error.message)\n    }\n  }\n\n  return (\n    <>\n      <PhotoUploader\n        preloadedPhoto={preloadedPhoto}\n        onChangePhoto={(imageUrl) => setPhoto(imageUrl)}\n        onRemovePhoto={() => setPhoto(null)}\n      />\n      <p>Имя: {name}</p>\n      <p>Email: {email}</p>\n\n      <div className=\"form-footer\">\n        {loading && (\n          <Spin\n            className=\"center\"\n            indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n            delay={500}\n          />\n        )}\n        <Button key=\"back\" onClick={() => onCancel()} disabled={loading}>\n          Отмена\n        </Button>\n        <Button type=\"primary\" disabled={loading} onClick={onSaveChanges}>\n          Сохранить\n        </Button>\n      </div>\n    </>\n  )\n}\n\nexport { UserProfile }\n","import { FC, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { Menu, Dropdown, Avatar } from 'antd'\nimport {\n  UserOutlined,\n  LogoutOutlined,\n  ProfileOutlined\n} from '@ant-design/icons'\nimport { useActions } from 'hooks/useActions'\nimport { ModalWindow } from 'containers/ModalWindow'\nimport { userLogoutRequest } from 'modules/Auth/actions'\nimport { UserDTO } from 'services/auth'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport { UserProfile } from '../UserProfile'\n\nconst UserMenu: FC = () => {\n  const [userProfileModalVisibility, setUserProfileModalVisibility] = useState(\n    false\n  )\n  const { photo } = useShallowEqualSelector(\n    (state) => state.auth.user\n  ) as UserDTO\n  const history = useHistory()\n  const [dispatchUserLogoutRequest] = useActions([userLogoutRequest], null)\n\n  const handleMenuClick = (event) => {\n    const { key } = event\n\n    switch (key) {\n      case 'profile':\n        setUserProfileModalVisibility(true)\n        break\n      case 'logout':\n        dispatchUserLogoutRequest()\n        history.push('/auth/login')\n        break\n      default:\n        break\n    }\n  }\n\n  const menu = (\n    <Menu onClick={handleMenuClick}>\n      <Menu.Item key=\"profile\" icon={<ProfileOutlined />}>\n        Профиль\n      </Menu.Item>\n      <Menu.Divider />\n      <Menu.Item key=\"logout\" icon={<LogoutOutlined />}>\n        Выход\n      </Menu.Item>\n    </Menu>\n  )\n\n  return (\n    <>\n      <Dropdown overlay={menu} trigger={['click']}>\n        <Avatar\n          className=\"user-profile\"\n          src={photo && photo}\n          icon={<UserOutlined />}\n        />\n      </Dropdown>\n      <ModalWindow\n        title=\"Профиль\"\n        visible={userProfileModalVisibility}\n        onCancel={() => setUserProfileModalVisibility(false)}\n        onOk={() => setUserProfileModalVisibility(false)}\n      >\n        <UserProfile\n          onCancel={() => setUserProfileModalVisibility(false)}\n          onOk={() => setUserProfileModalVisibility(false)}\n        />\n      </ModalWindow>\n    </>\n  )\n}\n\nexport { UserMenu }\n","import { FC } from 'react'\nimport { Layout, Typography } from 'antd'\nimport { MenuUnfoldOutlined, MenuFoldOutlined } from '@ant-design/icons'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport { MainMenu } from 'components/MainMenu'\nimport { UserMenu } from 'components/UserMenu'\nimport { PrivateContainer } from 'containers/Private'\n\nconst { Text } = Typography\n\ninterface IHeaderProps {\n  sidebarCollapsed: boolean\n  onSidebarToggle: (isCollapsed: boolean) => void\n}\n\nconst { Header: AntHeader } = Layout\n\nconst Header: FC<IHeaderProps> = (props: IHeaderProps) => {\n  const activeChannel = useShallowEqualSelector(\n    (state) => state.chat.activeChannel\n  ) as any\n\n  const { onSidebarToggle, sidebarCollapsed } = props\n\n  const onTriggerClick = () => {\n    onSidebarToggle(!sidebarCollapsed)\n  }\n\n  const menuTrigger = sidebarCollapsed ? (\n    <MenuUnfoldOutlined\n      style={{ fontSize: '20px', padding: '22px' }}\n      className=\"trigger\"\n      onClick={onTriggerClick}\n      label=\"Свернуть\"\n    />\n  ) : (\n    <MenuFoldOutlined\n      style={{ fontSize: '20px', padding: '22px' }}\n      className=\"trigger\"\n      onClick={onTriggerClick}\n    />\n  )\n\n  const activeChannelLabel = activeChannel && (\n    <div className=\"active-channel\">\n      <Text className=\"active-channel-text\">{activeChannel.name}</Text>\n      {activeChannel.type === 'channel' ? (\n        <Text className=\"active-channel-text\" type=\"secondary\">\n          5 участников\n        </Text>\n      ) : (\n        <Text className=\"active-channel-text\" type=\"secondary\">\n          был(а) 1 час назад\n        </Text>\n      )}\n    </div>\n  )\n\n  return (\n    <AntHeader className=\"header background-white\">\n      <PrivateContainer>\n        {menuTrigger}\n        {activeChannelLabel}\n      </PrivateContainer>\n\n      <div className=\"header-menu\">\n        <MainMenu />\n        <PrivateContainer>\n          <UserMenu />\n        </PrivateContainer>\n      </div>\n    </AntHeader>\n  )\n}\n\nexport { Header }\n","import { FC, useState } from 'react'\nimport { Form, Input, message, Button, Spin } from 'antd'\nimport { LoadingOutlined } from '@ant-design/icons'\nimport { PhotoUploader } from 'components/PhotoUploader'\nimport { UserDTO } from 'services/auth'\nimport { useActions } from 'hooks/useActions'\nimport { setActiveChannel, addChannel } from 'modules/Chat/actions'\nimport { channelService } from 'services/channel'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport { WS } from 'services/socket'\n\ninterface IFormValues {\n  name: string\n  description?: string\n  photo?: string\n}\n\ninterface ICreateChannelProps {\n  onCancel?: () => any\n  onOk?: () => any\n}\n\nconst CreateChannel: FC<ICreateChannelProps> = (props) => {\n  const { onCancel, onOk } = props\n  const user = useShallowEqualSelector((state) => state.auth.user) as UserDTO\n  const [form] = Form.useForm()\n  const [loading, setLoading] = useState(false)\n  const [photo, setPhoto] = useState(null)\n  const [dispatchActiveChannel, dispatchAddChannel] = useActions(\n    [setActiveChannel, addChannel],\n    null\n  )\n\n  const onFinish = async (values: IFormValues) => {\n    try {\n      const { name, description } = values\n      setLoading(true)\n\n      const {\n        type,\n        message: serverMessage,\n        data\n      } = await channelService.createChannel({\n        name,\n        description,\n        photo,\n        ownerId: user.id\n      })\n\n      if (serverMessage) {\n        if (type === 'success') {\n          message.success(serverMessage)\n        }\n        if (type === 'error') {\n          message.error(serverMessage)\n          setLoading(false)\n          return\n        }\n      }\n\n      const activeChannelPayload = { id: data.channelId, name, type: 'channel' }\n\n      dispatchAddChannel({\n        ...activeChannelPayload,\n        ownerId: user.id,\n        photo,\n        members: [user.id]\n      })\n      dispatchActiveChannel(activeChannelPayload)\n      WS.subscribeToChannel(data.channelId)\n\n      setLoading(false)\n      onOk()\n    } catch (error) {\n      setLoading(false)\n      message.error(error.message)\n    }\n  }\n\n  const resetForm = () => onCancel()\n\n  return (\n    <>\n      <PhotoUploader onChangePhoto={(imageUrl) => setPhoto(imageUrl)} />\n      <Form\n        form={form}\n        name=\"createChannel\"\n        className=\"create-channel-form\"\n        layout=\"vertical\"\n        onFinish={onFinish}\n      >\n        <Form.Item\n          name=\"name\"\n          rules={[\n            { required: true, message: 'Введите название канала' },\n            { max: 20, message: 'Не более 20 символов' }\n          ]}\n        >\n          <Input placeholder=\"Название канала\" />\n        </Form.Item>\n        <Form.Item\n          name=\"description\"\n          rules={[{ max: 50, message: 'Не более 50 символов' }]}\n        >\n          <Input placeholder=\"Описание (не обязательно)\" type=\"textarea\" />\n        </Form.Item>\n        <div className=\"form-footer\">\n          {loading && (\n            <Spin\n              className=\"center\"\n              indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n              delay={500}\n            />\n          )}\n          <Button key=\"back\" onClick={resetForm} disabled={loading}>\n            Отмена\n          </Button>\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            htmlType=\"submit\"\n            disabled={loading}\n          >\n            Создать\n          </Button>\n        </div>\n      </Form>\n    </>\n  )\n}\n\nexport { CreateChannel }\n","import { FC, useState } from 'react'\nimport { Menu, Dropdown } from 'antd'\nimport {\n  MenuOutlined,\n  UserAddOutlined,\n  UsergroupAddOutlined,\n  ContactsOutlined,\n  SettingOutlined\n} from '@ant-design/icons'\nimport { ModalWindow } from 'containers/ModalWindow'\nimport { CreateChannel } from '../CreateChannel'\n\nconst SidebarMenu: FC = () => {\n  const [\n    createChannelModalVisibility,\n    setCreateChannelModalVisibility\n  ] = useState(false)\n\n  const handleMenuClick = (event) => {\n    const { key } = event\n\n    switch (key) {\n      case 'createChannel':\n        setCreateChannelModalVisibility(true)\n        break\n      default:\n        break\n    }\n  }\n\n  const menu = (\n    <Menu onClick={handleMenuClick}>\n      <Menu.Item key=\"createChannel\" icon={<UsergroupAddOutlined />}>\n        Создать канал\n      </Menu.Item>\n      <Menu.Item key=\"addContact\" icon={<UserAddOutlined />}>\n        Добавить контакт\n      </Menu.Item>\n      <Menu.Divider />\n      <Menu.Item key=\"contacts\" icon={<ContactsOutlined />}>\n        Контакты\n      </Menu.Item>\n      <Menu.Item key=\"settings\" icon={<SettingOutlined />}>\n        Настройки\n      </Menu.Item>\n    </Menu>\n  )\n\n  return (\n    <>\n      <Dropdown overlay={menu} trigger={['click']}>\n        <MenuOutlined className=\"sidebar-icon\" />\n      </Dropdown>\n      <ModalWindow\n        title=\"Создать канал\"\n        visible={createChannelModalVisibility}\n        onCancel={() => setCreateChannelModalVisibility(false)}\n      >\n        <CreateChannel\n          onCancel={() => setCreateChannelModalVisibility(false)}\n          onOk={() => setCreateChannelModalVisibility(false)}\n        />\n      </ModalWindow>\n    </>\n  )\n}\n\nexport { SidebarMenu }\n","import { FC, useState } from 'react'\nimport { Layout, Menu, Avatar } from 'antd'\nimport { LockOutlined, UnlockOutlined, MessageFilled } from '@ant-design/icons'\nimport { Scrollbars } from 'react-custom-scrollbars'\nimport { useEscape } from 'hooks/useEscape'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport { setActiveChannel } from 'modules/Chat/actions'\nimport { useActions } from 'hooks/useActions'\nimport { IChannelData } from 'components/Chat/Messages'\nimport { SidebarMenu } from './SidebarMenu'\n\nconst { Sider } = Layout\n\ninterface ISidebarProps {\n  sidebarCollapsed: boolean\n  onSidebarToggle: (isCollapsed: boolean) => void\n}\n\nconst renderTrackVertical = ({ style, ...ownProps }) => (\n  <div\n    {...ownProps}\n    className=\"scrollTrackVertical\"\n    style={{\n      ...style,\n      backgroundColor: '#E5E5E5',\n      right: '2px',\n      bottom: '2px',\n      top: '2px',\n      borderRadius: '3px'\n    }}\n  />\n)\n\nconst renderThumbVertical = ({ style, ...ownProps }) => (\n  <div\n    {...ownProps}\n    className=\"scrollThumbVertical\"\n    style={{\n      ...style,\n      borderRadius: '4px',\n      boxShadow: '0 2px 4px 0 rgba(0, 0, 0, 0.16)',\n      backgroundColor: '#9A9A9A'\n    }}\n  />\n)\n\nconst Sidebar: FC<ISidebarProps> = (props: ISidebarProps) => {\n  const [sidebarLocked, setSidebarLocked] = useState(true)\n  const { sidebarCollapsed, onSidebarToggle } = props\n  const [dispatchActiveChannel] = useActions([setActiveChannel], null)\n  const chat = useShallowEqualSelector((state) => state.chat) as any\n  const { activeChannel, channels, contacts } = chat\n\n  useEscape(() => {\n    if (!activeChannel) return\n    dispatchActiveChannel(null)\n  })\n\n  const onClickMenu = ({ key }) => {\n    if (activeChannel) {\n      const { id, type } = activeChannel\n      if (key === `${type}-${id}`) return\n    }\n\n    const [channelType, channelId] = key.split('-')\n    const place = channelType === 'channel' ? channels : contacts\n    const { name, type } = place[channelId]\n\n    const intChannelId = parseInt(channelId, 10)\n    dispatchActiveChannel({ id: intChannelId, name, type })\n\n    if (!sidebarLocked) {\n      onSidebarToggle(true)\n    }\n  }\n\n  const selectedMenuKey = activeChannel\n    ? [`${activeChannel.type}-${activeChannel.id}`]\n    : []\n\n  return (\n    <>\n      <Sider\n        trigger={null}\n        collapsed={sidebarCollapsed}\n        collapsedWidth={0}\n        className=\"sider\"\n        theme=\"dark\"\n        style={{\n          overflow: 'auto',\n          height: '100vh'\n        }}\n      >\n        <div className=\"sidebar-top\">\n          <SidebarMenu />\n          {sidebarLocked ? (\n            <LockOutlined\n              title=\"Отмена фиксации\"\n              className=\"sidebar-icon\"\n              onClick={() => setSidebarLocked(false)}\n            />\n          ) : (\n            <UnlockOutlined\n              title=\"Фиксировать меню\"\n              className=\"sidebar-icon\"\n              onClick={() => setSidebarLocked(true)}\n            />\n          )}\n        </div>\n\n        <div className=\"channels-menu\">\n          <span className=\"channels-menu-title\">Каналы</span>\n          {(channels && Object.keys(channels).length && (\n            <Scrollbars\n              style={{ height: 'calc(50vh - 58px)' }}\n              hideTracksWhenNotNeeded\n              autoHide\n              autoHideTimeout={400}\n              renderTrackVertical={renderTrackVertical}\n              renderThumbVertical={renderThumbVertical}\n            >\n              <Menu\n                theme=\"dark\"\n                mode=\"inline\"\n                selectedKeys={selectedMenuKey}\n                onClick={onClickMenu}\n              >\n                {Object.entries(channels as IChannelData).map(\n                  ([channelId, channel]) => (\n                    <Menu.Item key={`${channel.type}-${channelId}`}>\n                      {channel.photo ? (\n                        <Avatar className=\"channel-photo\" src={channel.photo} />\n                      ) : (\n                        <Avatar\n                          className=\"channel-photo\"\n                          icon={<MessageFilled style={{ color: '#fefefe' }} />}\n                        />\n                      )}\n\n                      <span className=\"channel-name\">{channel.name}</span>\n                    </Menu.Item>\n                  )\n                )}\n              </Menu>\n            </Scrollbars>\n          )) || <p className=\"nocontent\">нет каналов</p>}\n        </div>\n\n        <div className=\"contacts-menu\">\n          <span className=\"contacts-menu-title\">Контакты</span>\n          {(contacts && Object.keys(contacts).length && (\n            <Scrollbars\n              style={{ height: 'calc(50vh - 58px)' }}\n              hideTracksWhenNotNeeded\n              autoHide\n              autoHideTimeout={400}\n              renderTrackVertical={renderTrackVertical}\n              renderThumbVertical={renderThumbVertical}\n            >\n              <Menu\n                theme=\"dark\"\n                mode=\"inline\"\n                selectedKeys={selectedMenuKey}\n                onClick={onClickMenu}\n              >\n                {Object.entries(contacts as IChannelData).map(\n                  ([channelId, channel]) => (\n                    <Menu.Item key={`${channel.type}-${channelId}`}>\n                      {channel.name}\n                    </Menu.Item>\n                  )\n                )}\n              </Menu>\n            </Scrollbars>\n          )) || <p className=\"nocontent\">нет контактов</p>}\n        </div>\n      </Sider>\n    </>\n  )\n}\n\nexport { Sidebar }\n","import { useEffect } from 'react'\n\nconst useEscape = (onEscape: () => any) => {\n  useEffect(() => {\n    const handleEsc = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') onEscape()\n    }\n    window.addEventListener('keydown', handleEsc)\n\n    return () => {\n      window.removeEventListener('keydown', handleEsc)\n    }\n  }, [onEscape])\n}\n\nexport { useEscape }\n","import { FC } from 'react'\r\nimport { Route, Redirect, RouteProps } from 'react-router-dom'\r\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\r\nimport { IRootState } from 'modules'\r\n\r\ninterface IPrivateRouteProps extends RouteProps {\r\n  component?: any\r\n  children?: any\r\n}\r\n\r\nconst PrivateRoute: FC<IPrivateRouteProps> = ({\r\n  component: Component,\r\n  children,\r\n  ...rest\r\n}) => {\r\n  const user = useShallowEqualSelector((state: IRootState) => state.auth.user)\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(routeProps) => {\r\n        if (user === null) return null\r\n\r\n        if (user === false) {\r\n          return (\r\n            <Redirect\r\n              to={{\r\n                pathname: '/auth/login',\r\n                state: { from: routeProps.location }\r\n              }}\r\n            />\r\n          )\r\n        }\r\n\r\n        if (Component) {\r\n          return <Component {...routeProps} />\r\n        }\r\n\r\n        return children\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nPrivateRoute.defaultProps = {\r\n  component: undefined\r\n}\r\n\r\nexport { PrivateRoute }\r\n","import { FC } from 'react'\nimport { Empty } from 'antd'\n\ninterface IMessagesProps {\n  channel: IChannelData\n}\n\nexport interface IChannelData {\n  id: number | string\n  name: string\n  type: string // contact(user) | channel\n  messages: IMessage[]\n}\n\ninterface IMessage {\n  id: string\n  text: string\n  from: string | number // todo userId\n  type?: string\n}\n\nconst Messages: FC<IMessagesProps> = ({\n  channel: { messages }\n}: IMessagesProps) =>\n  (!messages?.length && (\n    <div className=\"chat-empty\">\n      <Empty description=\"Сообщений нет\" />\n    </div>\n  )) || (\n    <div className=\"chat-window\">\n      {messages.map(({ id, text, from }) => (\n        <div key={id}>\n          <strong>{from}</strong>: {text}\n        </div>\n      ))}\n    </div>\n  )\n\nexport { Messages }\n","import { FC, memo } from 'react'\nimport { Form, Input, Button } from 'antd'\nimport { SendOutlined } from '@ant-design/icons'\n\ninterface IFormValues {\n  text: string\n}\n\ninterface IChatInputProps {\n  sendMessage: (text: string) => void\n}\n\nconst InputMessage: FC<IChatInputProps> = memo(({ sendMessage }) => {\n  const [form] = Form.useForm()\n\n  const onFinish = async (values: IFormValues) => {\n    try {\n      const { text } = values\n      sendMessage(text)\n      form.resetFields()\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(error)\n    }\n  }\n  return (\n    <div className=\"chat-input\">\n      <Form size=\"large\" className=\"input-form\" form={form} onFinish={onFinish}>\n        <Form.Item className=\"input-messaage\" required name=\"text\">\n          <Input autoFocus placeholder=\"Введите сообщение\" />\n        </Form.Item>\n        <Form.Item className=\"send-button\">\n          <Button htmlType=\"submit\" type=\"primary\" icon={<SendOutlined />}>\n            Отправить\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  )\n})\n\nexport { InputMessage }\n","import { useCallback } from 'react'\nimport { nanoid } from 'nanoid'\nimport { UserDTO } from 'services/auth'\nimport { Empty } from 'antd'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport { sendChannelMessage, sendContactMessage } from 'modules/Chat/actions'\nimport { useActions } from 'hooks/useActions'\nimport { WS } from 'services/socket'\nimport { Messages } from './Messages'\nimport { InputMessage } from './InputMessage'\n\nconst Chat = () => {\n  const user = useShallowEqualSelector((state) => state.auth.user) as UserDTO\n  const [dispatchSendChannelMessage, dispatchSendContactMessage] = useActions(\n    [sendChannelMessage, sendContactMessage],\n    null\n  )\n  const { activeChannel, channels, contacts } = useShallowEqualSelector(\n    (state) => state.chat\n  ) as any\n\n  const onSendMessage = useCallback(\n    (text: string): void => {\n      if (!activeChannel) return\n      if (!text) return\n\n      const id = nanoid()\n      const { id: userId, name } = user\n      const message = { id, text, from: `${name}(${userId})` }\n      const payload = {\n        activeChannelId: activeChannel.id,\n        message\n      }\n\n      if (activeChannel.type === 'channel') {\n        dispatchSendChannelMessage(payload)\n        WS.sendChannelMessage(payload)\n      }\n\n      if (activeChannel.type === 'contact') {\n        dispatchSendContactMessage(payload)\n        WS.sendContactMessage({ from: user.id, to: activeChannel.id, message })\n      }\n    },\n    [\n      activeChannel,\n      dispatchSendChannelMessage,\n      dispatchSendContactMessage,\n      user\n    ]\n  )\n\n  if (!user || !activeChannel || (!channels && !contacts))\n    return (\n      <div className=\"chat-empty\">\n        <Empty description=\"Выберите канал для начала общения!\" />\n      </div>\n    )\n\n  const { type, id } = activeChannel\n  const channelData = type === 'channel' ? channels[id] : contacts[id]\n\n  if (!channelData) return null\n\n  return (\n    <>\n      <Messages channel={channelData} />\n      <InputMessage sendMessage={onSendMessage} />\n    </>\n  )\n}\n\nexport { Chat }\n","import { FC, useState } from 'react'\nimport { Form, Input, Button, Card, Alert, Spin } from 'antd'\nimport { MailOutlined, LockOutlined, LoadingOutlined } from '@ant-design/icons'\nimport { Link, useHistory } from 'react-router-dom'\nimport { useActions } from 'hooks/useActions'\nimport { authService } from 'services/auth'\nimport { userLoginRequest } from 'modules/Auth/actions'\n\ninterface IFormValues {\n  email: string\n  password: string\n}\n\nconst Login: FC = () => {\n  const emptyMessage = { type: '', message: '' }\n  const [form] = Form.useForm()\n  const [alert, setAlert] = useState(emptyMessage)\n  const [loading, setLoading] = useState(false)\n  const [dispatchUserLoginRequest] = useActions([userLoginRequest], null)\n  const history = useHistory()\n\n  const onFinish = async (values: IFormValues) => {\n    try {\n      setAlert(emptyMessage)\n      setLoading(true)\n\n      const { email, password } = values\n      const { type, message, token, data } = await authService.login({\n        email,\n        password\n      })\n\n      if (message) {\n        setAlert({ type, message })\n        setLoading(false)\n        if (type === 'error') return\n      }\n\n      dispatchUserLoginRequest({ data, token })\n      setLoading(false)\n\n      history.push('/')\n    } catch (error) {\n      setAlert(error)\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"flex-center\">\n      <Card className=\"card\" title=\"Вход в систему\">\n        {alert.message && (\n          <Alert\n            className=\"alert\"\n            message={alert.message}\n            type={alert.type as any}\n          />\n        )}\n        <Form\n          form={form}\n          name=\"login\"\n          className=\"login-form\"\n          initialValues={{ remember: true }}\n          onFinish={onFinish}\n        >\n          <Form.Item\n            name=\"email\"\n            rules={[\n              {\n                required: true,\n                type: 'email',\n                min: 4,\n                message: 'Некорректный email'\n              }\n            ]}\n          >\n            <Input prefix={<MailOutlined />} placeholder=\"Email\" size=\"large\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"password\"\n            rules={[{ required: true, min: 6, message: 'Минимум 6 символов' }]}\n          >\n            <Input.Password\n              placeholder=\"Пароль\"\n              prefix={<LockOutlined />}\n              size=\"large\"\n            />\n          </Form.Item>\n\n          <Form.Item>\n            <Form.Item name=\"register\" noStyle>\n              <Link to=\"/auth/register\">Регистрация</Link>\n            </Form.Item>\n\n            <Link className=\"link-recover\" to=\"/auth/recover\">\n              Забыли пароль?\n            </Link>\n          </Form.Item>\n\n          {loading && (\n            <Spin\n              className=\"center\"\n              indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n              delay={500}\n            />\n          )}\n\n          <Button size=\"large\" type=\"primary\" htmlType=\"submit\" block>\n            Войти\n          </Button>\n        </Form>\n      </Card>\n    </div>\n  )\n}\n\nexport { Login }\n","import { FC, useState } from 'react'\nimport { Form, Input, Button, Card, Alert, Spin } from 'antd'\nimport {\n  UserOutlined,\n  LockOutlined,\n  MailOutlined,\n  LoadingOutlined\n} from '@ant-design/icons'\nimport { authService } from 'services/auth'\n\ninterface IFormValues {\n  name: string\n  email: string\n  password: string\n}\n\nconst Register: FC = () => {\n  const emptyMessage = { type: '', message: '' }\n  const [form] = Form.useForm()\n  const [alert, setAlert] = useState(emptyMessage)\n  const [loading, setLoading] = useState(false)\n\n  const onFinish = async (values: IFormValues) => {\n    try {\n      setAlert(emptyMessage)\n      setLoading(true)\n\n      const { name, email, password } = values\n      const { type, message } = await authService.register({\n        name,\n        email,\n        password\n      })\n\n      if (message) {\n        setAlert({ type, message })\n        setLoading(false)\n        if (type === 'error') return\n      }\n\n      form.resetFields()\n      setLoading(false)\n    } catch (error) {\n      setAlert(error)\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"flex-center\">\n      <Card className=\"card\" title=\"Регистрация\">\n        {alert.message && (\n          <Alert\n            className=\"alert\"\n            message={alert.message}\n            type={alert.type as any}\n          />\n        )}\n        <Form\n          form={form}\n          name=\"register\"\n          initialValues={{ remember: true }}\n          onFinish={onFinish}\n          validateTrigger=\"onBlur\"\n        >\n          <Form.Item\n            name=\"name\"\n            rules={[\n              {\n                required: true,\n                message:\n                  \"Имя должно содержать минимум 4 символа английского или русского алфавита, допустимы цифры и знаки '- _'\",\n                pattern: /^[a-zA-Zа-яА-ЯёЁ0-9-_\\s]{4,}$/\n              }\n            ]}\n          >\n            <Input placeholder=\"Имя\" size=\"large\" prefix={<UserOutlined />} />\n          </Form.Item>\n\n          <Form.Item\n            name=\"email\"\n            rules={[\n              { required: true, type: 'email', message: 'Некорректный email' }\n            ]}\n          >\n            <Input prefix={<MailOutlined />} placeholder=\"Email\" size=\"large\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"password\"\n            rules={[\n              {\n                required: true,\n                message: 'Введите пароль! Минимум 6 символов.',\n                min: 6\n              }\n            ]}\n          >\n            <Input.Password\n              placeholder=\"Пароль\"\n              prefix={<LockOutlined />}\n              size=\"large\"\n            />\n          </Form.Item>\n\n          <Form.Item\n            name=\"confirm-password\"\n            dependencies={['password']}\n            rules={[\n              {\n                required: true,\n                message: 'Введите подтверждение пароля! Минимум 6 символов.',\n                min: 6\n              },\n              ({ getFieldValue }) => ({\n                validator(_, value) {\n                  if (!value || getFieldValue('password') === value) {\n                    return Promise.resolve()\n                  }\n                  return Promise.reject(new Error('Пароли должны совпадать!'))\n                }\n              })\n            ]}\n          >\n            <Input.Password\n              placeholder=\"Пароль еще раз\"\n              prefix={<LockOutlined />}\n              size=\"large\"\n            />\n          </Form.Item>\n\n          {loading && (\n            <Spin\n              className=\"center\"\n              indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n              delay={500}\n            />\n          )}\n\n          <Button\n            className=\"submit-button\"\n            type=\"primary\"\n            htmlType=\"submit\"\n            size=\"large\"\n            block\n            disabled={loading}\n          >\n            Зарегистрироваться\n          </Button>\n        </Form>\n      </Card>\n    </div>\n  )\n}\n\nexport { Register }\n","import { FC, useState } from 'react'\nimport { Form, Input, Button, Card, Alert, Spin } from 'antd'\nimport { MailOutlined, LoadingOutlined } from '@ant-design/icons'\nimport { authService } from 'services/auth'\n\ninterface IFormValues {\n  email: string\n}\n\nconst Recover: FC = () => {\n  const emptyMessage = { type: '', message: '' }\n  const [form] = Form.useForm()\n  const [alert, setAlert] = useState(emptyMessage)\n  const [loading, setLoading] = useState(false)\n\n  const onFinish = async (values: IFormValues) => {\n    try {\n      setAlert(emptyMessage)\n      setLoading(true)\n\n      const { email } = values\n      const { type, message } = await authService.recover({\n        email\n      })\n\n      if (message) {\n        setAlert({ type, message })\n        setLoading(false)\n        if (type === 'error') return\n      }\n\n      form.resetFields()\n      setLoading(false)\n    } catch (error) {\n      setAlert(error)\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"flex-center\">\n      <Card className=\"card\" title=\"Восстановление пароля\">\n        {alert.message && (\n          <Alert\n            className=\"alert\"\n            message={alert.message}\n            type={alert.type as any}\n          />\n        )}\n        {alert.type !== 'success' && (\n          <>\n            <p>\n              Укажите email, указанный при регистрации и мы вышлем на него\n              ссылку для восстановления пароля.\n            </p>\n            <Form\n              form={form}\n              name=\"recover\"\n              className=\"login-form\"\n              initialValues={{ remember: true }}\n              onFinish={onFinish}\n              validateTrigger=\"onBlur\"\n            >\n              <Form.Item\n                name=\"email\"\n                rules={[\n                  {\n                    required: true,\n                    type: 'email',\n                    message: 'Некорректный email!'\n                  }\n                ]}\n              >\n                <Input\n                  prefix={<MailOutlined />}\n                  placeholder=\"Email\"\n                  size=\"large\"\n                />\n              </Form.Item>\n\n              {loading && (\n                <Spin\n                  className=\"center\"\n                  indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n                  delay={500}\n                />\n              )}\n\n              <Button\n                size=\"large\"\n                type=\"primary\"\n                htmlType=\"submit\"\n                block\n                disabled={loading}\n              >\n                Восстановить пароль\n              </Button>\n            </Form>\n          </>\n        )}\n      </Card>\n    </div>\n  )\n}\n\nexport { Recover }\n","import { FC, useState, useEffect } from 'react'\nimport { useParams, Link } from 'react-router-dom'\nimport { Form, Input, Button, Card, Alert } from 'antd'\nimport { LockOutlined } from '@ant-design/icons'\nimport { authService } from 'services/auth'\n\ninterface IChangePasswordParams {\n  code?: string\n}\n\ninterface IFormValues {\n  password: string\n  confirmPassword: string\n}\n\nconst ChangePassword: FC = () => {\n  const { code }: IChangePasswordParams = useParams()\n  const emptyMessage = { type: '', message: '' }\n  const [alert, setAlert] = useState(emptyMessage)\n  const [secretError, setSecretError] = useState(false)\n  const [changeSuccess, setChangeSuccess] = useState(false)\n  const [loading, setLoading] = useState(false)\n\n  useEffect(() => {\n    const checkSecret = async () => {\n      const { type, message } = await authService.checkSecret({\n        code,\n        secretType: 'RECOVER_PASSWORD'\n      })\n      if (type === 'error') {\n        setAlert({ type, message })\n        setSecretError(true)\n      }\n    }\n\n    if (\n      code.match(\n        /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i\n      )\n    ) {\n      checkSecret()\n    } else {\n      setAlert({ type: 'error', message: 'Неверный секретный код!' })\n      setSecretError(true)\n    }\n  }, [code])\n\n  const onFinish = async (values: IFormValues) => {\n    try {\n      setAlert(emptyMessage)\n      setLoading(true)\n\n      const { password } = values\n      const { type, message } = await authService.changePassword({\n        code,\n        password\n      })\n\n      if (message) {\n        setAlert({ type, message })\n        setLoading(false)\n        if (type === 'error') return\n      }\n\n      setChangeSuccess(true)\n      setLoading(false)\n    } catch (error) {\n      setAlert(error)\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"flex-center\">\n      <Card className=\"card\" title=\"Изменение пароля\">\n        {alert.message && (\n          <Alert\n            className=\"alert\"\n            message={alert.message}\n            type={alert.type as any}\n          />\n        )}\n\n        {changeSuccess && (\n          <p>\n            Теперь Вы можете <Link to=\"/auth/login\">Войти</Link> в приложение\n          </p>\n        )}\n\n        {!secretError && !changeSuccess && (\n          <>\n            <p>Придумайте новый пароль</p>\n            <Form\n              name=\"change-password-request\"\n              initialValues={{ remember: true }}\n              onFinish={onFinish}\n            >\n              <Form.Item\n                name=\"password\"\n                rules={[{ required: true, message: 'Введите пароль!' }]}\n              >\n                <Input.Password\n                  placeholder=\"Пароль\"\n                  prefix={<LockOutlined />}\n                  size=\"large\"\n                />\n              </Form.Item>\n\n              <Form.Item\n                name=\"confirmPassword\"\n                dependencies={['password']}\n                rules={[\n                  { required: true, message: 'Введите подтверждение пароля!' },\n                  ({ getFieldValue }) => ({\n                    validator(_, value) {\n                      if (!value || getFieldValue('password') === value) {\n                        return Promise.resolve()\n                      }\n                      return Promise.reject(\n                        new Error('Пароли должны совпадать!')\n                      )\n                    }\n                  })\n                ]}\n              >\n                <Input.Password\n                  placeholder=\"Пароль еще раз\"\n                  prefix={<LockOutlined />}\n                  size=\"large\"\n                />\n              </Form.Item>\n\n              <Button\n                className=\"submit-button\"\n                type=\"primary\"\n                htmlType=\"submit\"\n                size=\"large\"\n                block\n                disabled={loading}\n              >\n                Изменить пароль\n              </Button>\n            </Form>\n          </>\n        )}\n      </Card>\n    </div>\n  )\n}\n\nexport { ChangePassword }\n","import { FC, useState, useEffect } from 'react'\nimport { Card, Alert } from 'antd'\nimport { Link, useParams } from 'react-router-dom'\nimport { authService } from 'services/auth'\n\ninterface IActivationParams {\n  code?: string\n}\n\nconst Activation: FC = () => {\n  const { code }: IActivationParams = useParams()\n  const emptyMessage = { type: '', message: '' }\n  const [alert, setAlert] = useState(emptyMessage)\n\n  useEffect(() => {\n    const activateUser = async () => {\n      const { type, message } = await authService.activate(code)\n      if (message) {\n        setAlert({ type, message })\n      }\n    }\n    activateUser()\n  }, [code])\n\n  return (\n    <div className=\"flex-center\">\n      <Card className=\"card\" title=\"Активация нового пользователя\">\n        {alert.message && (\n          <Alert\n            className=\"alert\"\n            message={alert.message}\n            type={alert.type as any}\n          />\n        )}\n        <Link className=\"login-link\" to=\"/auth/login\">\n          Вход\n        </Link>\n        <Link className=\"link-recover\" to=\"/auth/recover\">\n          Восстановить пароль\n        </Link>\n      </Card>\n    </div>\n  )\n}\n\nexport { Activation }\n","import { FC } from 'react'\nimport { Switch, Route, Redirect } from 'react-router-dom'\n\nimport { PrivateRoute } from 'containers/PrivateRoute'\nimport { Chat } from '../Chat'\nimport { Login } from '../Login'\nimport { Register } from '../Register'\nimport { Recover } from '../Recover'\nimport { ChangePassword } from '../ChangePassword'\nimport { Activation } from '../Activation'\n\nconst Routes: FC = () => (\n  <Switch>\n    <PrivateRoute exact path=\"/\" component={Chat} />\n    <Route path=\"/auth/login\" component={Login} />\n    <Route path=\"/auth/register\" component={Register} />\n    <Route path=\"/auth/activation/:code\" component={Activation} />\n    <Route path=\"/auth/recover\" component={Recover} />\n    <Route path=\"/auth/change-password/:code\" component={ChangePassword} />\n    <Route path=\"*\">\n      <Redirect to=\"/auth/login\" />\n    </Route>\n  </Switch>\n)\n\nexport { Routes }\n","import { FC, useState, useEffect, useRef } from 'react'\nimport { UserDTO } from 'services/auth'\nimport { Layout } from 'antd'\nimport { PrivateContainer } from 'containers/Private'\nimport { sendChannelMessage, sendContactMessage } from 'modules/Chat/actions'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport { useActions } from 'hooks/useActions'\nimport { WS } from 'services/socket'\nimport { Header } from './Header'\nimport { Sidebar } from './Sidebar'\nimport { Routes } from '../Routes'\n\nconst { Content } = Layout\n\nconst App: FC = () => {\n  const [needRecreateRef, setNeedRecreateRef] = useState(0)\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false)\n  // const [onlineUsers, setOnlineUsers] = useState([])\n  const SR = useRef(null)\n  const [dispatchSendChannelMessage, dispatchSendContactMessage] = useActions(\n    [sendChannelMessage, sendContactMessage],\n    null\n  )\n  const activeChannel = useShallowEqualSelector(\n    (state) => state.chat.activeChannel\n  ) as any\n  const user = useShallowEqualSelector((state) => state.auth.user) as UserDTO\n\n  const onSidebarToggle = (isCollapsed: boolean) => {\n    setSidebarCollapsed(isCollapsed)\n  }\n\n  useEffect(() => {\n    if (!WS.socket) return null\n    SR.current = WS.socket\n\n    // Correct reconnection after server emits disconnected event\n    WS.socket.on('disconnect', (reason: string) => {\n      if (reason === 'transport error' || reason === 'ping timeout') {\n        if (!user) return\n        WS.disconnect()\n        WS.connect(user)\n        setNeedRecreateRef((state) => state + 1)\n      }\n    })\n\n    WS.socket.on('users:connected', () => {\n      // users.forEach((user) => {\n      // user.self = user.userId === WS.socket.id\n      // initReactiveProperties(user)\n      // dispatchUpdateUsersOnline(users)\n      // })\n      // put the current user first, and then sort by username\n      // setOnlineUsers(\n      //   users.sort((a, b) => {\n      //     if (a.self) return -1\n      //     if (b.self) return 1\n      //     if (a.username < b.username) return -1\n      //     return a.username > b.username ? 1 : 0\n      //   })\n      // )\n      // dispatchUpdateUsersOnline(users)\n      // eslint-disable-next-line no-console\n      // console.log(onlineUsers)\n    })\n\n    SR.current.on(\n      'channel:message:broadcast',\n      ({ activeChannelId: channelId, message }) => {\n        dispatchSendChannelMessage({\n          activeChannelId: channelId,\n          message\n        })\n      }\n    )\n\n    SR.current.on('contact:message:private', ({ message, from }) => {\n      // eslint-disable-next-line no-console\n      console.log('contact:message:private', message, `from: ${from}`)\n\n      dispatchSendContactMessage({\n        activeChannelId: from,\n        message\n      })\n    })\n\n    return () => {\n      SR.current.off('channel:message:broadcast')\n      SR.current.off('contact:message:private')\n    }\n  }, [\n    user,\n    activeChannel,\n    dispatchSendChannelMessage,\n    dispatchSendContactMessage,\n    needRecreateRef\n  ])\n\n  return (\n    <Layout className=\"wrap-layout\">\n      <PrivateContainer>\n        <Sidebar\n          sidebarCollapsed={sidebarCollapsed}\n          onSidebarToggle={onSidebarToggle}\n        />\n      </PrivateContainer>\n\n      <Layout className=\"site-layout\">\n        <Header\n          sidebarCollapsed={sidebarCollapsed}\n          onSidebarToggle={onSidebarToggle}\n        />\n        <Content className=\"content\">\n          <Routes />\n        </Content>\n      </Layout>\n    </Layout>\n  )\n}\n\nexport { App }\n","import { takeLatest, put, call, fork } from 'redux-saga/effects'\r\nimport { authService } from 'services/auth'\r\nimport { WS } from 'services/socket'\r\nimport {\r\n  userLoginRequest,\r\n  userLogoutRequest,\r\n  userFetchSuccess\r\n} from './actions'\r\nimport {\r\n  initChannelsData,\r\n  initContactsData,\r\n  setActiveChannel\r\n} from '../Chat/actions'\r\n\r\n/** login */\r\nexport function* userLoginRequestFlow({ payload: { data: user, token } }) {\r\n  yield put(userFetchSuccess(user))\r\n  yield call([authService, authService.setToken], token)\r\n  const { channels, contacts } = yield call([WS, WS.connect], user)\r\n  yield put(initChannelsData(channels))\r\n  yield put(initContactsData(contacts))\r\n}\r\nexport function* userLoginWatcher() {\r\n  yield takeLatest(userLoginRequest, userLoginRequestFlow)\r\n}\r\n\r\n/** logout */\r\nexport function* userLogoutRequestFlow() {\r\n  yield call([authService, authService.removeToken])\r\n  yield put(userFetchSuccess(false))\r\n  yield put(setActiveChannel(null))\r\n  yield call([WS, WS.disconnect])\r\n}\r\nexport function* userLogoutWatcher() {\r\n  yield takeLatest(userLogoutRequest, userLogoutRequestFlow)\r\n}\r\n\r\nconst authSagas = function* generator() {\r\n  yield fork(userLoginWatcher)\r\n  yield fork(userLogoutWatcher)\r\n}\r\n\r\nexport { authSagas }\r\n","import { combineReducers } from 'redux'\r\nimport { handleActions } from 'redux-actions'\r\nimport { UserDTO } from 'services/auth'\r\nimport { userFetchSuccess, userFetchFailure, userUpdatePhoto } from './actions'\r\n\r\nexport interface IAuthState {\r\n  user: UserDTO\r\n}\r\n\r\nexport const initialState = {\r\n  user: null\r\n}\r\n\r\nconst user = handleActions(\r\n  {\r\n    [userFetchSuccess]: (_state, action) => action.payload,\r\n    [userFetchFailure]: () => false,\r\n    [userUpdatePhoto]: (state, action) => ({ ...state, photo: action.payload })\r\n  },\r\n  null\r\n)\r\n\r\nconst authReducer = combineReducers<IAuthState>({\r\n  user\r\n})\r\n\r\nexport { authReducer }\r\n","import { combineReducers } from 'redux'\r\nimport { handleActions } from 'redux-actions'\r\nimport {\r\n  setActiveChannel,\r\n  initChannelsData,\r\n  initContactsData,\r\n  sendChannelMessage,\r\n  sendContactMessage,\r\n  addChannel\r\n} from './actions'\r\n\r\nexport interface IActiveChannel {\r\n  id: number | null\r\n  name: string\r\n  type: string\r\n}\r\n\r\nexport interface IChatState {\r\n  activeChannel: IActiveChannel\r\n  channels: Object\r\n  contacts: Object\r\n}\r\n\r\nexport const initialState: IChatState = {\r\n  activeChannel: null,\r\n  channels: null,\r\n  contacts: null\r\n}\r\n\r\nconst activeChannel = handleActions(\r\n  {\r\n    [setActiveChannel]: (_state, action) => action.payload\r\n  },\r\n  null\r\n)\r\n\r\nconst addMessage = (state, action) => ({\r\n  ...state,\r\n  [action.payload.activeChannelId]: {\r\n    ...state[action.payload.activeChannelId],\r\n    messages: [\r\n      ...state[action.payload.activeChannelId].messages,\r\n      action.payload.message\r\n    ]\r\n  }\r\n})\r\n\r\nconst channels = handleActions(\r\n  {\r\n    [initChannelsData]: (_state, action) => action.payload,\r\n    [sendChannelMessage]: addMessage,\r\n    [addChannel]: (state, action) => ({\r\n      ...state,\r\n      [action.payload.id]: {\r\n        ownerId: action.payload.ownerId,\r\n        name: action.payload.name,\r\n        members: action.payload.members,\r\n        photo: action.payload.photo,\r\n        type: action.payload.type,\r\n        messages: []\r\n      }\r\n    })\r\n  },\r\n  null\r\n)\r\n\r\nconst contacts = handleActions(\r\n  {\r\n    [initContactsData]: (_state, action) => action.payload,\r\n    [sendContactMessage]: addMessage\r\n  },\r\n  null\r\n)\r\n\r\nconst chatReducer = combineReducers<IChatState>({\r\n  activeChannel,\r\n  channels,\r\n  contacts\r\n})\r\n\r\nexport { chatReducer }\r\n","import { call, put } from 'redux-saga/effects'\nimport { authService } from 'services/auth'\nimport { WS } from 'services/socket'\nimport { userFetchSuccess, userFetchFailure } from './Auth/actions'\nimport { initChannelsData, initContactsData } from './Chat/actions'\n\n/** Launch saga once when on app start */\nconst launchSaga = function* launchSaga() {\n  try {\n    const token = yield call([authService, authService.getToken])\n\n    if (!token) {\n      yield put(userFetchFailure())\n      return\n    }\n    const { data: user } = yield call([authService, authService.fetchByToken], {\n      token\n    })\n\n    if (!user) {\n      yield call([authService, authService.removeToken])\n      yield put(userFetchFailure())\n      return\n    }\n\n    yield put(userFetchSuccess(user))\n    const { channels, contacts } = yield call([WS, WS.connect], user)\n    yield put(initChannelsData(channels))\n    yield put(initContactsData(contacts))\n  } catch (error) {\n    yield call([authService, authService.removeToken])\n    yield put(userFetchFailure(error))\n  }\n}\n\nexport { launchSaga }\n","import { combineReducers } from 'redux'\nimport { fork } from 'redux-saga/effects'\nimport { authSagas } from './Auth/sagas'\nimport { authReducer, IAuthState } from './Auth/reducer'\nimport { chatReducer, IChatState } from './Chat/reducer'\nimport { launchSaga } from './launchSaga'\n\n// Root state interface\nexport interface IRootState {\n  auth: IAuthState\n  chat: IChatState\n}\n\nexport const initialState: IRootState = {\n  auth: { user: null },\n  chat: {\n    activeChannel: null,\n    channels: null,\n    contacts: null\n  }\n}\n\n// Root reducer\nexport const rootReducer = combineReducers({\n  auth: authReducer,\n  chat: chatReducer\n})\n\n// Root saga\nexport function* rootSaga() {\n  yield fork(authSagas)\n  yield fork(launchSaga)\n}\n","import { createStore, compose, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport createSagaMiddleware from 'redux-saga'\nimport { rootReducer, rootSaga } from 'modules'\n\nconst createAppStore = () => {\n  const sagaMiddleware = createSagaMiddleware()\n  const store = createStore(\n    rootReducer,\n    compose(composeWithDevTools(applyMiddleware(sagaMiddleware)))\n  )\n\n  sagaMiddleware.run(rootSaga)\n  return store\n}\n\nexport { createAppStore }\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\n// eslint-disable-next-line import/no-default-export\nexport default reportWebVitals\n","import { StrictMode } from 'react'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport { render } from 'react-dom'\nimport { App } from 'components/App'\nimport { createAppStore } from 'modules/store'\nimport reportWebVitals from 'reportWebVitals'\nimport 'index.scss'\n\nconst store = createAppStore()\n\nrender(\n  <StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}