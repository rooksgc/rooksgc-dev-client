{"version":3,"sources":["hooks/useShallowEqualSelector.ts","containers/Private.tsx","modules/Chat/actions.ts","hooks/useActions.ts","services/api.ts","services/chat.ts","services/notification.ts","services/socket.ts","components/App/Header/MainMenu/index.tsx","modules/Modals/actions.ts","modules/Auth/actions.ts","containers/ModalWindow.tsx","services/user.ts","components/PhotoUploader/index.tsx","components/Modals/UserProfile/index.tsx","components/App/Header/UserMenu/index.tsx","components/Modals/ContactInfo/index.tsx","containers/Scrollbar.tsx","components/Modals/ChannelInfo/index.tsx","components/Modals/AddToChannel/index.tsx","components/App/Header/index.tsx","components/Modals/CreateChannel/index.tsx","components/Modals/AddContact/index.tsx","components/App/Sidebar/SidebarMenu/index.tsx","components/App/Sidebar/index.tsx","hooks/useEscape.ts","containers/PrivateRoute.tsx","services/auth.ts","components/Auth/Login/index.tsx","components/Auth/ChangePassword/index.tsx","components/Auth/Activation/index.tsx","components/Auth/Register/index.tsx","components/Auth/Recover/index.tsx","components/Chat/Messages/index.tsx","components/Chat/InputMessage/index.tsx","components/Chat/index.tsx","components/Routes/index.tsx","components/App/index.tsx","modules/Auth/sagas.ts","modules/Auth/reducer.ts","modules/Chat/reducer.ts","modules/Modals/reducer.ts","modules/launchSaga.ts","modules/index.ts","modules/store.ts","reportWebVitals.ts","index.tsx"],"names":["useShallowEqualSelector","selector","useSelector","shallowEqual","PrivateContainer","children","state","auth","user","addChannel","createAction","removeChannel","setActiveChannel","initChannelsData","populateChannel","addChannelMember","removeChannelMember","addContact","removeContact","initContactsData","sendChannelMessage","sendContactMessage","useActions","actions","deps","dispatch","useDispatch","useMemo","Array","isArray","map","a","bindActionCreators","AUTH_TOKEN_STORAGE_KEY","makeError","error","data","response","status","message","type","apiService","getToken","localStorage","getItem","send","method","endpoint","payload","axios","interceptors","request","use","config","token","headers","Authorization","NotificationPlacement","chatService","createChannel","api","getChannels","channels","channelsList","populatedChannels","length","reduce","acc","id","ownerId","name","members","photo","messages","populated","getContacts","contactsList","userId","contacts","populatedContacts","email","role","isContactRequest","isInvite","text","inviteToContacts","contactId","removeInvite","inviterId","addToChannel","leaveChannel","socketService","socket","undefined","connect","io","autoConnect","subscribeToChannels","Object","keys","emit","subscribeToChannel","channelId","channelName","userName","inviteToChannel","disconnect","subscribeToDisconnect","on","reason","subscribeToChannelMessageBroadcast","cb","activeChannelId","subscribeToContactMessagePrivate","from","inviteContactRequest","to","contact","subscribeToInviteContact","addContactRequest","removeInviteRequest","subscribeToRemoveInvite","cancelInviteRequest","subscribeToCancelInvite","subscribeToAddContact","addToChannelRequest","inviterName","channel","subscribeToAddToChannel","subscribeToChannelMemberLeave","unsubscribeFromSocketEvents","forEach","event","off","notify","description","notification","info","placement","BOTTOM_RIGHT","success","menuItems","key","label","path","icon","PieChartOutlined","MainMenu","location","useLocation","history","useHistory","find","item","pathname","mode","selectedKeys","onClick","clicked","_item","push","Item","changeCreateChannelModalState","changeUserProfileModalState","changeAddContactModalState","changeContactInfoModalState","changeChannelInfoModalState","changeAddToChannelModalState","userLoginRequest","userLogoutRequest","userFetchSuccess","userFetchFailure","userUpdatePhoto","userAddContact","userRemoveContact","userRemoveChannel","ModalWindow","props","centered","title","visible","onOk","onCancel","afterClose","destroyOnClose","footer","style","userService","changePhoto","populateUsers","beforeUpload","file","isJpgOrPng","isLt2M","size","getBase64","src","url","Promise","resolve","reader","FileReader","readAsDataURL","originFileObj","onload","img","Image","target","result","el","elem","document","createElement","scaleFactor","width","height","ctx","getContext","drawImage","srcEncoded","canvas","toDataURL","onPreview","image","window","open","write","outerHTML","PhotoUploader","preloadedPhoto","onChangePhoto","onRemovePhoto","initialPhoto","useState","fileList","setFileList","onChange","newFileList","imageUrl","className","rotate","shape","modalTitle","modalOk","modalCancel","listType","customRequest","options","onSuccess","UserProfile","loading","setLoading","setPhoto","userProfile","modals","dispatchUserUpdatePhoto","dispatchChangeUserProfileModalState","onSaveChanges","indicator","LoadingOutlined","fontSize","spin","delay","disabled","UserMenu","dispatchUserLogoutRequest","menu","ProfileOutlined","Divider","LogoutOutlined","overlay","trigger","UserOutlined","Title","Typography","Paragraph","Text","ContactInfo","activeContact","dispatchChangeContactInfoModalState","dispatchRemoveContact","dispatchUserRemoveContact","dispatchActiveChannel","dispatchAddContact","chat","contactInfo","removeContactHandler","serverMessage","cancelInviteHandler","removeInviteHandler","addContactHandler","align","flex","level","block","danger","QuestionCircleOutlined","color","okText","cancelText","onConfirm","renderTrackVertical","ownProps","backgroundColor","right","bottom","top","borderRadius","renderThumbVertical","boxShadow","Scrollbar","hideTracksWhenNotNeeded","autoHide","autoHideTimeout","ChannelInfo","activeChannel","dispatchChangeChannelInfoModalState","dispatchChangeAddToChannelModalState","disaptchPopulateChannel","dispatchRemoveChannel","dispatchUserRemoveChannel","dispatchSetActiveChannel","channelInfo","useEffect","ids","JSON","stringify","owner","member","populateChannelRequest","leaveChannelHandler","header","PlusCircleOutlined","itemLayout","dataSource","renderItem","Meta","avatar","ClockCircleTwoTone","StarOutlined","AddToChannel","addToChannelModalState","Form","useForm","form","dispatchAddChannelMember","addToChannelHandler","values","resetFields","invitedUser","layout","onFinish","rules","required","min","prefix","MailOutlined","placeholder","htmlType","AntHeader","Layout","Header","chatInfoRef","useRef","onSidebarToggle","sidebarCollapsed","onTriggerClick","menuTrigger","MenuUnfoldOutlined","padding","MenuFoldOutlined","membersCount","activeChat","onKeyDown","current","focus","ref","tabIndex","CreateChannel","dispatchAddChannel","dispatchChangeCreateChannelModalState","createChannelHandler","activeChannelPayload","max","TextArea","Input","AddContact","addContactModalState","dispatchChangeAddContactModalState","inviterEmail","inviterContacts","addContactPayload","contactAdded","rows","SidebarMenu","UsergroupAddOutlined","UserAddOutlined","ContactsOutlined","SettingOutlined","MenuOutlined","Sider","Sidebar","onEscape","sidebarLocked","setSidebarLocked","handleEsc","addEventListener","removeEventListener","onClickMenu","split","channelType","intChannelId","parseInt","selectedMenuKey","collapsed","collapsedWidth","theme","overflow","LockOutlined","UnlockOutlined","entries","PrivateRoute","Component","component","rest","render","routeProps","defaultProps","authService","register","activate","code","login","fetchByToken","recover","checkSecret","changePassword","setToken","setItem","removeToken","removeItem","Login","emptyMessage","alert","setAlert","dispatchUserLoginRequest","loginHandler","password","initialValues","remember","Password","noStyle","ChangePassword","useParams","secretError","setSecretError","changeSuccess","setChangeSuccess","secretType","match","changePasswordHandler","dependencies","getFieldValue","validator","_","value","reject","Error","Activation","activateUser","Register","registerHandler","validateTrigger","pattern","Recover","recoverPasswordHandler","Messages","InputMessage","memo","sendMessage","autoFocus","SendOutlined","Chat","dispatchSendChannelMessage","dispatchSendContactMessage","onSendMessage","useCallback","nanoid","showIcon","responseType","channelData","Routes","exact","Content","App","setSidebarCollapsed","dispatchInitChannelsData","dispatchInitContactsData","dispatchRemoveChannelMember","isCollapsed","channelsData","contactsData","subscribeToSocketEvents","userLoginRequestFlow","userLoginWatcher","userLogoutRequestFlow","userLogoutWatcher","put","call","takeEvery","authSagas","generator","fork","handleActions","_state","action","updatedContacts","parse","filter","updatedChannels","oldContacts","authReducer","combineReducers","addMessage","newState","updatedMembers","chatReducer","modalsReducer","launchSaga","rootSaga","rootReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","sagaMiddleware","createSagaMiddleware","createStore","compose","composeWithDevTools","applyMiddleware","run","createAppStore","getElementById"],"mappings":"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","file":"static/js/main.dbc81918.chunk.js","sourcesContent":["import { useSelector, shallowEqual } from 'react-redux'\nimport { IRootState } from 'modules'\n\nconst useShallowEqualSelector = (selector: any) =>\n  useSelector<IRootState>(selector, shallowEqual)\n\nexport { useShallowEqualSelector }\n","import { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\n\nconst PrivateContainer = ({ children }) => {\n  const user = useShallowEqualSelector((state) => state.auth.user)\n  if (!user) return null\n\n  return children\n}\n\nexport { PrivateContainer }\n","import { createAction } from 'redux-actions'\r\n\r\n/** Добавление нового канала */\r\nexport const addChannel: any = createAction('CHAT/ADD_CHANNEL')\r\n/** Удаление канала */\r\nexport const removeChannel: any = createAction('CHAT/REMOVE_CHANNEL')\r\n/** Установить активный канал чата (id, label) */\r\nexport const setActiveChannel: any = createAction('CHAT/SET_ACTIVE_CHANNEL')\r\n/** Начальное состояние каналов на момент захода пользователя */\r\nexport const initChannelsData: any = createAction('CHAT/INIT_CHANNELS_DATA')\r\n/** Дополнить данные о канале */\r\nexport const populateChannel: any = createAction('CHAT/POPULATE_CHANNEL')\r\n/** Добавить пользователя в канал */\r\nexport const addChannelMember: any = createAction('CHAT/ADD_CHANNEL_MEMBER')\r\n/** Удаление пользователя из канала (broadcast) */\r\nexport const removeChannelMember: any = createAction(\r\n  'CHAT/REMOVE_CHANNEL_MEMBER'\r\n)\r\n\r\n/** Добавление нового контакта */\r\nexport const addContact: any = createAction('CHAT/ADD_CONTACT')\r\n/** Удаление контакта */\r\nexport const removeContact: any = createAction('CHAT/REMOVE_CONTACT')\r\n/** Начальное состояние контактов на момент захода пользователя */\r\nexport const initContactsData: any = createAction('CHAT/INIT_CONTACTS_DATA')\r\n/** Отправить сообщение в чат канала */\r\nexport const sendChannelMessage: any = createAction('CHAT/SEND_CHANNEL_MESSAGE')\r\n/** Отправить приватное сообщение пользователю */\r\nexport const sendContactMessage: any = createAction('CHAT/SEND_CONTACT_MESSAGE')\r\n","import { bindActionCreators } from 'redux'\nimport { useDispatch } from 'react-redux'\nimport { useMemo } from 'react'\n\nconst useActions = (actions, deps) => {\n  const dispatch = useDispatch()\n\n  return useMemo(\n    () => {\n      if (Array.isArray(actions)) {\n        return actions.map((a) => bindActionCreators(a, dispatch))\n      }\n      return bindActionCreators(actions, dispatch)\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    deps ? [dispatch, ...deps] : [dispatch]\n  )\n}\n\nexport { useActions }\n","import axios, { AxiosRequestConfig, AxiosResponse } from 'axios'\n\nexport interface IServerResponse {\n  type: any\n  message?: string\n  data?: any\n  errors?: string[]\n  token?: string\n}\n\ninterface IServerError {\n  response: IErrorResponse\n}\n\ninterface IErrorResponse {\n  data?: any\n  status: number\n}\n\n/** Сообщение при недоступном соединении */\nexport const SERVER_UNAVAILABLE =\n  'Сервер не отвечает или временно недоступен. Попробуйте повторить запрос позднее.'\n\n/** Ключ, по которому в localStorage хранится токен */\nexport const AUTH_TOKEN_STORAGE_KEY = 'auth'\n\n/** Отказ в предоставлении ресурса из-за неверного токена */\nexport const AUTH_REJECTION_MESSAGE =\n  'Войдите или зарегистрируйтесь для просмотра данного содержимого.'\n\nexport const makeError = (error: IServerError): IServerResponse => {\n  const data = error?.response?.data\n  const status = error?.response?.status\n\n  if (typeof data === 'string' && (status === 502 || status === 500)) {\n    return {\n      type: 'error',\n      message: SERVER_UNAVAILABLE\n    }\n  }\n\n  if (data?.message === 'No authorization token was found') {\n    return {\n      type: 'error',\n      message: AUTH_REJECTION_MESSAGE\n    }\n  }\n\n  return data\n}\n\nconst apiService = {\n  getToken: (): string | null => localStorage.getItem(AUTH_TOKEN_STORAGE_KEY),\n\n  send: async ({\n    method,\n    endpoint,\n    payload = {}\n  }): Promise<IServerResponse> => {\n    try {\n      const response: AxiosResponse = await axios[method](endpoint, payload)\n      return response.data\n    } catch (error) {\n      return makeError(error)\n    }\n  }\n}\n\naxios.interceptors.request.use(\n  (config: AxiosRequestConfig) => {\n    const token = apiService.getToken()\n\n    if (token) {\n      // eslint-disable-next-line no-param-reassign\n      config.headers = {\n        Authorization: `Bearer ${token}`\n      }\n    }\n\n    return config\n  },\n  (error) => makeError(error)\n)\n\nexport { apiService }\n","import { apiService as api, IServerResponse } from './api'\n\nexport interface ICreateChannelPayload {\n  name: string\n  description?: string\n  photo?: string\n  ownerId: number\n}\n\nexport interface IAddContactRequestPayload {\n  inviterId: number\n  userId: number\n}\n\nexport interface IRemoveContactPayload {\n  userId: number\n  contactId: number\n}\n\nexport interface IInviteToContactsRequestPayload {\n  inviterId: number\n  inviterName: string\n  inviterEmail: string\n  inviterContacts: string\n  email: string\n  text?: string\n}\n\nexport interface ICancelAddContactPayload {\n  inviterId: number\n  userId: number\n}\n\nexport interface IAddToChannelPayload {\n  channelId: number\n  channelName: string\n  email: string\n}\n\nexport interface ILeaveChannelPayload {\n  channelId: number\n  userId: number\n}\n\nconst chatService = {\n  /** Создать канал */\n  createChannel: async (\n    payload: ICreateChannelPayload\n  ): Promise<IServerResponse> =>\n    api.send({\n      method: 'put',\n      endpoint: '/api/v1/chat/channel',\n      payload\n    }),\n\n  /** Получить список каналов пользователя с развернутыми данными */\n  getChannels: async (channels) => {\n    let channelsList = null\n\n    if (channels) {\n      const populatedChannels = await api.send({\n        method: 'post',\n        endpoint: `/api/v1/chat/channels/populate`,\n        payload: { channels }\n      })\n\n      if (populatedChannels?.data?.length) {\n        channelsList = populatedChannels?.data.reduce(\n          (acc, { id, ownerId, name, members, photo }) => ({\n            ...acc,\n            [id]: {\n              ownerId,\n              name,\n              members,\n              type: 'channel',\n              photo,\n              messages: [],\n              populated: false\n            }\n          }),\n          {}\n        )\n      } else {\n        channelsList = null\n      }\n    }\n\n    return channelsList\n  },\n\n  /** Получить список контактов пользователя с развернутыми данными */\n  getContacts: async (user) => {\n    let contactsList = null\n    const { id: userId, contacts } = user\n\n    const populatedContacts = await api.send({\n      method: 'post',\n      endpoint: `/api/v1/chat/contacts/populate`,\n      payload: { userId, contacts }\n    })\n\n    if (populatedContacts?.data?.length) {\n      contactsList = populatedContacts.data.reduce(\n        (\n          acc,\n          { id, name, email, photo, role, isContactRequest, isInvite, text }\n        ) => ({\n          ...acc,\n          [id]: {\n            name,\n            email,\n            photo,\n            role,\n            isContactRequest,\n            isInvite,\n            text,\n            type: 'contact',\n            messages: []\n          }\n        }),\n        {}\n      )\n    } else {\n      contactsList = null\n    }\n\n    return contactsList\n  },\n\n  /** Добавление нового контакта */\n  addContact: async (\n    payload: IAddContactRequestPayload\n  ): Promise<IServerResponse> =>\n    api.send({\n      method: 'patch',\n      endpoint: '/api/v1/chat/contacts',\n      payload\n    }),\n\n  /** Запрос на добавление в контакты */\n  inviteToContacts: async (\n    payload: IInviteToContactsRequestPayload\n  ): Promise<IServerResponse> =>\n    api.send({\n      method: 'put',\n      endpoint: '/api/v1/chat/contact/invite',\n      payload\n    }),\n\n  /** Удалить контакт */\n  removeContact: async (\n    payload: IRemoveContactPayload\n  ): Promise<IServerResponse> => {\n    const { userId, contactId } = payload\n    return api.send({\n      method: 'delete',\n      endpoint: `/api/v1/chat/${userId}/contact/${contactId}`\n    })\n  },\n\n  /** Отмена инвайта */\n  removeInvite: async (\n    payload: ICancelAddContactPayload\n  ): Promise<IServerResponse> => {\n    const { inviterId, userId } = payload\n    return api.send({\n      method: 'delete',\n      endpoint: `/api/v1/chat/inviter/${inviterId}/contact/${userId}`\n    })\n  },\n\n  /** Добавление пользователя в канал */\n  addToChannel: async (\n    payload: IAddToChannelPayload\n  ): Promise<IServerResponse> =>\n    api.send({\n      method: 'patch',\n      endpoint: '/api/v1/chat/channel/adduser',\n      payload\n    }),\n\n  /** Покидание канал пользователем */\n  leaveChannel: async (\n    payload: ILeaveChannelPayload\n  ): Promise<IServerResponse> =>\n    api.send({\n      method: 'patch',\n      endpoint: '/api/v1/chat/channel/leave',\n      payload\n    })\n}\n\nexport { chatService }\n","import { notification } from 'antd'\n\nenum NotificationPlacement {\n  TOP_LEFT = 'topLeft',\n  TOP_RIGHT = 'topRight',\n  BOTTOM_LEFT = 'bottomLeft',\n  BOTTOM_RIGHT = 'bottomRight'\n}\n\n// @todo refactor\nconst notify = {\n  info: (message: string, description: string = ''): void =>\n    notification.info({\n      message,\n      description,\n      placement: NotificationPlacement.BOTTOM_RIGHT\n    }),\n  success: (message: string, description: string = ''): void =>\n    notification.success({\n      message,\n      description,\n      placement: NotificationPlacement.BOTTOM_RIGHT\n    }),\n  warning: (message: string, description: string = ''): void =>\n    notification.warning({\n      message,\n      description,\n      placement: NotificationPlacement.BOTTOM_RIGHT\n    }),\n  error: (message: string, description: string = ''): void =>\n    notification.error({\n      message,\n      description,\n      placement: NotificationPlacement.BOTTOM_RIGHT\n    })\n}\n\nexport { notify }\n","import { io } from 'socket.io-client'\nimport { chatService } from 'services/chat'\nimport { UserDTO } from './user'\n\nconst socketService = {\n  socket: undefined,\n\n  // Соединение по WebSocket\n  connect: async (user: UserDTO) => {\n    if (!socketService.socket) {\n      socketService.socket = io('/chat', { autoConnect: false })\n      socketService.socket.auth = { userId: user.id }\n      socketService.socket.connect()\n    }\n  },\n\n  // Подписка на список каналов\n  subscribeToChannels: async (user: UserDTO) => {\n    const channels = await chatService.getChannels(user.channels)\n    const contacts = await chatService.getContacts(user)\n\n    if (channels) {\n      const channelsList = Object.keys(channels)\n      socketService.socket.emit('channels:subscribe', channelsList)\n    }\n\n    return { channels, contacts }\n  },\n\n  // Подписка на канал\n  subscribeToChannel: async (channelId: number) => {\n    socketService.socket.emit('channel:subscribe', channelId)\n  },\n\n  // Пользователь покинул канал\n  leaveChannel: async ({ channelId, channelName, userId, userName }) => {\n    socketService.socket.emit('channel:leave', {\n      channelId,\n      channelName,\n      userId,\n      userName\n    })\n  },\n\n  // Приглашение пользователя в канал\n  inviteToChannel: async (userId: number, channelId: number) => {\n    socketService.socket.emit('channel:invite', { userId, channelId })\n  },\n\n  // Отправка сообщения в канал\n  sendChannelMessage: (payload) => {\n    socketService.socket.emit('channel:message:send', payload)\n  },\n\n  // Отправка сообщения выбранному пользователю (ЛС)\n  sendContactMessage: (payload) => {\n    socketService.socket.emit('contact:message:send', payload)\n  },\n\n  // Ручное отключение от WebSocket\n  disconnect: () => {\n    socketService.socket.disconnect()\n    socketService.socket = undefined\n  },\n\n  /** Ручное пересоздание соединения в случае дисконнекта с серверной стороны */\n  subscribeToDisconnect: (user) => {\n    if (!socketService.socket) return\n\n    socketService.socket.on('disconnect', (reason: string) => {\n      if (reason === 'transport error' || reason === 'ping timeout') {\n        if (!user) return\n        socketService.disconnect()\n        socketService.connect(user)\n      }\n    })\n  },\n\n  subscribeToChannelMessageBroadcast: (cb) => {\n    if (!socketService.socket) return\n\n    socketService.socket.on(\n      'channel:message:broadcast',\n      ({ activeChannelId, message }) => {\n        cb({ activeChannelId, message })\n      }\n    )\n  },\n\n  subscribeToContactMessagePrivate: (cb) => {\n    if (!socketService.socket) return\n\n    socketService.socket.on('contact:message:private', ({ message, from }) => {\n      cb(message, from)\n    })\n  },\n\n  inviteContactRequest: ({ to, contact }) => {\n    socketService.socket.emit('contact:invite:request', { to, contact })\n  },\n\n  subscribeToInviteContact: (cb) => {\n    if (!socketService.socket) return\n\n    socketService.socket.on('contact:invite', (payload) => {\n      cb(payload)\n    })\n  },\n\n  addContactRequest: ({ to, contact }) => {\n    socketService.socket.emit('contact:add:request', { to, contact })\n  },\n\n  removeInviteRequest: ({ to, contact }) => {\n    socketService.socket.emit('invite:remove:request', { to, contact })\n  },\n\n  subscribeToRemoveInvite: (cb) => {\n    if (!socketService.socket) return\n\n    socketService.socket.on('invite:remove', (payload) => {\n      cb(payload)\n    })\n  },\n\n  cancelInviteRequest: ({ to, contact }) => {\n    socketService.socket.emit('invite:cancel:request', { to, contact })\n  },\n\n  subscribeToCancelInvite: (cb) => {\n    if (!socketService.socket) return\n\n    socketService.socket.on('invite:cancel', (payload) => {\n      cb(payload)\n    })\n  },\n\n  subscribeToAddContact: (cb) => {\n    if (!socketService.socket) return\n\n    socketService.socket.on('contact:add', (payload) => {\n      cb(payload)\n    })\n  },\n\n  addToChannelRequest: ({ to, inviterName, channel }) => {\n    socketService.socket.emit('channel:adduser:request', {\n      to,\n      inviterName,\n      channel\n    })\n  },\n\n  subscribeToAddToChannel: (cb) => {\n    if (!socketService.socket) return\n\n    socketService.socket.on('channel:adduser', (payload) => {\n      cb(payload)\n    })\n  },\n\n  subscribeToChannelMemberLeave: (cb) => {\n    if (!socketService.socket) return\n\n    socketService.socket.on('channel:member:leave', (payload) => {\n      cb(payload)\n    })\n  },\n\n  unsubscribeFromSocketEvents: () => {\n    if (!socketService.socket) return\n\n    const events = [\n      'channel:message:send',\n      'channel:message:broadcast',\n      'contact:message:private',\n      'channel:member:leave',\n      'channel:adduser:request',\n      'channel:adduser',\n      'contact:message:send',\n      'contact:invite:request',\n      'contact:invite',\n      'contact:add:request',\n      'contact:add',\n      'invite:remove:request',\n      'invite:remove',\n      'invite:cancel:request',\n      'invite:cancel'\n    ]\n\n    events.forEach((event) => {\n      socketService.socket.off(event)\n    })\n  }\n}\n\nexport { socketService }\n","import { FC } from 'react'\nimport { useLocation, useHistory } from 'react-router-dom'\nimport { Menu } from 'antd'\nimport { PieChartOutlined } from '@ant-design/icons'\n\nconst menuItems = [\n  {\n    key: 'login',\n    label: 'Войти',\n    path: '/auth/login',\n    icon: <PieChartOutlined />\n  },\n  {\n    key: 'register',\n    label: 'Регистрация',\n    path: '/auth/register',\n    icon: <PieChartOutlined />\n  }\n]\n\nconst MainMenu: FC = () => {\n  const location = useLocation()\n  const history = useHistory()\n\n  const key = menuItems.find((item) => location.pathname === item.path)?.key\n  if (!key) return null\n\n  const onClickMenu = (item) => {\n    if (item.key === key) return\n    const clicked = menuItems.find((_item) => _item.key === item.key)\n    history.push(clicked.path)\n  }\n\n  return (\n    <Menu mode=\"horizontal\" selectedKeys={[key]} onClick={onClickMenu}>\n      {menuItems.map((item) => (\n        <Menu.Item key={item.key} icon={item.icon}>\n          {item.label}\n        </Menu.Item>\n      ))}\n    </Menu>\n  )\n}\n\nexport { MainMenu }\n","import { createAction } from 'redux-actions'\n\n/** Модальное окно создания канала */\nexport const changeCreateChannelModalState: any = createAction(\n  'MODALS/CHANGE_CREATE_CHANNEL_MODAL_STATE'\n)\n/** Модальное окно профиля пользователя */\nexport const changeUserProfileModalState: any = createAction(\n  'MODALS/CHANGE_USER_PROFILE_MODAL_STATE'\n)\n/** Модальное окно добавления контакта */\nexport const changeAddContactModalState: any = createAction(\n  'MODALS/CHANGE_ADD_CONTACT_MODAL_STATE'\n)\n\n/** Модальное окно информации о контакте */\nexport const changeContactInfoModalState: any = createAction(\n  'MODALS/CHANGE_CONTACT_INFO_MODAL_STATE'\n)\n\n/** Модальное окно информации о канале */\nexport const changeChannelInfoModalState: any = createAction(\n  'MODALS/CHANGE_CHANNEL_INFO_MODAL_STATE'\n)\n\n/** Модальное окно добавления пользователя в канал */\nexport const changeAddToChannelModalState: any = createAction(\n  'MODALS/CHANGE_ADD_TO_CHANNEL_MODAL_STATE'\n)\n","import { createAction } from 'redux-actions'\r\n\r\n/** Записать токен пользователя в стор */\r\nexport const userLoginRequest: any = createAction('AUTH/USER_LOGIN_REQUEST')\r\n\r\n/** Выход пользователя из системы (logout) */\r\nexport const userLogoutRequest: any = createAction('AUTH/USER_LOGOUT_REQUEST')\r\n\r\n/** Записать объект пользователя в стор */\r\nexport const userFetchSuccess: any = createAction('AUTH/USER_FETCH_SUCCESS')\r\n\r\n/** Ошибка получения объекта пользователя */\r\nexport const userFetchFailure: any = createAction('AUTH/USER_FETCH_FAILURE')\r\n\r\n/** Обновление объекта пользователя (фото) */\r\nexport const userUpdatePhoto: any = createAction('AUTH/USER_UPDATE_PHOTO')\r\n\r\n/** Добавление контакта пользователя */\r\nexport const userAddContact: any = createAction('AUTH/USER_ADD_CONTACT')\r\n\r\n/** Удаление контакта пользователя */\r\nexport const userRemoveContact: any = createAction('AUTH/USER_REMOVE_CONTACT')\r\n\r\n/** Удаление канала у пользователя */\r\nexport const userRemoveChannel: any = createAction('AUTH/USER_REMOVE_CHANNEL')\r\n","import { FC, Component, ReactElement } from 'react'\nimport { Modal } from 'antd'\n\ninterface IModalWindowProps {\n  title?: string\n  visible?: boolean\n  centered?: boolean\n  onOk?: () => any | null\n  onCancel?: () => any | null\n  afterClose?: () => any | null\n  destroyOnClose?: boolean\n  footer?: Component[] | FC[] | ReactElement[] | null\n  style?: object | null\n}\n\nconst ModalWindow: FC<IModalWindowProps> = (props) => {\n  const {\n    children,\n    centered = true,\n    title = '',\n    visible = false,\n    onOk = null,\n    onCancel = null,\n    afterClose = null,\n    destroyOnClose = true,\n    footer = null,\n    style = null\n  } = props\n\n  return (\n    <Modal\n      centered={centered}\n      title={title}\n      visible={visible}\n      onOk={onOk}\n      onCancel={onCancel}\n      afterClose={afterClose}\n      destroyOnClose={destroyOnClose}\n      footer={footer}\n      style={style}\n    >\n      {children}\n    </Modal>\n  )\n}\n\nexport { ModalWindow }\n","import { apiService as api, IServerResponse } from './api'\n\nexport interface UserDTO {\n  id: number\n  name: string\n  email: string\n  photo: string\n  role: string\n  channels: string\n  contacts: string\n}\n\nexport interface IChangePhotoRequestPayload {\n  id: number\n  photo: string\n}\n\nexport interface IPopulateUsersPayload {\n  ids: string\n}\n\nconst userService = {\n  /** Изменить или удалить фото пользователя */\n  changePhoto: async (\n    payload: IChangePhotoRequestPayload\n  ): Promise<IServerResponse> =>\n    api.send({\n      method: 'patch',\n      endpoint: '/api/v1/user/photo',\n      payload\n    }),\n\n  /** Получить информацию о нескольких пользователях */\n  populateUsers: async (\n    payload: IPopulateUsersPayload\n  ): Promise<IServerResponse> =>\n    api.send({\n      method: 'post',\n      endpoint: '/api/v1/users/populate',\n      payload\n    })\n}\n\nexport { userService }\n","import { FC, useState } from 'react'\nimport { message, Upload } from 'antd'\nimport ImgCrop from 'antd-img-crop'\n\ninterface IPhotoUploaderProps {\n  /** base64 photo url */\n  preloadedPhoto?: string | null\n  onChangePhoto?: (imageUrl: string) => void\n  onRemovePhoto?: () => void\n}\n\nconst beforeUpload = (file) => {\n  const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png'\n  if (!isJpgOrPng) {\n    message.error('Допустимые форматы файлов: JPG или PNG!')\n  }\n  const isLt2M = file.size / 1024 / 1024 < 2\n  if (!isLt2M) {\n    message.error('Размер изображения не должен превышать 2Мб!')\n  }\n  return isJpgOrPng && isLt2M\n}\n\nconst getBase64 = async (file): Promise<string> => {\n  let src = file.url\n  const resizeWidth = 300\n\n  if (!src) {\n    src = await new Promise((resolve) => {\n      const reader = new FileReader()\n      reader.readAsDataURL(file.originFileObj)\n      reader.onload = (event) => {\n        const img = new Image()\n        img.src = event.target.result as string\n        img.onload = (el: any) => {\n          const elem = document.createElement('canvas')\n          const scaleFactor = resizeWidth / el.target.width\n          elem.width = resizeWidth\n          elem.height = el.target.height * scaleFactor\n          const ctx = elem.getContext('2d')\n          ctx.drawImage(el.target, 0, 0, elem.width, elem.height)\n          const srcEncoded = ctx.canvas.toDataURL('image/jpeg', 0.3)\n          resolve(srcEncoded)\n        }\n      }\n    })\n  }\n  return src\n}\n\nconst onPreview = async (file) => {\n  const src = await getBase64(file)\n  const image = new Image()\n  image.src = src\n  const imgWindow = window.open(src)\n  imgWindow.document.write(image.outerHTML)\n}\n\nconst PhotoUploader: FC<IPhotoUploaderProps> = (props) => {\n  const { preloadedPhoto, onChangePhoto, onRemovePhoto } = props\n  const initialPhoto = preloadedPhoto ? [{ url: preloadedPhoto }] : []\n  const [fileList, setFileList] = useState(initialPhoto)\n\n  const customRequest = (options) => {\n    const { onSuccess, file } = options\n    onSuccess(null, file)\n  }\n\n  const onChange = async ({ fileList: newFileList }) => {\n    const file = newFileList[0]\n    if (file?.status === 'done') {\n      const imageUrl = await getBase64(file)\n      onChangePhoto(imageUrl)\n    }\n\n    if (!file) {\n      onRemovePhoto()\n    }\n\n    setFileList(newFileList)\n  }\n\n  return (\n    <div className=\"photo-uploader\">\n      <ImgCrop\n        rotate\n        shape=\"round\"\n        modalTitle=\"Редактировать изображение\"\n        modalOk=\"Применить\"\n        modalCancel=\"Отмена\"\n      >\n        <Upload\n          listType=\"picture-card\"\n          fileList={fileList as any}\n          onChange={onChange}\n          beforeUpload={beforeUpload}\n          onPreview={onPreview}\n          customRequest={customRequest}\n        >\n          {!fileList.length && 'Выбрать фото'}\n        </Upload>\n      </ImgCrop>\n    </div>\n  )\n}\n\nexport { PhotoUploader }\n","import { FC, useState } from 'react'\nimport { Button, Spin, message } from 'antd'\nimport { LoadingOutlined } from '@ant-design/icons'\nimport { ModalWindow } from 'containers/ModalWindow'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport { userService, UserDTO } from 'services/user'\nimport { PhotoUploader } from 'components/PhotoUploader'\nimport { useActions } from 'hooks/useActions'\nimport { changeUserProfileModalState } from 'modules/Modals/actions'\nimport { userUpdatePhoto } from 'modules/Auth/actions'\n\ninterface IUserProfileProps {}\n\nconst UserProfile: FC<IUserProfileProps> = () => {\n  const [loading, setLoading] = useState(false)\n  const [photo, setPhoto] = useState('')\n  const { id, name, email, photo: preloadedPhoto } = useShallowEqualSelector(\n    (state) => state.auth.user\n  ) as UserDTO\n  const userProfile = useShallowEqualSelector(\n    (state) => state.modals.userProfile\n  ) as any\n\n  const [\n    dispatchUserUpdatePhoto,\n    dispatchChangeUserProfileModalState\n  ] = useActions([userUpdatePhoto, changeUserProfileModalState], null)\n\n  const onSaveChanges = async () => {\n    if (photo === '') {\n      dispatchChangeUserProfileModalState(false)\n      return\n    }\n\n    try {\n      setLoading(true)\n\n      const { type, message: serverMessage } = await userService.changePhoto({\n        id,\n        photo\n      })\n\n      if (serverMessage) {\n        if (type === 'error') {\n          setLoading(false)\n          return\n        }\n      }\n\n      setLoading(false)\n      dispatchUserUpdatePhoto(photo)\n      dispatchChangeUserProfileModalState(false)\n    } catch (error) {\n      setLoading(false)\n      message.error(error.message)\n    }\n  }\n\n  return (\n    <ModalWindow\n      title=\"Профиль\"\n      visible={userProfile}\n      onCancel={() => dispatchChangeUserProfileModalState(false)}\n      onOk={() => dispatchChangeUserProfileModalState(false)}\n    >\n      <PhotoUploader\n        preloadedPhoto={preloadedPhoto}\n        onChangePhoto={(imageUrl) => setPhoto(imageUrl)}\n        onRemovePhoto={() => setPhoto(null)}\n      />\n      <p>Имя: {name}</p>\n      <p>Email: {email}</p>\n\n      <div className=\"form-footer\">\n        {loading && (\n          <Spin\n            className=\"center\"\n            indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n            delay={500}\n          />\n        )}\n        <Button\n          key=\"back\"\n          onClick={() => dispatchChangeUserProfileModalState(false)}\n          disabled={loading}\n        >\n          Отмена\n        </Button>\n        <Button type=\"primary\" disabled={loading} onClick={onSaveChanges}>\n          Сохранить\n        </Button>\n      </div>\n    </ModalWindow>\n  )\n}\n\nexport { UserProfile }\n","import { FC } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { Menu, Dropdown, Avatar } from 'antd'\nimport {\n  UserOutlined,\n  LogoutOutlined,\n  ProfileOutlined\n} from '@ant-design/icons'\nimport { useActions } from 'hooks/useActions'\nimport { changeUserProfileModalState } from 'modules/Modals/actions'\n\nimport { userLogoutRequest } from 'modules/Auth/actions'\nimport { UserDTO } from 'services/user'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport { UserProfile } from 'components/Modals/UserProfile'\n\nconst UserMenu: FC = () => {\n  const history = useHistory()\n\n  const { photo } = useShallowEqualSelector(\n    (state) => state.auth.user\n  ) as UserDTO\n\n  const [\n    dispatchUserLogoutRequest,\n    dispatchChangeUserProfileModalState\n  ] = useActions([userLogoutRequest, changeUserProfileModalState], null)\n\n  const handleMenuClick = (event) => {\n    const { key } = event\n\n    switch (key) {\n      case 'profile':\n        dispatchChangeUserProfileModalState(true)\n        break\n      case 'logout':\n        dispatchUserLogoutRequest()\n        history.push('/auth/login')\n        break\n      default:\n        break\n    }\n  }\n\n  const menu = (\n    <Menu onClick={handleMenuClick}>\n      <Menu.Item key=\"profile\" icon={<ProfileOutlined />}>\n        Профиль\n      </Menu.Item>\n      <Menu.Divider />\n      <Menu.Item key=\"logout\" icon={<LogoutOutlined />}>\n        Выход\n      </Menu.Item>\n    </Menu>\n  )\n\n  return (\n    <>\n      <Dropdown overlay={menu} trigger={['click']}>\n        <Avatar\n          size={40}\n          className=\"user-profile\"\n          src={photo}\n          icon={<UserOutlined />}\n        />\n      </Dropdown>\n      <UserProfile />\n    </>\n  )\n}\n\nexport { UserMenu }\n","import { FC, useState } from 'react'\nimport {\n  Button,\n  Avatar,\n  Typography,\n  Row,\n  Col,\n  Divider,\n  Spin,\n  Popconfirm\n} from 'antd'\nimport { LoadingOutlined, QuestionCircleOutlined } from '@ant-design/icons'\nimport { ModalWindow } from 'containers/ModalWindow'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport { UserDTO } from 'services/user'\nimport { chatService } from 'services/chat'\nimport { useActions } from 'hooks/useActions'\nimport { changeContactInfoModalState } from 'modules/Modals/actions'\nimport { IActiveChannel } from 'modules/Chat/reducer'\nimport {\n  removeContact,\n  setActiveChannel,\n  addContact\n} from 'modules/Chat/actions'\nimport { userRemoveContact } from 'modules/Auth/actions'\nimport { socketService } from 'services/socket'\nimport { notify } from 'services/notification'\n\nconst { Title, Paragraph, Text } = Typography\n\ninterface IContactInfoProps {\n  activeContact: IActiveChannel\n}\n\nconst ContactInfo: FC<IContactInfoProps> = (props) => {\n  const { activeContact } = props\n  const [loading, setLoading] = useState(false)\n\n  const [\n    dispatchChangeContactInfoModalState,\n    dispatchRemoveContact,\n    dispatchUserRemoveContact,\n    dispatchActiveChannel,\n    dispatchAddContact\n  ] = useActions(\n    [\n      changeContactInfoModalState,\n      removeContact,\n      userRemoveContact,\n      setActiveChannel,\n      addContact\n    ],\n    null\n  )\n\n  const user = useShallowEqualSelector((state) => state.auth.user) as UserDTO\n\n  const contacts = useShallowEqualSelector(\n    (state) => state.chat.contacts\n  ) as UserDTO\n\n  const contactInfo = useShallowEqualSelector(\n    (state) => state.modals.contactInfo\n  ) as any\n\n  const contact = activeContact && contacts && contacts[activeContact.id]\n  if (!contact) return null\n\n  const { name, email, photo } = contact as UserDTO\n\n  const removeContactHandler = async () => {\n    try {\n      setLoading(true)\n\n      const { type, message: serverMessage } = await chatService.removeContact({\n        userId: user.id,\n        contactId: activeContact.id\n      })\n\n      if (serverMessage) {\n        if (type === 'success') {\n          notify.success(serverMessage)\n        }\n        if (type === 'error') {\n          notify.success(serverMessage)\n          setLoading(false)\n          return\n        }\n      }\n\n      dispatchRemoveContact(activeContact.id)\n      dispatchUserRemoveContact(activeContact.id)\n      dispatchActiveChannel(null)\n      dispatchChangeContactInfoModalState(false)\n\n      setLoading(false)\n    } catch (error) {\n      notify.error(error.message)\n    }\n  }\n\n  const cancelInviteHandler = async () => {\n    try {\n      setLoading(true)\n\n      const { type, message: serverMessage } = await chatService.removeInvite({\n        inviterId: user.id,\n        userId: activeContact.id\n      })\n\n      if (serverMessage) {\n        if (type === 'success') {\n          notify.success(serverMessage)\n        }\n        if (type === 'error') {\n          notify.error(serverMessage)\n          setLoading(false)\n          return\n        }\n      }\n\n      dispatchRemoveContact(activeContact.id)\n      dispatchActiveChannel(null)\n      dispatchChangeContactInfoModalState(false)\n\n      socketService.cancelInviteRequest({ to: activeContact.id, contact: user })\n\n      setLoading(false)\n    } catch (error) {\n      notify.error(error.message)\n    }\n  }\n\n  const removeInviteHandler = async () => {\n    try {\n      setLoading(true)\n\n      const { type, message: serverMessage } = await chatService.removeInvite({\n        inviterId: activeContact.id,\n        userId: user.id\n      })\n\n      if (serverMessage) {\n        if (type === 'success') {\n          notify.success(serverMessage)\n        }\n        if (type === 'error') {\n          notify.error(serverMessage)\n          setLoading(false)\n          return\n        }\n      }\n\n      dispatchRemoveContact(activeContact.id)\n      dispatchActiveChannel(null)\n      dispatchChangeContactInfoModalState(false)\n\n      socketService.removeInviteRequest({ to: activeContact.id, contact: user })\n\n      setLoading(false)\n    } catch (error) {\n      notify.error(error.message)\n    }\n  }\n\n  const addContactHandler = async () => {\n    try {\n      setLoading(true)\n\n      const {\n        type,\n        message: serverMessage,\n        data\n      } = await chatService.addContact({\n        inviterId: activeContact.id,\n        userId: user.id\n      })\n\n      if (serverMessage) {\n        if (type === 'success') {\n          dispatchAddContact({\n            ...data,\n            type: 'contact',\n            messages: []\n          })\n          dispatchActiveChannel({\n            ...data,\n            type: 'contact'\n          })\n\n          socketService.addContactRequest({\n            to: data.id,\n            contact: {\n              ...user,\n              type: 'contact',\n              messages: []\n            }\n          })\n\n          notify.success(serverMessage)\n        }\n        if (type === 'error') {\n          // @todo refactor\n          if (serverMessage === 'Пользователь отменил свое приглашение') {\n            dispatchRemoveContact(activeContact.id)\n            dispatchUserRemoveContact(activeContact.id)\n            dispatchActiveChannel(null)\n          }\n\n          notify.error(serverMessage)\n        }\n      }\n\n      dispatchChangeContactInfoModalState(false)\n      setLoading(false)\n    } catch (error) {\n      notify.error(error.message)\n    }\n  }\n\n  return (\n    <ModalWindow\n      title=\"Информация\"\n      visible={contactInfo}\n      onCancel={() => dispatchChangeContactInfoModalState(false)}\n      onOk={() => dispatchChangeContactInfoModalState(false)}\n    >\n      <Row align=\"middle\">\n        {!contact.isContactRequest && !contact.isInvite && (\n          <Col flex=\"150px\">\n            <Avatar size={128} src={photo} />\n          </Col>\n        )}\n        <Col flex=\"auto\">\n          <Title level={4}>{name}</Title>\n          {email && <Paragraph>Email: {email}</Paragraph>}\n          {contact.isContactRequest && (\n            <Text type=\"secondary\">\n              Отправлен запрос на добавление в список контактов\n            </Text>\n          )}\n          {contact.isInvite && (\n            <Text type=\"secondary\">\n              Пользователь хочет добавить Вас в свой список контактов\n            </Text>\n          )}\n        </Col>\n      </Row>\n      <Divider />\n      <div className=\"form-footer\">\n        {loading && (\n          <Spin\n            className=\"center\"\n            indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n            delay={500}\n          />\n        )}\n        {contact.isContactRequest ? (\n          <Button\n            block\n            danger\n            type=\"default\"\n            onClick={cancelInviteHandler}\n            disabled={loading}\n          >\n            Отменить запрос за добавление\n          </Button>\n        ) : contact.isInvite ? (\n          <div className=\"stretch-container\">\n            <Button block onClick={addContactHandler} disabled={loading}>\n              Добавить\n            </Button>\n            <Button\n              block\n              danger\n              onClick={removeInviteHandler}\n              disabled={loading}\n            >\n              Отказать\n            </Button>\n          </div>\n        ) : (\n          <Popconfirm\n            title=\"Вы уверены?\"\n            icon={<QuestionCircleOutlined style={{ color: 'red' }} />}\n            okText=\"Да\"\n            cancelText=\"Нет\"\n            onConfirm={removeContactHandler}\n          >\n            <Button block danger type=\"default\" disabled={loading}>\n              Удалить контакт\n            </Button>\n          </Popconfirm>\n        )}\n      </div>\n    </ModalWindow>\n  )\n}\n\nexport { ContactInfo }\n","import { FC } from 'react'\nimport { Scrollbars } from 'react-custom-scrollbars'\n\nconst renderTrackVertical = ({ style, ...ownProps }) => (\n  <div\n    {...ownProps}\n    className=\"scrollTrackVertical\"\n    style={{\n      ...style,\n      backgroundColor: '#E5E5E5',\n      right: '2px',\n      bottom: '2px',\n      top: '2px',\n      borderRadius: '3px'\n    }}\n  />\n)\n\nconst renderThumbVertical = ({ style, ...ownProps }) => (\n  <div\n    {...ownProps}\n    className=\"scrollThumbVertical\"\n    style={{\n      ...style,\n      borderRadius: '4px',\n      boxShadow: '0 2px 4px 0 rgba(0, 0, 0, 0.16)',\n      backgroundColor: '#9A9A9A'\n    }}\n  />\n)\n\ninterface IScrollbarProps {\n  style?: { [key: string]: string | number }\n}\n\nconst Scrollbar: FC<IScrollbarProps> = (props) => {\n  const { children, style } = props\n  return (\n    <Scrollbars\n      style={style}\n      hideTracksWhenNotNeeded\n      autoHide\n      autoHideTimeout={400}\n      renderTrackVertical={renderTrackVertical}\n      renderThumbVertical={renderThumbVertical}\n    >\n      {children}\n    </Scrollbars>\n  )\n}\n\nexport { Scrollbar }\n","import { FC, useEffect } from 'react'\nimport {\n  Button,\n  Avatar,\n  Typography,\n  Row,\n  Col,\n  Divider,\n  List,\n  Popconfirm\n} from 'antd'\nimport {\n  ClockCircleTwoTone,\n  PlusCircleOutlined,\n  StarOutlined,\n  QuestionCircleOutlined\n} from '@ant-design/icons'\nimport { ModalWindow } from 'containers/ModalWindow'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport { userService, UserDTO } from 'services/user'\nimport { useActions } from 'hooks/useActions'\nimport {\n  changeChannelInfoModalState,\n  changeAddToChannelModalState\n} from 'modules/Modals/actions'\nimport { IActiveChannel } from 'modules/Chat/reducer'\nimport { userRemoveChannel } from 'modules/Auth/actions'\nimport {\n  populateChannel,\n  removeChannel,\n  setActiveChannel\n} from 'modules/Chat/actions'\nimport { Scrollbar } from 'containers/Scrollbar'\nimport { chatService } from 'services/chat'\nimport { socketService } from 'services/socket'\nimport { notify } from 'services/notification'\n\nconst { Title } = Typography\n\ninterface IChannelInfoProps {\n  activeChannel: IActiveChannel\n}\n\nconst ChannelInfo: FC<IChannelInfoProps> = (props) => {\n  const { activeChannel } = props\n  const [\n    dispatchChangeChannelInfoModalState,\n    dispatchChangeAddToChannelModalState,\n    disaptchPopulateChannel,\n    dispatchRemoveChannel,\n    dispatchUserRemoveChannel,\n    dispatchSetActiveChannel\n  ] = useActions(\n    [\n      changeChannelInfoModalState,\n      changeAddToChannelModalState,\n      populateChannel,\n      removeChannel,\n      userRemoveChannel,\n      setActiveChannel\n    ],\n    null\n  )\n\n  const user = useShallowEqualSelector((state) => state.auth.user) as UserDTO\n\n  const channels = useShallowEqualSelector(\n    (state) => state.chat.channels\n  ) as UserDTO\n\n  const channelInfo = useShallowEqualSelector(\n    (state) => state.modals.channelInfo\n  ) as any\n\n  const channel = activeChannel && channels && channels[activeChannel.id]\n\n  useEffect(() => {\n    if (!channel || channel.populated) return\n\n    const populateChannelRequest = async () => {\n      const { members: ids, ownerId } = channel\n      const { data } = await userService.populateUsers({\n        ids: JSON.stringify(ids)\n      })\n      const owner = data.find((member) => member.id === ownerId)\n      disaptchPopulateChannel({ id: activeChannel?.id, members: data, owner })\n    }\n\n    populateChannelRequest()\n  }, [channel, disaptchPopulateChannel, activeChannel?.id])\n\n  if (!channel) return null\n\n  const { name, members, photo } = channel\n\n  const addToChannelHandler = () => {\n    dispatchChangeAddToChannelModalState(true)\n  }\n\n  const leaveChannelHandler = async () => {\n    try {\n      const { type, message: serverMessage } = await chatService.leaveChannel({\n        channelId: activeChannel.id,\n        userId: user.id\n      })\n\n      if (serverMessage) {\n        if (type === 'success') {\n          notify.success(serverMessage)\n        }\n        if (type === 'error') {\n          notify.error(serverMessage)\n          return\n        }\n      }\n\n      socketService.leaveChannel({\n        channelId: activeChannel.id,\n        channelName: activeChannel.name,\n        userId: user.id,\n        userName: user.name\n      })\n\n      dispatchRemoveChannel(activeChannel.id)\n      dispatchUserRemoveChannel(activeChannel.id)\n      dispatchSetActiveChannel(null)\n      dispatchChangeChannelInfoModalState(false)\n    } catch (error) {\n      notify.error(error.message)\n    }\n  }\n\n  return (\n    <ModalWindow\n      title=\"Информация о канале\"\n      visible={channelInfo}\n      centered={false}\n      style={{ top: '20px' }}\n      onCancel={() => dispatchChangeChannelInfoModalState(false)}\n      onOk={() => dispatchChangeChannelInfoModalState(false)}\n    >\n      <Row align=\"middle\">\n        <Col flex=\"128px\">\n          <Avatar size={128} src={photo} />\n        </Col>\n        <Col flex=\"300px\" className=\"channel-info__title\">\n          <Title level={4}>{name}</Title>\n        </Col>\n      </Row>\n      <Row>\n        <Col flex=\"auto\">\n          <Scrollbar style={{ height: '300px' }}>\n            <List\n              header={\n                <>\n                  <Title level={5}>\n                    {members.length} участников\n                    {channel?.ownerId === user.id && (\n                      <PlusCircleOutlined\n                        className=\"add-to-channel\"\n                        title=\"Добавить\"\n                        onClick={addToChannelHandler}\n                      />\n                    )}\n                  </Title>\n                </>\n              }\n              itemLayout=\"horizontal\"\n              dataSource={members as UserDTO[]}\n              renderItem={(item) => (\n                <List.Item>\n                  <List.Item.Meta\n                    avatar={\n                      item.photo ? (\n                        <Avatar\n                          size={50}\n                          className=\"channel-photo\"\n                          src={item.photo}\n                        />\n                      ) : (\n                        <Avatar\n                          size={50}\n                          className=\"channel-photo\"\n                          icon={\n                            <ClockCircleTwoTone style={{ color: '#fefefe' }} />\n                          }\n                        />\n                      )\n                    }\n                    title={item.name}\n                    description={item.email}\n                  />\n                  {item.id === channel?.ownerId && (\n                    <StarOutlined title=\"Владелец\" />\n                  )}\n                </List.Item>\n              )}\n            />\n          </Scrollbar>\n        </Col>\n      </Row>\n      <Divider />\n      <div className=\"form-footer\">\n        <Popconfirm\n          title=\"Вы уверены?\"\n          icon={<QuestionCircleOutlined style={{ color: 'red' }} />}\n          okText=\"Да\"\n          cancelText=\"Нет\"\n          onConfirm={leaveChannelHandler}\n        >\n          <Button block danger type=\"default\">\n            Покинуть канал\n          </Button>\n        </Popconfirm>\n      </div>\n    </ModalWindow>\n  )\n}\n\nexport { ChannelInfo }\n","import { FC, useState } from 'react'\nimport { Form, Input, Button, Spin, Typography } from 'antd'\nimport { LoadingOutlined, MailOutlined } from '@ant-design/icons'\nimport { ModalWindow } from 'containers/ModalWindow'\nimport { UserDTO } from 'services/user'\nimport { chatService } from 'services/chat'\nimport { socketService } from 'services/socket'\nimport { notify } from 'services/notification'\nimport { useActions } from 'hooks/useActions'\nimport { changeAddToChannelModalState } from 'modules/Modals/actions'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport { IActiveChannel } from 'modules/Chat/reducer'\nimport { addChannelMember } from 'modules/Chat/actions'\n\nconst { Text } = Typography\n\ninterface IFormValues {\n  email: string\n}\n\ninterface IAddToChannelProps {\n  activeChannel: IActiveChannel\n}\n\nconst AddToChannel: FC<IAddToChannelProps> = (props) => {\n  const { activeChannel } = props\n  const addToChannelModalState = useShallowEqualSelector(\n    (state) => state.modals.addToChannel\n  ) as any\n  const user = useShallowEqualSelector((state) => state.auth.user) as UserDTO\n  const [form] = Form.useForm()\n  const [loading, setLoading] = useState(false)\n  const [\n    dispatchChangeAddToChannelModalState,\n    dispatchAddChannelMember\n  ] = useActions([changeAddToChannelModalState, addChannelMember], null)\n\n  const addToChannelHandler = async (values: IFormValues) => {\n    try {\n      const { email } = values\n      setLoading(true)\n\n      const {\n        type,\n        message: serverMessage,\n        data\n      } = await chatService.addToChannel({\n        channelId: activeChannel.id,\n        channelName: activeChannel.name,\n        email\n      })\n\n      if (serverMessage) {\n        if (type === 'success') {\n          notify.success(serverMessage)\n        }\n        if (type === 'error') {\n          notify.error(serverMessage)\n          setLoading(false)\n          return\n        }\n      }\n\n      form.resetFields()\n\n      socketService.addToChannelRequest({\n        to: data.invitedUser.id,\n        inviterName: user.name,\n        channel: {\n          ...data.channel,\n          type: 'channel',\n          messages: []\n        }\n      })\n\n      dispatchAddChannelMember({\n        id: data.channel.id,\n        member: data.invitedUser\n      })\n\n      dispatchChangeAddToChannelModalState(false)\n      setLoading(false)\n    } catch (error) {\n      setLoading(false)\n      notify.error(error.message)\n    }\n  }\n\n  return (\n    <ModalWindow\n      title=\"Добавить пользователя в канал\"\n      visible={addToChannelModalState}\n      onCancel={() => dispatchChangeAddToChannelModalState(false)}\n    >\n      <Text>\n        Введите Email пользователя, которого Вы хотели добавить в канал\n      </Text>\n      <Form\n        form={form}\n        name=\"addToChannel\"\n        className=\"add-to-channel-form\"\n        layout=\"vertical\"\n        onFinish={addToChannelHandler}\n      >\n        <Form.Item\n          name=\"email\"\n          rules={[\n            {\n              required: true,\n              type: 'email',\n              min: 4,\n              message: 'Некорректный email'\n            }\n          ]}\n        >\n          <Input prefix={<MailOutlined />} placeholder=\"Email\" size=\"large\" />\n        </Form.Item>\n\n        <div className=\"form-footer\">\n          {loading && (\n            <Spin\n              className=\"center\"\n              indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n              delay={500}\n            />\n          )}\n          <Button\n            key=\"back\"\n            onClick={() => dispatchChangeAddToChannelModalState(false)}\n            disabled={loading}\n          >\n            Отмена\n          </Button>\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            htmlType=\"submit\"\n            disabled={loading}\n          >\n            Добавить\n          </Button>\n        </div>\n      </Form>\n    </ModalWindow>\n  )\n}\n\nexport { AddToChannel }\n","import { FC, KeyboardEvent, useRef } from 'react'\nimport { Layout, Typography } from 'antd'\nimport { MenuUnfoldOutlined, MenuFoldOutlined } from '@ant-design/icons'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport { MainMenu } from 'components/App/Header/MainMenu'\nimport { UserMenu } from 'components/App/Header/UserMenu'\nimport { PrivateContainer } from 'containers/Private'\nimport { UserDTO } from 'services/user'\nimport { ContactInfo } from 'components/Modals/ContactInfo'\nimport { ChannelInfo } from 'components/Modals/ChannelInfo'\nimport { AddToChannel } from 'components/Modals/AddToChannel'\nimport { useActions } from 'hooks/useActions'\nimport {\n  changeContactInfoModalState,\n  changeChannelInfoModalState\n} from 'modules/Modals/actions'\nimport { IActiveChannel } from 'modules/Chat/reducer'\n\nconst { Text } = Typography\n\ninterface IHeaderProps {\n  sidebarCollapsed: boolean\n  onSidebarToggle: (isCollapsed: boolean) => void\n}\n\nconst { Header: AntHeader } = Layout\n\nconst Header: FC<IHeaderProps> = (props: IHeaderProps) => {\n  const user = useShallowEqualSelector((state) => state.auth.user) as UserDTO\n\n  const [\n    dispatchChangeContactInfoModalState,\n    dispatchChangeChannelInfoModalState\n  ] = useActions(\n    [changeContactInfoModalState, changeChannelInfoModalState],\n    null\n  )\n\n  const chatInfoRef = useRef(null)\n  const activeChannel = useShallowEqualSelector(\n    (state) => state.chat.activeChannel\n  ) as IActiveChannel\n\n  const { onSidebarToggle, sidebarCollapsed } = props\n\n  const onTriggerClick = () => {\n    onSidebarToggle(!sidebarCollapsed)\n  }\n\n  const menuTrigger = sidebarCollapsed ? (\n    <MenuUnfoldOutlined\n      style={{ fontSize: '20px', padding: '22px' }}\n      className=\"trigger\"\n      onClick={onTriggerClick}\n      label=\"Свернуть\"\n    />\n  ) : (\n    <MenuFoldOutlined\n      style={{ fontSize: '20px', padding: '22px' }}\n      className=\"trigger\"\n      onClick={onTriggerClick}\n    />\n  )\n\n  const openActiveChatInfo = () => {\n    if (activeChannel?.type === 'contact') {\n      dispatchChangeContactInfoModalState(true)\n    }\n    if (activeChannel?.type === 'channel') {\n      dispatchChangeChannelInfoModalState(true)\n    }\n  }\n\n  const onKeyDownHandler = (event: KeyboardEvent<HTMLDivElement>) => {\n    if (event.key === 'Enter') {\n      chatInfoRef.current.focus()\n    }\n  }\n\n  let membersCount = 0\n  const channels = useShallowEqualSelector(\n    (state) => state.chat.channels\n  ) as any\n\n  if (activeChannel?.type === 'channel') {\n    const members =\n      activeChannel && channels && channels[activeChannel.id]?.members\n    membersCount = members && Object.keys(members).length\n  }\n\n  const activeChat = activeChannel && (\n    <div\n      className=\"active-channel\"\n      onClick={openActiveChatInfo}\n      onKeyDown={onKeyDownHandler}\n      ref={chatInfoRef}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <Text className=\"active-channel-text\">{activeChannel.name}</Text>\n      {activeChannel.type === 'channel' ? (\n        <Text className=\"active-channel-text\" type=\"secondary\">\n          {membersCount} участников\n        </Text>\n      ) : (\n        <Text className=\"active-channel-text\" type=\"secondary\">\n          был(а) 1 час назад\n        </Text>\n      )}\n    </div>\n  )\n\n  return (\n    <AntHeader className=\"header background-white\">\n      <PrivateContainer>\n        {menuTrigger}\n        {activeChat}\n        <ContactInfo activeContact={activeChannel} />\n        <ChannelInfo activeChannel={activeChannel} />\n        <AddToChannel activeChannel={activeChannel} />\n      </PrivateContainer>\n\n      <div className=\"header-menu\">\n        {!user && <MainMenu />}\n        <PrivateContainer>\n          <span className=\"header-username\">{user?.name}</span>\n          <UserMenu />\n        </PrivateContainer>\n      </div>\n    </AntHeader>\n  )\n}\n\nexport { Header }\n","import { FC, useState } from 'react'\nimport { Form, Input, message, Button, Spin } from 'antd'\nimport { LoadingOutlined } from '@ant-design/icons'\nimport { ModalWindow } from 'containers/ModalWindow'\nimport { PhotoUploader } from 'components/PhotoUploader'\nimport { UserDTO } from 'services/user'\nimport { useActions } from 'hooks/useActions'\nimport { setActiveChannel, addChannel } from 'modules/Chat/actions'\nimport { changeCreateChannelModalState } from 'modules/Modals/actions'\nimport { chatService } from 'services/chat'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport { socketService } from 'services/socket'\n\ninterface IFormValues {\n  name: string\n  description?: string\n  photo?: string\n}\n\ninterface ICreateChannelProps {}\n\nconst CreateChannel: FC<ICreateChannelProps> = () => {\n  const createChannel = useShallowEqualSelector(\n    (state) => state.modals.createChannel\n  ) as any\n  const user = useShallowEqualSelector((state) => state.auth.user) as UserDTO\n  const [form] = Form.useForm()\n  const [loading, setLoading] = useState(false)\n  const [photo, setPhoto] = useState(null)\n  const [\n    dispatchActiveChannel,\n    dispatchAddChannel,\n    dispatchChangeCreateChannelModalState\n  ] = useActions(\n    [setActiveChannel, addChannel, changeCreateChannelModalState],\n    null\n  )\n\n  const createChannelHandler = async (values: IFormValues) => {\n    try {\n      const { name, description } = values\n      setLoading(true)\n\n      const {\n        type,\n        message: serverMessage,\n        data\n      } = await chatService.createChannel({\n        name,\n        description,\n        photo,\n        ownerId: user.id\n      })\n\n      if (serverMessage) {\n        if (type === 'success') {\n          message.success(serverMessage)\n        }\n        if (type === 'error') {\n          message.error(serverMessage)\n          setLoading(false)\n          return\n        }\n      }\n\n      const activeChannelPayload = { id: data.channelId, name, type: 'channel' }\n\n      dispatchAddChannel({\n        ...activeChannelPayload,\n        ownerId: user.id,\n        photo,\n        members: [user.id]\n      })\n      dispatchActiveChannel(activeChannelPayload)\n      socketService.subscribeToChannel(data.channelId)\n\n      setLoading(false)\n      dispatchChangeCreateChannelModalState(false)\n    } catch (error) {\n      setLoading(false)\n      message.error(error.message)\n    }\n  }\n\n  const resetForm = () => dispatchChangeCreateChannelModalState(false)\n\n  return (\n    <ModalWindow\n      title=\"Создать канал\"\n      visible={createChannel}\n      onCancel={() => dispatchChangeCreateChannelModalState(false)}\n    >\n      <PhotoUploader\n        onChangePhoto={(imageUrl) => setPhoto(imageUrl)}\n        onRemovePhoto={() => setPhoto(null)}\n      />\n      <Form\n        form={form}\n        name=\"createChannel\"\n        className=\"create-channel-form\"\n        layout=\"vertical\"\n        onFinish={createChannelHandler}\n      >\n        <Form.Item\n          name=\"name\"\n          rules={[\n            { required: true, message: 'Введите название канала' },\n            { max: 100, message: 'Не более 100 символов' }\n          ]}\n        >\n          <Input placeholder=\"Название канала\" />\n        </Form.Item>\n        <Form.Item\n          name=\"description\"\n          rules={[{ max: 250, message: 'Не более 250 символов' }]}\n        >\n          <Input placeholder=\"Описание (не обязательно)\" type=\"textarea\" />\n        </Form.Item>\n        <div className=\"form-footer\">\n          {loading && (\n            <Spin\n              className=\"center\"\n              indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n              delay={500}\n            />\n          )}\n          <Button key=\"back\" onClick={resetForm} disabled={loading}>\n            Отмена\n          </Button>\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            htmlType=\"submit\"\n            disabled={loading}\n          >\n            Создать\n          </Button>\n        </div>\n      </Form>\n    </ModalWindow>\n  )\n}\n\nexport { CreateChannel }\n","import { FC, useState } from 'react'\nimport { Form, Input, Button, Spin, Typography } from 'antd'\nimport { LoadingOutlined, MailOutlined } from '@ant-design/icons'\nimport { ModalWindow } from 'containers/ModalWindow'\nimport { UserDTO } from 'services/user'\nimport { chatService } from 'services/chat'\nimport { socketService } from 'services/socket'\nimport { notify } from 'services/notification'\nimport { useActions } from 'hooks/useActions'\nimport { addContact, setActiveChannel } from 'modules/Chat/actions'\nimport { changeAddContactModalState } from 'modules/Modals/actions'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\n\nconst { Text } = Typography\nconst { TextArea } = Input\n\ninterface IFormValues {\n  email: string\n  text?: string\n}\n\ninterface IAddContactProps {}\n\nconst AddContact: FC<IAddContactProps> = () => {\n  const addContactModalState = useShallowEqualSelector(\n    (state) => state.modals.addContact\n  ) as any\n  const user = useShallowEqualSelector((state) => state.auth.user) as UserDTO\n  const [form] = Form.useForm()\n  const [loading, setLoading] = useState(false)\n  const [\n    dispatchChangeAddContactModalState,\n    dispatchAddContact,\n    dispatchActiveChannel\n  ] = useActions(\n    [changeAddContactModalState, addContact, setActiveChannel],\n    null\n  )\n\n  const addContactHandler = async (values: IFormValues) => {\n    try {\n      const { email, text } = values\n      setLoading(true)\n\n      const {\n        type,\n        message: serverMessage,\n        data: invitedUser\n      } = await chatService.inviteToContacts({\n        inviterId: user.id,\n        inviterName: user.name,\n        inviterEmail: user.email,\n        inviterContacts: user.contacts,\n        email,\n        text\n      })\n\n      if (serverMessage) {\n        if (type === 'success') {\n          notify.success(serverMessage)\n        }\n        if (type === 'error') {\n          notify.error(serverMessage)\n          setLoading(false)\n          return\n        }\n      }\n\n      form.resetFields()\n\n      const addContactPayload = {\n        ...invitedUser,\n        type: 'contact',\n        messages: []\n      }\n\n      const activeChannelPayload: any = {\n        id: invitedUser.id,\n        name: invitedUser.name,\n        type: 'contact'\n      }\n\n      if (!invitedUser.contactAdded) {\n        addContactPayload.isContactRequest = true\n        addContactPayload.text = text\n        activeChannelPayload.isContactRequest = true\n        activeChannelPayload.text = text\n      }\n\n      dispatchAddContact(addContactPayload)\n      dispatchActiveChannel(activeChannelPayload)\n      dispatchChangeAddContactModalState(false)\n\n      socketService.inviteContactRequest({\n        to: invitedUser.id,\n        contact: {\n          ...user,\n          isInvite: true,\n          photo: null,\n          text,\n          type: 'contact',\n          messages: []\n        }\n      })\n\n      setLoading(false)\n    } catch (error) {\n      setLoading(false)\n      notify.error(error.message)\n    }\n  }\n\n  return (\n    <ModalWindow\n      title=\"Добавить контакт\"\n      visible={addContactModalState}\n      onCancel={() => dispatchChangeAddContactModalState(false)}\n    >\n      <Text>Введите Email контакта, которого Вы хотели добавить</Text>\n      <Form\n        form={form}\n        name=\"addContact\"\n        className=\"add-contact-form\"\n        layout=\"vertical\"\n        onFinish={addContactHandler}\n      >\n        <Form.Item\n          name=\"email\"\n          rules={[\n            {\n              required: true,\n              type: 'email',\n              min: 4,\n              message: 'Некорректный email'\n            }\n          ]}\n        >\n          <Input prefix={<MailOutlined />} placeholder=\"Email\" size=\"large\" />\n        </Form.Item>\n\n        <Form.Item name=\"text\">\n          <TextArea\n            rows={4}\n            placeholder=\"Сообщение для пользователя (необязательно)\"\n          />\n        </Form.Item>\n\n        <div className=\"form-footer\">\n          {loading && (\n            <Spin\n              className=\"center\"\n              indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n              delay={500}\n            />\n          )}\n          <Button\n            key=\"back\"\n            onClick={() => dispatchChangeAddContactModalState(false)}\n            disabled={loading}\n          >\n            Отмена\n          </Button>\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            htmlType=\"submit\"\n            disabled={loading}\n          >\n            Добавить\n          </Button>\n        </div>\n      </Form>\n    </ModalWindow>\n  )\n}\n\nexport { AddContact }\n","import { FC } from 'react'\nimport { Menu, Dropdown } from 'antd'\nimport {\n  MenuOutlined,\n  UserAddOutlined,\n  UsergroupAddOutlined,\n  ContactsOutlined,\n  SettingOutlined\n} from '@ant-design/icons'\nimport { useActions } from 'hooks/useActions'\nimport {\n  changeCreateChannelModalState,\n  changeAddContactModalState\n} from 'modules/Modals/actions'\nimport { CreateChannel } from 'components/Modals/CreateChannel'\nimport { AddContact } from 'components/Modals/AddContact'\n\nexport interface ISidebarMenuProps {}\n\nconst SidebarMenu: FC<ISidebarMenuProps> = () => {\n  const [\n    dispatchChangeCreateChannelModalState,\n    dispatchChangeAddContactModalState\n  ] = useActions(\n    [changeCreateChannelModalState, changeAddContactModalState],\n    null\n  )\n\n  const handleMenuClick = (event) => {\n    const { key } = event\n\n    switch (key) {\n      case 'createChannel':\n        dispatchChangeCreateChannelModalState(true)\n        break\n      case 'addContact':\n        dispatchChangeAddContactModalState(true)\n        break\n      default:\n        break\n    }\n  }\n\n  const menu = (\n    <Menu onClick={handleMenuClick}>\n      <Menu.Item key=\"createChannel\" icon={<UsergroupAddOutlined />}>\n        Создать канал\n      </Menu.Item>\n      <Menu.Item key=\"addContact\" icon={<UserAddOutlined />}>\n        Добавить контакт\n      </Menu.Item>\n      <Menu.Divider />\n      <Menu.Item key=\"contacts\" icon={<ContactsOutlined />}>\n        Контакты\n      </Menu.Item>\n      <Menu.Item key=\"settings\" icon={<SettingOutlined />}>\n        Настройки\n      </Menu.Item>\n    </Menu>\n  )\n\n  return (\n    <>\n      <Dropdown overlay={menu} trigger={['click']}>\n        <MenuOutlined className=\"sidebar-icon\" />\n      </Dropdown>\n      <CreateChannel />\n      <AddContact />\n    </>\n  )\n}\n\nexport { SidebarMenu }\n","import { FC, useState } from 'react'\nimport { Layout, Menu, Avatar } from 'antd'\nimport {\n  LockOutlined,\n  UnlockOutlined,\n  ClockCircleTwoTone,\n  PlusCircleOutlined\n} from '@ant-design/icons'\nimport { useHistory } from 'react-router-dom'\nimport { useEscape } from 'hooks/useEscape'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport { setActiveChannel } from 'modules/Chat/actions'\nimport { useActions } from 'hooks/useActions'\nimport { IChannelData, IContactData } from 'components/Chat/Messages'\nimport {\n  changeCreateChannelModalState,\n  changeAddContactModalState\n} from 'modules/Modals/actions'\nimport { Scrollbar } from 'containers/Scrollbar'\nimport { SidebarMenu } from './SidebarMenu'\n\nconst { Sider } = Layout\n\ninterface ISidebarProps {\n  sidebarCollapsed: boolean\n  onSidebarToggle: (isCollapsed: boolean) => void\n}\n\nconst Sidebar: FC<ISidebarProps> = (props: ISidebarProps) => {\n  const [sidebarLocked, setSidebarLocked] = useState(true)\n  const { sidebarCollapsed, onSidebarToggle } = props\n  const [\n    dispatchActiveChannel,\n    dispatchChangeCreateChannelModalState,\n    dispatchChangeAddContactModalState\n  ] = useActions(\n    [\n      setActiveChannel,\n      changeCreateChannelModalState,\n      changeAddContactModalState\n    ],\n    null\n  )\n  const chat = useShallowEqualSelector((state) => state.chat) as any\n  const { activeChannel, channels, contacts } = chat\n  const history = useHistory()\n\n  useEscape(() => {\n    if (!activeChannel) return\n    dispatchActiveChannel(null)\n  })\n\n  const onClickMenu = ({ key }) => {\n    if (activeChannel) {\n      const { id, type } = activeChannel\n      if (key === `${type}-${id}`) return\n    }\n\n    if (history.location.pathname !== '/') {\n      history.push('/')\n    }\n\n    const [channelType, channelId] = key.split('-')\n    const place = channelType === 'channel' ? channels : contacts\n    const { name, type, isContactRequest, isInvite, text } = place[channelId]\n    const intChannelId = parseInt(channelId, 10)\n\n    dispatchActiveChannel({\n      id: intChannelId,\n      name,\n      type,\n      isContactRequest,\n      isInvite,\n      text\n    })\n\n    if (!sidebarLocked) {\n      onSidebarToggle(true)\n    }\n  }\n\n  const selectedMenuKey = activeChannel\n    ? [`${activeChannel.type}-${activeChannel.id}`]\n    : []\n\n  return (\n    <>\n      <Sider\n        trigger={null}\n        collapsed={sidebarCollapsed}\n        collapsedWidth={0}\n        className=\"sider\"\n        theme=\"dark\"\n        width=\"230\"\n        style={{\n          overflow: 'auto',\n          height: '100vh'\n        }}\n      >\n        <div className=\"sidebar-top\">\n          <SidebarMenu />\n          {sidebarLocked ? (\n            <LockOutlined\n              title=\"Отмена фиксации\"\n              className=\"sidebar-icon\"\n              onClick={() => setSidebarLocked(false)}\n            />\n          ) : (\n            <UnlockOutlined\n              title=\"Фиксировать меню\"\n              className=\"sidebar-icon\"\n              onClick={() => setSidebarLocked(true)}\n            />\n          )}\n        </div>\n\n        <div className=\"channels-menu\">\n          <div className=\"sidebar-top\">\n            <span className=\"channels-menu-title\">Каналы</span>\n            <PlusCircleOutlined\n              className=\"sidebar-icon\"\n              title=\"Создать канал\"\n              onClick={() => dispatchChangeCreateChannelModalState(true)}\n            />\n          </div>\n\n          {(channels && (\n            <Scrollbar style={{ height: 'calc(50vh - 100px)' }}>\n              <Menu\n                theme=\"dark\"\n                mode=\"inline\"\n                selectedKeys={selectedMenuKey}\n                onClick={onClickMenu}\n              >\n                {Object.entries(channels as IChannelData[]).map(\n                  ([channelId, channel]) => (\n                    <Menu.Item\n                      className=\"channels-menu-item\"\n                      style={{ height: '50px' }}\n                      key={`${channel.type}-${channelId}`}\n                    >\n                      {channel.photo ? (\n                        <Avatar\n                          size={40}\n                          className=\"channel-photo\"\n                          src={channel.photo}\n                        />\n                      ) : (\n                        <Avatar\n                          size={40}\n                          className=\"channel-photo\"\n                          icon={\n                            <ClockCircleTwoTone style={{ color: '#fefefe' }} />\n                          }\n                        />\n                      )}\n                      <span className=\"channel-name\">{channel.name}</span>\n                    </Menu.Item>\n                  )\n                )}\n              </Menu>\n            </Scrollbar>\n          )) || <p className=\"nocontent\">нет каналов</p>}\n        </div>\n\n        <div className=\"contacts-menu\">\n          <div className=\"sidebar-top\">\n            <span className=\"contacts-menu-title\">Контакты</span>\n            <PlusCircleOutlined\n              className=\"sidebar-icon\"\n              title=\"Добавить контакт\"\n              onClick={() => dispatchChangeAddContactModalState(true)}\n            />\n          </div>\n          {(contacts && (\n            <Scrollbar style={{ height: 'calc(50vh - 100px)' }}>\n              <Menu\n                theme=\"dark\"\n                mode=\"inline\"\n                selectedKeys={selectedMenuKey}\n                onClick={onClickMenu}\n              >\n                {Object.entries(contacts as IContactData[]).map(\n                  ([contactId, contact]) => (\n                    <Menu.Item\n                      className=\"contacts-menu-item\"\n                      style={{ height: '50px' }}\n                      key={`${contact.type}-${contactId}`}\n                    >\n                      <Avatar\n                        size={40}\n                        className=\"contact-photo\"\n                        src={\n                          contact.photo ? (\n                            contact.photo\n                          ) : (\n                            <ClockCircleTwoTone style={{ fontSize: '40px' }} />\n                          )\n                        }\n                      />\n                      <span className=\"channel-name\">{contact.name}</span>\n                    </Menu.Item>\n                  )\n                )}\n              </Menu>\n            </Scrollbar>\n          )) || <p className=\"nocontent\">нет контактов</p>}\n        </div>\n      </Sider>\n    </>\n  )\n}\n\nexport { Sidebar }\n","import { useEffect } from 'react'\n\nconst useEscape = (onEscape: () => any) => {\n  useEffect(() => {\n    const handleEsc = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') onEscape()\n    }\n    window.addEventListener('keydown', handleEsc)\n\n    return () => {\n      window.removeEventListener('keydown', handleEsc)\n    }\n  }, [onEscape])\n}\n\nexport { useEscape }\n","import { FC } from 'react'\r\nimport { Route, Redirect, RouteProps } from 'react-router-dom'\r\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\r\nimport { IRootState } from 'modules'\r\n\r\ninterface IPrivateRouteProps extends RouteProps {\r\n  component?: any\r\n  children?: any\r\n}\r\n\r\nconst PrivateRoute: FC<IPrivateRouteProps> = ({\r\n  component: Component,\r\n  children,\r\n  ...rest\r\n}) => {\r\n  const user = useShallowEqualSelector((state: IRootState) => state.auth.user)\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(routeProps) => {\r\n        if (user === null) return null\r\n\r\n        if (user === false) {\r\n          return (\r\n            <Redirect\r\n              to={{\r\n                pathname: '/auth/login',\r\n                state: { from: routeProps.location }\r\n              }}\r\n            />\r\n          )\r\n        }\r\n\r\n        if (Component) {\r\n          return <Component {...routeProps} />\r\n        }\r\n\r\n        return children\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nPrivateRoute.defaultProps = {\r\n  component: undefined\r\n}\r\n\r\nexport { PrivateRoute }\r\n","import {\n  apiService as api,\n  AUTH_TOKEN_STORAGE_KEY,\n  IServerResponse\n} from './api'\n\nexport interface UserLoginRequestDTO {\n  email: string\n  password: string\n}\n\nexport interface UserCreateRequestDTO {\n  name: string\n  email: string\n  password: string\n}\n\nexport interface UserRecoverPasswordRequestDTO {\n  email: string\n}\n\nexport interface CheckSecretRequestDTO {\n  code: string\n  secretType: string\n}\n\nexport interface ChangePasswordRequestDTO {\n  code: string\n  password: string\n}\n\nexport interface UserFetchByTokenRequestDTO {\n  token: string\n}\n\nconst authService = {\n  /** Регистрация нового пользователя */\n  register: async (payload: UserCreateRequestDTO): Promise<IServerResponse> =>\n    api.send({\n      method: 'put',\n      endpoint: '/api/v1/auth/register',\n      payload\n    }),\n\n  /** Активация пользователя по коду из письма */\n  activate: async (code: string): Promise<IServerResponse> =>\n    api.send({\n      method: 'patch',\n      endpoint: `/api/v1/auth/activate/${code}`\n    }),\n\n  /** Вход пользователя в систему и полуение токена */\n  login: async (payload: UserLoginRequestDTO): Promise<IServerResponse> =>\n    api.send({\n      method: 'post',\n      endpoint: '/api/v1/auth/login',\n      payload\n    }),\n\n  /** Попытка получить объект пользователя по токену */\n  fetchByToken: async (\n    payload: UserFetchByTokenRequestDTO\n  ): Promise<IServerResponse> =>\n    api.send({\n      method: 'post',\n      endpoint: '/api/v1/auth/fetch-by-token',\n      payload\n    }),\n\n  /** Запрос на изменение пароля, отправка письма со ссылкой на email */\n  recover: async (\n    payload: UserRecoverPasswordRequestDTO\n  ): Promise<IServerResponse> =>\n    api.send({\n      method: 'post',\n      endpoint: '/api/v1/auth/recover',\n      payload\n    }),\n\n  /** Проверка секретного ключа для доступа к форме восстановления пароля */\n  checkSecret: async (\n    payload: CheckSecretRequestDTO\n  ): Promise<IServerResponse> =>\n    api.send({\n      method: 'post',\n      endpoint: '/api/v1/auth/check-secret',\n      payload\n    }),\n\n  /** Изменение пароля пользователя */\n  changePassword: async (\n    payload: ChangePasswordRequestDTO\n  ): Promise<IServerResponse> =>\n    api.send({\n      method: 'patch',\n      endpoint: '/api/v1/auth/change-password',\n      payload\n    }),\n\n  getToken: (): string | null => localStorage.getItem(AUTH_TOKEN_STORAGE_KEY),\n\n  setToken: (payload: string): void =>\n    localStorage.setItem(AUTH_TOKEN_STORAGE_KEY, payload),\n\n  removeToken: (): void => localStorage.removeItem(AUTH_TOKEN_STORAGE_KEY)\n}\n\nexport { authService }\n","import { FC, useState } from 'react'\nimport { Form, Input, Button, Card, Alert, Spin, Typography } from 'antd'\nimport { MailOutlined, LockOutlined, LoadingOutlined } from '@ant-design/icons'\nimport { Link, useHistory } from 'react-router-dom'\nimport { useActions } from 'hooks/useActions'\nimport { authService } from 'services/auth'\nimport { userLoginRequest } from 'modules/Auth/actions'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport { UserDTO } from 'services/user'\n\nconst { Paragraph } = Typography\n\ninterface IFormValues {\n  email: string\n  password: string\n}\n\nconst Login: FC = () => {\n  const emptyMessage = { type: '', message: '' }\n  const [form] = Form.useForm()\n  const [alert, setAlert] = useState(emptyMessage)\n  const [loading, setLoading] = useState(false)\n  const [dispatchUserLoginRequest] = useActions([userLoginRequest], null)\n  const history = useHistory()\n  const user = useShallowEqualSelector((state) => state.auth.user) as UserDTO\n\n  if (user) {\n    return <Paragraph className=\"flex-center\">Вы уже зашли в чат</Paragraph>\n  }\n\n  const loginHandler = async (values: IFormValues) => {\n    try {\n      setAlert(emptyMessage)\n      setLoading(true)\n\n      const { email, password } = values\n      const { type, message, token, data } = await authService.login({\n        email,\n        password\n      })\n\n      if (message) {\n        setAlert({ type, message })\n        setLoading(false)\n        if (type === 'error') return\n      }\n\n      dispatchUserLoginRequest({ data, token })\n      setLoading(false)\n\n      history.push('/')\n    } catch (error) {\n      setAlert(error)\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"flex-center\">\n      <Card className=\"card\" title=\"Вход в систему\">\n        {alert.message && (\n          <Alert\n            className=\"alert\"\n            message={alert.message}\n            type={alert.type as any}\n          />\n        )}\n        <Form\n          form={form}\n          name=\"login\"\n          className=\"login-form\"\n          initialValues={{ remember: true }}\n          onFinish={loginHandler}\n        >\n          <Form.Item\n            name=\"email\"\n            rules={[\n              {\n                required: true,\n                type: 'email',\n                min: 4,\n                message: 'Некорректный email'\n              }\n            ]}\n          >\n            <Input prefix={<MailOutlined />} placeholder=\"Email\" size=\"large\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"password\"\n            rules={[{ required: true, min: 6, message: 'Минимум 6 символов' }]}\n          >\n            <Input.Password\n              placeholder=\"Пароль\"\n              prefix={<LockOutlined />}\n              size=\"large\"\n            />\n          </Form.Item>\n\n          <Form.Item>\n            <Form.Item name=\"register\" noStyle>\n              <Link to=\"/auth/register\">Регистрация</Link>\n            </Form.Item>\n\n            <Link className=\"link-recover\" to=\"/auth/recover\">\n              Забыли пароль?\n            </Link>\n          </Form.Item>\n\n          {loading && (\n            <Spin\n              className=\"center\"\n              indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n              delay={500}\n            />\n          )}\n\n          <Button size=\"large\" type=\"primary\" htmlType=\"submit\" block>\n            Войти\n          </Button>\n        </Form>\n      </Card>\n    </div>\n  )\n}\n\nexport { Login }\n","import { FC, useState, useEffect } from 'react'\nimport { useParams, Link } from 'react-router-dom'\nimport { Form, Input, Button, Card, Alert } from 'antd'\nimport { LockOutlined } from '@ant-design/icons'\nimport { authService } from 'services/auth'\n\ninterface IChangePasswordParams {\n  code?: string\n}\n\ninterface IFormValues {\n  password: string\n  confirmPassword: string\n}\n\nconst ChangePassword: FC = () => {\n  const { code }: IChangePasswordParams = useParams()\n  const emptyMessage = { type: '', message: '' }\n  const [alert, setAlert] = useState(emptyMessage)\n  const [secretError, setSecretError] = useState(false)\n  const [changeSuccess, setChangeSuccess] = useState(false)\n  const [loading, setLoading] = useState(false)\n\n  useEffect(() => {\n    const checkSecret = async () => {\n      const { type, message } = await authService.checkSecret({\n        code,\n        secretType: 'RECOVER_PASSWORD'\n      })\n      if (type === 'error') {\n        setAlert({ type, message })\n        setSecretError(true)\n      }\n    }\n\n    if (\n      code.match(\n        /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i\n      )\n    ) {\n      checkSecret()\n    } else {\n      setAlert({ type: 'error', message: 'Неверный секретный код!' })\n      setSecretError(true)\n    }\n  }, [code])\n\n  const changePasswordHandler = async (values: IFormValues) => {\n    try {\n      setAlert(emptyMessage)\n      setLoading(true)\n\n      const { password } = values\n      const { type, message } = await authService.changePassword({\n        code,\n        password\n      })\n\n      if (message) {\n        setAlert({ type, message })\n        setLoading(false)\n        if (type === 'error') return\n      }\n\n      setChangeSuccess(true)\n      setLoading(false)\n    } catch (error) {\n      setAlert(error)\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"flex-center\">\n      <Card className=\"card\" title=\"Изменение пароля\">\n        {alert.message && (\n          <Alert\n            className=\"alert\"\n            message={alert.message}\n            type={alert.type as any}\n          />\n        )}\n\n        {changeSuccess && (\n          <p>\n            Теперь Вы можете <Link to=\"/auth/login\">Войти</Link> в приложение\n          </p>\n        )}\n\n        {!secretError && !changeSuccess && (\n          <>\n            <p>Придумайте новый пароль</p>\n            <Form\n              name=\"change-password-request\"\n              initialValues={{ remember: true }}\n              onFinish={changePasswordHandler}\n            >\n              <Form.Item\n                name=\"password\"\n                rules={[{ required: true, message: 'Введите пароль!' }]}\n              >\n                <Input.Password\n                  placeholder=\"Пароль\"\n                  prefix={<LockOutlined />}\n                  size=\"large\"\n                />\n              </Form.Item>\n\n              <Form.Item\n                name=\"confirmPassword\"\n                dependencies={['password']}\n                rules={[\n                  { required: true, message: 'Введите подтверждение пароля!' },\n                  ({ getFieldValue }) => ({\n                    validator(_, value) {\n                      if (!value || getFieldValue('password') === value) {\n                        return Promise.resolve()\n                      }\n                      return Promise.reject(\n                        new Error('Пароли должны совпадать!')\n                      )\n                    }\n                  })\n                ]}\n              >\n                <Input.Password\n                  placeholder=\"Пароль еще раз\"\n                  prefix={<LockOutlined />}\n                  size=\"large\"\n                />\n              </Form.Item>\n\n              <Button\n                className=\"submit-button\"\n                type=\"primary\"\n                htmlType=\"submit\"\n                size=\"large\"\n                block\n                disabled={loading}\n              >\n                Изменить пароль\n              </Button>\n            </Form>\n          </>\n        )}\n      </Card>\n    </div>\n  )\n}\n\nexport { ChangePassword }\n","import { FC, useState, useEffect } from 'react'\nimport { Card, Alert } from 'antd'\nimport { Link, useParams } from 'react-router-dom'\nimport { authService } from 'services/auth'\n\ninterface IActivationParams {\n  code?: string\n}\n\nconst Activation: FC = () => {\n  const { code }: IActivationParams = useParams()\n  const emptyMessage = { type: '', message: '' }\n  const [alert, setAlert] = useState(emptyMessage)\n\n  useEffect(() => {\n    const activateUser = async () => {\n      const { type, message } = await authService.activate(code)\n      if (message) {\n        setAlert({ type, message })\n      }\n    }\n    activateUser()\n  }, [code])\n\n  return (\n    <div className=\"flex-center\">\n      <Card className=\"card\" title=\"Активация нового пользователя\">\n        {alert.message && (\n          <Alert\n            className=\"alert\"\n            message={alert.message}\n            type={alert.type as any}\n          />\n        )}\n        <Link className=\"login-link\" to=\"/auth/login\">\n          Вход\n        </Link>\n        <Link className=\"link-recover\" to=\"/auth/recover\">\n          Восстановить пароль\n        </Link>\n      </Card>\n    </div>\n  )\n}\n\nexport { Activation }\n","import { FC, useState } from 'react'\nimport { Form, Input, Button, Card, Alert, Spin } from 'antd'\nimport {\n  UserOutlined,\n  LockOutlined,\n  MailOutlined,\n  LoadingOutlined\n} from '@ant-design/icons'\nimport { authService } from 'services/auth'\n\ninterface IFormValues {\n  name: string\n  email: string\n  password: string\n}\n\nconst Register: FC = () => {\n  const emptyMessage = { type: '', message: '' }\n  const [form] = Form.useForm()\n  const [alert, setAlert] = useState(emptyMessage)\n  const [loading, setLoading] = useState(false)\n\n  const registerHandler = async (values: IFormValues) => {\n    try {\n      setAlert(emptyMessage)\n      setLoading(true)\n\n      const { name, email, password } = values\n      const { type, message } = await authService.register({\n        name,\n        email,\n        password\n      })\n\n      if (message) {\n        setAlert({ type, message })\n        setLoading(false)\n        if (type === 'error') return\n      }\n\n      form.resetFields()\n      setLoading(false)\n    } catch (error) {\n      setAlert(error)\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"flex-center\">\n      <Card className=\"card\" title=\"Регистрация\">\n        {alert.message && (\n          <Alert\n            className=\"alert\"\n            message={alert.message}\n            type={alert.type as any}\n          />\n        )}\n        <Form\n          form={form}\n          name=\"register\"\n          initialValues={{ remember: true }}\n          onFinish={registerHandler}\n          validateTrigger=\"onBlur\"\n        >\n          <Form.Item\n            name=\"name\"\n            rules={[\n              {\n                required: true,\n                message:\n                  \"Имя должно содержать минимум 4 символа английского или русского алфавита, допустимы цифры и знаки '- _'\",\n                pattern: /^[a-zA-Zа-яА-ЯёЁ0-9-_\\s]{4,}$/\n              }\n            ]}\n          >\n            <Input placeholder=\"Имя\" size=\"large\" prefix={<UserOutlined />} />\n          </Form.Item>\n\n          <Form.Item\n            name=\"email\"\n            rules={[\n              { required: true, type: 'email', message: 'Некорректный email' }\n            ]}\n          >\n            <Input prefix={<MailOutlined />} placeholder=\"Email\" size=\"large\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"password\"\n            rules={[\n              {\n                required: true,\n                message: 'Введите пароль! Минимум 6 символов.',\n                min: 6\n              }\n            ]}\n          >\n            <Input.Password\n              placeholder=\"Пароль\"\n              prefix={<LockOutlined />}\n              size=\"large\"\n            />\n          </Form.Item>\n\n          <Form.Item\n            name=\"confirm-password\"\n            dependencies={['password']}\n            rules={[\n              {\n                required: true,\n                message: 'Введите подтверждение пароля! Минимум 6 символов.',\n                min: 6\n              },\n              ({ getFieldValue }) => ({\n                validator(_, value) {\n                  if (!value || getFieldValue('password') === value) {\n                    return Promise.resolve()\n                  }\n                  return Promise.reject(new Error('Пароли должны совпадать!'))\n                }\n              })\n            ]}\n          >\n            <Input.Password\n              placeholder=\"Пароль еще раз\"\n              prefix={<LockOutlined />}\n              size=\"large\"\n            />\n          </Form.Item>\n\n          {loading && (\n            <Spin\n              className=\"center\"\n              indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n              delay={500}\n            />\n          )}\n\n          <Button\n            className=\"submit-button\"\n            type=\"primary\"\n            htmlType=\"submit\"\n            size=\"large\"\n            block\n            disabled={loading}\n          >\n            Зарегистрироваться\n          </Button>\n        </Form>\n      </Card>\n    </div>\n  )\n}\n\nexport { Register }\n","import { FC, useState } from 'react'\nimport { Form, Input, Button, Card, Alert, Spin } from 'antd'\nimport { MailOutlined, LoadingOutlined } from '@ant-design/icons'\nimport { authService } from 'services/auth'\n\ninterface IFormValues {\n  email: string\n}\n\nconst Recover: FC = () => {\n  const emptyMessage = { type: '', message: '' }\n  const [form] = Form.useForm()\n  const [alert, setAlert] = useState(emptyMessage)\n  const [loading, setLoading] = useState(false)\n\n  const recoverPasswordHandler = async (values: IFormValues) => {\n    try {\n      setAlert(emptyMessage)\n      setLoading(true)\n\n      const { email } = values\n      const { type, message } = await authService.recover({\n        email\n      })\n\n      if (message) {\n        setAlert({ type, message })\n        setLoading(false)\n        if (type === 'error') return\n      }\n\n      form.resetFields()\n      setLoading(false)\n    } catch (error) {\n      setAlert(error)\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"flex-center\">\n      <Card className=\"card\" title=\"Восстановление пароля\">\n        {alert.message && (\n          <Alert\n            className=\"alert\"\n            message={alert.message}\n            type={alert.type as any}\n          />\n        )}\n        {alert.type !== 'success' && (\n          <>\n            <p>\n              Укажите email, указанный при регистрации и мы вышлем на него\n              ссылку для восстановления пароля.\n            </p>\n            <Form\n              form={form}\n              name=\"recover\"\n              className=\"login-form\"\n              initialValues={{ remember: true }}\n              onFinish={recoverPasswordHandler}\n              validateTrigger=\"onBlur\"\n            >\n              <Form.Item\n                name=\"email\"\n                rules={[\n                  {\n                    required: true,\n                    type: 'email',\n                    message: 'Некорректный email!'\n                  }\n                ]}\n              >\n                <Input\n                  prefix={<MailOutlined />}\n                  placeholder=\"Email\"\n                  size=\"large\"\n                />\n              </Form.Item>\n\n              {loading && (\n                <Spin\n                  className=\"center\"\n                  indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n                  delay={500}\n                />\n              )}\n\n              <Button\n                size=\"large\"\n                type=\"primary\"\n                htmlType=\"submit\"\n                block\n                disabled={loading}\n              >\n                Восстановить пароль\n              </Button>\n            </Form>\n          </>\n        )}\n      </Card>\n    </div>\n  )\n}\n\nexport { Recover }\n","import { FC } from 'react'\nimport { Empty } from 'antd'\nimport { Scrollbar } from 'containers/Scrollbar'\n\ninterface IMessagesProps {\n  channel: IChannelData\n}\n\nexport interface IChannelData {\n  id: number | string\n  ownerId: number\n  name: string\n  type: string\n  photo: string\n  members: string[]\n  messages: IMessage[]\n}\n\nexport interface IContactData {\n  name: string\n  type: string\n  photo: string\n  messages: IMessage[]\n}\n\ninterface IMessage {\n  id: string\n  text: string\n  from: string | number // @todo userId\n  type?: string\n}\n\nconst Messages: FC<IMessagesProps> = ({\n  channel: { messages }\n}: IMessagesProps) =>\n  (!messages?.length && (\n    <div className=\"chat-empty\">\n      <Empty description=\"Сообщений нет\" />\n    </div>\n  )) || (\n    <div className=\"chat-window\">\n      <Scrollbar style={{ height: 'calc(100vh - 104px)' }}>\n        {messages.map(({ id, text, from }) => (\n          <div key={id}>\n            <strong>{from}</strong>: {text}\n          </div>\n        ))}\n      </Scrollbar>\n    </div>\n  )\n\nexport { Messages }\n","import { FC, memo } from 'react'\nimport { Form, Input, Button } from 'antd'\nimport { SendOutlined } from '@ant-design/icons'\nimport { notify } from 'services/notification'\n\ninterface IFormValues {\n  text: string\n}\n\ninterface IChatInputProps {\n  sendMessage: (text: string) => void\n}\n\nconst InputMessage: FC<IChatInputProps> = memo(({ sendMessage }) => {\n  const [form] = Form.useForm()\n\n  const sendMessageHandler = (values: IFormValues) => {\n    try {\n      const { text } = values\n      sendMessage(text)\n      form.resetFields()\n    } catch (error) {\n      notify.error(error.message)\n    }\n  }\n  return (\n    <div className=\"chat-input\">\n      <Form\n        size=\"large\"\n        className=\"input-form\"\n        form={form}\n        onFinish={sendMessageHandler}\n      >\n        <Form.Item className=\"input-messaage\" required name=\"text\">\n          <Input autoFocus placeholder=\"Введите сообщение\" />\n        </Form.Item>\n        <Form.Item className=\"send-button\">\n          <Button htmlType=\"submit\" type=\"primary\" icon={<SendOutlined />}>\n            Отправить\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  )\n})\n\nexport { InputMessage }\n","import { useCallback } from 'react'\nimport { nanoid } from 'nanoid'\nimport { UserDTO } from 'services/user'\nimport { Empty, Alert, Typography, Button } from 'antd'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport {\n  sendChannelMessage,\n  sendContactMessage,\n  removeContact,\n  setActiveChannel,\n  addContact\n} from 'modules/Chat/actions'\nimport { userRemoveContact } from 'modules/Auth/actions'\nimport { useActions } from 'hooks/useActions'\nimport { socketService } from 'services/socket'\nimport { notify } from 'services/notification'\nimport { chatService } from 'services/chat'\nimport { Messages } from './Messages'\nimport { InputMessage } from './InputMessage'\n\nconst { Text, Title } = Typography\n\nconst Chat = () => {\n  const user = useShallowEqualSelector((state) => state.auth.user) as UserDTO\n  const [\n    dispatchSendChannelMessage,\n    dispatchSendContactMessage,\n    dispatchRemoveContact,\n    dispatchUserRemoveContact,\n    dispatchActiveChannel,\n    dispatchAddContact\n  ] = useActions(\n    [\n      sendChannelMessage,\n      sendContactMessage,\n      removeContact,\n      userRemoveContact,\n      setActiveChannel,\n      addContact\n    ],\n    null\n  )\n  const { activeChannel, channels, contacts } = useShallowEqualSelector(\n    (state) => state.chat\n  ) as any\n\n  const onSendMessage = useCallback(\n    (text: string): void => {\n      if (!activeChannel) return\n      if (!text) return\n\n      const id = nanoid()\n      const { id: userId, name } = user\n      const message = { id, text, from: `${name}(${userId})` }\n      const payload = {\n        activeChannelId: activeChannel.id,\n        message\n      }\n\n      if (activeChannel.type === 'channel') {\n        dispatchSendChannelMessage(payload)\n        socketService.sendChannelMessage(payload)\n      }\n\n      if (activeChannel.type === 'contact') {\n        dispatchSendContactMessage(payload)\n        socketService.sendContactMessage({\n          from: user.id,\n          to: activeChannel.id,\n          message\n        })\n      }\n    },\n    [\n      activeChannel,\n      dispatchSendChannelMessage,\n      dispatchSendContactMessage,\n      user\n    ]\n  )\n\n  if (!user || !activeChannel || (!channels && !contacts))\n    return (\n      <div className=\"chat-empty\">\n        <Empty description=\"Выберите канал для начала общения!\" />\n      </div>\n    )\n\n  const { id, type, name, isContactRequest, isInvite, text } = activeChannel\n\n  if (isContactRequest) {\n    return (\n      <>\n        <Alert\n          showIcon\n          message=\"Ожидание подтверждения\"\n          description={`Запрос на добавление в контакты отправлен пользователю ${name}`}\n          type=\"info\"\n        />\n        {text && (\n          <div className=\"invitation-text\">\n            <Title level={5}>Ваше сообщение пользователю:</Title>\n            <Text>\n              <blockquote>{text}</blockquote>\n            </Text>\n          </div>\n        )}\n      </>\n    )\n  }\n\n  const removeInviteHandler = async () => {\n    try {\n      const { type: responseType, message } = await chatService.removeInvite({\n        inviterId: activeChannel.id,\n        userId: user.id\n      })\n\n      if (message) {\n        if (responseType === 'success') {\n          notify.success(message)\n        }\n        if (responseType === 'error') {\n          notify.error(message)\n          return\n        }\n      }\n\n      dispatchRemoveContact(activeChannel.id)\n      dispatchActiveChannel(null)\n\n      socketService.removeInviteRequest({ to: activeChannel.id, contact: user })\n    } catch (error) {\n      notify.error(error.message)\n    }\n  }\n\n  const addContactHandler = async () => {\n    try {\n      const {\n        type: responseType,\n        message: serverMessage,\n        data\n      } = await chatService.addContact({\n        inviterId: activeChannel.id,\n        userId: user.id\n      })\n\n      if (serverMessage) {\n        if (responseType === 'success') {\n          dispatchAddContact({\n            ...data,\n            type: 'contact',\n            messages: []\n          })\n          dispatchActiveChannel({\n            ...data,\n            type: 'contact'\n          })\n\n          socketService.addContactRequest({\n            to: data.id,\n            contact: {\n              ...user,\n              type: 'contact',\n              messages: []\n            }\n          })\n\n          notify.success(serverMessage)\n        }\n\n        if (responseType === 'error') {\n          // @todo refactor\n          if (serverMessage === 'Пользователь отменил свое приглашение') {\n            dispatchRemoveContact(activeChannel.id)\n            dispatchUserRemoveContact(activeChannel.id)\n            dispatchActiveChannel(null)\n          }\n\n          notify.error(serverMessage)\n        }\n      }\n    } catch (error) {\n      notify.error(error.message)\n    }\n  }\n\n  if (isInvite) {\n    return (\n      <>\n        <Alert\n          showIcon\n          message=\"Запрос на добавление в контакты\"\n          description={`Пользователь ${name} хочет добавить Вас в свой список контактов`}\n          type=\"info\"\n        />\n        {text && (\n          <div className=\"invitation-text\">\n            <Title level={5}>Приветственное сообщение:</Title>\n            <Text>\n              <blockquote>{text}</blockquote>\n            </Text>\n          </div>\n        )}\n        <div className=\"stretch-container\">\n          <Button block onClick={addContactHandler}>\n            Добавить\n          </Button>\n          <Button block danger onClick={removeInviteHandler}>\n            Отказать\n          </Button>\n        </div>\n      </>\n    )\n  }\n\n  const channelData =\n    type === 'channel' ? channels && channels[id] : contacts && contacts[id]\n\n  if (!channelData) return null\n\n  return (\n    <>\n      <Messages channel={channelData} />\n      <InputMessage sendMessage={onSendMessage} />\n    </>\n  )\n}\n\nexport { Chat }\n","import { FC } from 'react'\nimport { Switch, Route, Redirect } from 'react-router-dom'\n\nimport { PrivateRoute } from 'containers/PrivateRoute'\nimport { Login } from 'components/Auth/Login'\nimport { ChangePassword } from 'components/Auth/ChangePassword'\nimport { Activation } from 'components/Auth/Activation'\nimport { Register } from 'components/Auth/Register'\nimport { Recover } from 'components/Auth/Recover'\nimport { Chat } from '../Chat'\n\nconst Routes: FC = () => (\n  <Switch>\n    <PrivateRoute exact path=\"/\" component={Chat} />\n    <Route path=\"/auth/login\" component={Login} />\n    <Route path=\"/auth/register\" component={Register} />\n    <Route path=\"/auth/activation/:code\" component={Activation} />\n    <Route path=\"/auth/recover\" component={Recover} />\n    <Route path=\"/auth/change-password/:code\" component={ChangePassword} />\n    <Route path=\"*\">\n      <Redirect to=\"/auth/login\" />\n    </Route>\n  </Switch>\n)\n\nexport { Routes }\n","import { FC, useState, useEffect } from 'react'\nimport { UserDTO } from 'services/user'\nimport { Layout } from 'antd'\nimport { PrivateContainer } from 'containers/Private'\nimport {\n  sendChannelMessage,\n  sendContactMessage,\n  initChannelsData,\n  initContactsData,\n  addContact,\n  setActiveChannel,\n  removeContact,\n  addChannel,\n  removeChannelMember\n} from 'modules/Chat/actions'\nimport { useShallowEqualSelector } from 'hooks/useShallowEqualSelector'\nimport { useActions } from 'hooks/useActions'\nimport { socketService } from 'services/socket'\nimport { notify } from 'services/notification'\nimport { Header } from './Header'\nimport { Sidebar } from './Sidebar'\nimport { Routes } from '../Routes'\n\nconst { Content } = Layout\n\nconst App: FC = () => {\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false)\n  const [\n    dispatchSendChannelMessage,\n    dispatchSendContactMessage,\n    dispatchInitChannelsData,\n    dispatchInitContactsData,\n    dispatchAddContact,\n    dispatchActiveChannel,\n    dispatchRemoveContact,\n    dispatchAddChannel,\n    dispatchRemoveChannelMember\n  ] = useActions(\n    [\n      sendChannelMessage,\n      sendContactMessage,\n      initChannelsData,\n      initContactsData,\n      addContact,\n      setActiveChannel,\n      removeContact,\n      addChannel,\n      removeChannelMember\n    ],\n    null\n  )\n\n  const user = useShallowEqualSelector((state) => state.auth.user) as UserDTO\n\n  const onSidebarToggle = (isCollapsed: boolean) => {\n    setSidebarCollapsed(isCollapsed)\n  }\n\n  useEffect(() => {\n    if (!user) return () => {}\n\n    const subscribeToSocketEvents = async () => {\n      await socketService.connect(user)\n      const {\n        channels: channelsData,\n        contacts: contactsData\n      } = await socketService.subscribeToChannels(user)\n\n      dispatchInitChannelsData(channelsData)\n      dispatchInitContactsData(contactsData)\n\n      socketService.subscribeToDisconnect(user)\n\n      socketService.subscribeToChannelMessageBroadcast(\n        ({ activeChannelId, message }) => {\n          dispatchSendChannelMessage({ activeChannelId, message })\n        }\n      )\n\n      socketService.subscribeToContactMessagePrivate((message, from) => {\n        dispatchSendContactMessage({\n          activeChannelId: from,\n          message\n        })\n      })\n\n      socketService.subscribeToInviteContact((payload) => {\n        dispatchAddContact(payload)\n      })\n\n      socketService.subscribeToAddContact((payload) => {\n        const { id, name, type } = payload\n        dispatchAddContact(payload)\n        dispatchActiveChannel({\n          id,\n          name,\n          type\n        })\n        notify.success(\n          'Добавление в контакты',\n          `Пользователь ${name} добавил(а) Вас в свой список контактов`\n        )\n      })\n\n      socketService.subscribeToRemoveInvite((payload) => {\n        const { id, name } = payload\n        dispatchRemoveContact(id)\n        dispatchActiveChannel(null)\n\n        notify.error(\n          'Отказ добавления в контакты',\n          `Пользователь ${name} не стал(а) добавлять Вас в свой список контактов`\n        )\n      })\n\n      socketService.subscribeToCancelInvite((payload) => {\n        const { id, name } = payload\n        dispatchRemoveContact(id)\n        dispatchActiveChannel(null)\n\n        notify.error(\n          'Отмена добавления в контакты',\n          `Пользователь ${name} отменил запрос на добавление в контакты`\n        )\n      })\n\n      socketService.subscribeToAddToChannel((payload) => {\n        const { inviterName, channel } = payload\n        socketService.subscribeToChannel(channel.id)\n        dispatchAddChannel(channel)\n\n        const { id, name, type } = channel\n        dispatchActiveChannel({ id, name, type })\n\n        notify.success(\n          'Добавление в канал',\n          `Пользователь ${inviterName} добавил(а) Вас в канал ${name}`\n        )\n      })\n\n      socketService.subscribeToChannelMemberLeave(\n        ({ channelId, channelName, userId, userName }) => {\n          dispatchRemoveChannelMember({ channelId, userId })\n\n          notify.info(\n            'Изменение в канале',\n            `Пользователь ${userName} покинул(а) канал ${channelName}`\n          )\n        }\n      )\n    }\n\n    subscribeToSocketEvents()\n\n    return () => {\n      socketService.unsubscribeFromSocketEvents()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [user])\n\n  return (\n    <Layout className=\"wrap-layout\">\n      <PrivateContainer>\n        <Sidebar\n          sidebarCollapsed={sidebarCollapsed}\n          onSidebarToggle={onSidebarToggle}\n        />\n      </PrivateContainer>\n\n      <Layout className=\"site-layout\">\n        <Header\n          sidebarCollapsed={sidebarCollapsed}\n          onSidebarToggle={onSidebarToggle}\n        />\n        <Content className=\"content\">\n          <Routes />\n        </Content>\n      </Layout>\n    </Layout>\n  )\n}\n\nexport { App }\n","import { takeEvery, put, call, fork } from 'redux-saga/effects'\r\nimport { authService } from 'services/auth'\r\nimport { socketService } from 'services/socket'\r\nimport {\r\n  userLoginRequest,\r\n  userLogoutRequest,\r\n  userFetchSuccess\r\n} from './actions'\r\nimport { setActiveChannel } from '../Chat/actions'\r\n\r\n/** login */\r\nexport function* userLoginRequestFlow({ payload: { data: user, token } }) {\r\n  yield put(userFetchSuccess(user))\r\n  yield call([authService, authService.setToken], token)\r\n}\r\nexport function* userLoginWatcher() {\r\n  yield takeEvery(userLoginRequest, userLoginRequestFlow)\r\n}\r\n\r\n/** logout */\r\nexport function* userLogoutRequestFlow() {\r\n  yield call([authService, authService.removeToken])\r\n  yield put(userFetchSuccess(false))\r\n  yield put(setActiveChannel(null))\r\n  yield call([socketService, socketService.disconnect])\r\n}\r\nexport function* userLogoutWatcher() {\r\n  yield takeEvery(userLogoutRequest, userLogoutRequestFlow)\r\n}\r\n\r\nconst authSagas = function* generator() {\r\n  yield fork(userLoginWatcher)\r\n  yield fork(userLogoutWatcher)\r\n}\r\n\r\nexport { authSagas }\r\n","import { combineReducers } from 'redux'\r\nimport { handleActions } from 'redux-actions'\r\nimport { UserDTO } from 'services/user'\r\nimport {\r\n  userFetchSuccess,\r\n  userFetchFailure,\r\n  userUpdatePhoto,\r\n  userRemoveContact,\r\n  userAddContact,\r\n  userRemoveChannel\r\n} from './actions'\r\n\r\nexport interface IAuthState {\r\n  user: UserDTO\r\n}\r\n\r\nexport const initialState = {\r\n  user: null\r\n}\r\n\r\nconst user = handleActions(\r\n  {\r\n    [userFetchSuccess]: (_state, action) => action.payload,\r\n    [userFetchFailure]: () => false,\r\n    [userUpdatePhoto]: (state, action) => ({ ...state, photo: action.payload }),\r\n    [userRemoveContact]: (state, action) => {\r\n      if (!state.contacts) {\r\n        return state\r\n      }\r\n\r\n      const oldContacts = JSON.parse(state.contacts)\r\n\r\n      let updatedContacts = oldContacts.filter(\r\n        (id: number) => action.payload !== id\r\n      )\r\n      if (!updatedContacts.length) {\r\n        updatedContacts = null\r\n      } else {\r\n        updatedContacts = JSON.stringify(updatedContacts)\r\n      }\r\n\r\n      return { ...state, contacts: updatedContacts }\r\n    },\r\n    [userRemoveChannel]: (state, action) => {\r\n      if (!state.channels) {\r\n        return state\r\n      }\r\n\r\n      const oldChannels = JSON.parse(state.channels)\r\n\r\n      let updatedChannels = oldChannels.filter(\r\n        (id: number) => action.payload !== id\r\n      )\r\n      if (!updatedChannels.length) {\r\n        updatedChannels = null\r\n      } else {\r\n        updatedChannels = JSON.stringify(updatedChannels)\r\n      }\r\n\r\n      return { ...state, channels: updatedChannels }\r\n    },\r\n    [userAddContact]: (state, action) => {\r\n      let contacts\r\n\r\n      if (!state.contacts) {\r\n        contacts = `[${action.payload}]`\r\n      } else {\r\n        const oldContacts = JSON.parse(state.contacts)\r\n        oldContacts.push(action.payload)\r\n        contacts = JSON.stringify(oldContacts)\r\n      }\r\n\r\n      return { ...state, contacts }\r\n    }\r\n  },\r\n  null\r\n)\r\n\r\nconst authReducer = combineReducers<IAuthState>({\r\n  user\r\n})\r\n\r\nexport { authReducer }\r\n","import { combineReducers } from 'redux'\r\nimport { handleActions } from 'redux-actions'\r\nimport {\r\n  setActiveChannel,\r\n  initChannelsData,\r\n  initContactsData,\r\n  sendChannelMessage,\r\n  sendContactMessage,\r\n  addChannel,\r\n  addContact,\r\n  populateChannel,\r\n  removeContact,\r\n  addChannelMember,\r\n  removeChannel,\r\n  removeChannelMember\r\n} from './actions'\r\n\r\nexport interface IActiveChannel {\r\n  id: number\r\n  name: string\r\n  type: string\r\n  isContactRequest?: boolean\r\n  text?: string\r\n}\r\n\r\nexport interface IChatState {\r\n  activeChannel: IActiveChannel\r\n  channels: Object\r\n  contacts: Object\r\n}\r\n\r\nexport const initialState: IChatState = {\r\n  activeChannel: null,\r\n  channels: null,\r\n  contacts: null\r\n}\r\n\r\nconst activeChannel = handleActions(\r\n  {\r\n    [setActiveChannel]: (_state, action) => action.payload\r\n  },\r\n  null\r\n)\r\n\r\nconst addMessage = (state, action) => {\r\n  if (!state) return state\r\n\r\n  return {\r\n    ...state,\r\n    [action.payload.activeChannelId]: {\r\n      ...state[action.payload.activeChannelId],\r\n      messages: [\r\n        ...state[action.payload.activeChannelId].messages,\r\n        action.payload.message\r\n      ]\r\n    }\r\n  }\r\n}\r\n\r\nconst channels = handleActions(\r\n  {\r\n    [initChannelsData]: (_state, action) => action.payload,\r\n    [sendChannelMessage]: addMessage,\r\n    [addChannel]: (state, action) => ({\r\n      ...state,\r\n      [action.payload.id]: {\r\n        ownerId: action.payload.ownerId,\r\n        name: action.payload.name,\r\n        members: action.payload.members,\r\n        photo: action.payload.photo,\r\n        type: action.payload.type,\r\n        messages: []\r\n      }\r\n    }),\r\n    [removeChannel]: (state, action) => {\r\n      let newState = { ...state }\r\n      delete newState[action.payload]\r\n      if (!Object.keys(newState).length) {\r\n        newState = null\r\n      }\r\n      return newState\r\n    },\r\n    [populateChannel]: (state, action) => ({\r\n      ...state,\r\n      [action.payload.id]: {\r\n        ...state[action.payload.id],\r\n        owner: action.payload.owner,\r\n        members: action.payload.members,\r\n        populated: true\r\n      }\r\n    }),\r\n    [addChannelMember]: (state, action) => ({\r\n      ...state,\r\n      [action.payload.id]: {\r\n        ...state[action.payload.id],\r\n        members: [...state[action.payload.id].members, action.payload.member]\r\n      }\r\n    }),\r\n    [removeChannelMember]: (state, action) => {\r\n      const oldMembers = [...state[action.payload.channelId].members]\r\n      let updatedMembers = oldMembers.filter(\r\n        (member) => member.id !== action.payload.userId\r\n      )\r\n      if (!updatedMembers.length) {\r\n        updatedMembers = null\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        [action.payload.channelId]: {\r\n          ...state[action.payload.channelId],\r\n          members: updatedMembers\r\n        }\r\n      }\r\n    }\r\n  },\r\n  null\r\n)\r\n\r\nconst contacts = handleActions(\r\n  {\r\n    [initContactsData]: (_state, action) => action.payload,\r\n    [sendContactMessage]: addMessage,\r\n    [addContact]: (state, action) => {\r\n      const contact = {\r\n        [action.payload.id]: {\r\n          ...action.payload\r\n        }\r\n      }\r\n      delete contact[action.payload.id].id\r\n\r\n      return state ? { ...state, ...contact } : { ...contact }\r\n    },\r\n    [removeContact]: (state, action) => {\r\n      let newState = { ...state }\r\n      delete newState[action.payload]\r\n      if (!Object.keys(newState).length) {\r\n        newState = null\r\n      }\r\n      return newState\r\n    }\r\n  },\r\n  null\r\n)\r\n\r\nconst chatReducer = combineReducers<IChatState>({\r\n  activeChannel,\r\n  channels,\r\n  contacts\r\n})\r\n\r\nexport { chatReducer }\r\n","import { combineReducers } from 'redux'\nimport { handleActions } from 'redux-actions'\nimport {\n  changeCreateChannelModalState,\n  changeUserProfileModalState,\n  changeAddContactModalState,\n  changeContactInfoModalState,\n  changeChannelInfoModalState,\n  changeAddToChannelModalState\n} from './actions'\n\nexport interface IModalsState {\n  createChannel: boolean\n  userProfile: boolean\n  addContact: boolean\n  contactInfo: boolean\n  channelInfo: boolean\n  addToChannel: boolean\n}\n\nexport const initialState = {\n  createChannel: false,\n  userProfile: false,\n  addContact: false,\n  contactInfo: false,\n  channelInfo: false,\n  addToChannel: false\n}\n\nconst createChannel = handleActions(\n  { [changeCreateChannelModalState]: (_state, action) => action.payload },\n  false\n)\n\nconst userProfile = handleActions(\n  { [changeUserProfileModalState]: (_state, action) => action.payload },\n  false\n)\n\nconst addContact = handleActions(\n  { [changeAddContactModalState]: (_state, action) => action.payload },\n  false\n)\n\nconst contactInfo = handleActions(\n  { [changeContactInfoModalState]: (_state, action) => action.payload },\n  false\n)\n\nconst channelInfo = handleActions(\n  { [changeChannelInfoModalState]: (_state, action) => action.payload },\n  false\n)\n\nconst addToChannel = handleActions(\n  { [changeAddToChannelModalState]: (_state, action) => action.payload },\n  false\n)\n\nconst modalsReducer = combineReducers<IModalsState>({\n  createChannel,\n  userProfile,\n  addContact,\n  contactInfo,\n  channelInfo,\n  addToChannel\n})\n\nexport { modalsReducer }\n","import { call, put } from 'redux-saga/effects'\nimport { authService } from 'services/auth'\nimport { userFetchSuccess, userFetchFailure } from './Auth/actions'\n\n/** Launch saga once when on app start */\nconst launchSaga = function* launchSaga() {\n  try {\n    const token = yield call([authService, authService.getToken])\n\n    if (!token) {\n      yield put(userFetchFailure())\n      return\n    }\n    const { data: user } = yield call([authService, authService.fetchByToken], {\n      token\n    })\n\n    if (!user) {\n      yield call([authService, authService.removeToken])\n      yield put(userFetchFailure())\n      return\n    }\n\n    yield put(userFetchSuccess(user))\n  } catch (error) {\n    yield call([authService, authService.removeToken])\n    yield put(userFetchFailure(error))\n  }\n}\n\nexport { launchSaga }\n","import { combineReducers } from 'redux'\nimport { fork } from 'redux-saga/effects'\nimport { authSagas } from 'modules/Auth/sagas'\nimport {\n  authReducer,\n  IAuthState,\n  initialState as authInitialState\n} from 'modules/Auth/reducer'\nimport {\n  chatReducer,\n  IChatState,\n  initialState as chatInitialState\n} from 'modules/Chat/reducer'\nimport {\n  modalsReducer,\n  IModalsState,\n  initialState as modalsInitialState\n} from 'modules/Modals/reducer'\nimport { launchSaga } from 'modules/launchSaga'\n\nexport interface IRootState {\n  auth: IAuthState\n  chat: IChatState\n  modals: IModalsState\n}\n\nexport const initialState: IRootState = {\n  auth: authInitialState,\n  chat: chatInitialState,\n  modals: modalsInitialState\n}\n\nexport const rootReducer = combineReducers({\n  auth: authReducer,\n  chat: chatReducer,\n  modals: modalsReducer\n})\n\nexport function* rootSaga() {\n  yield fork(authSagas)\n  yield fork(launchSaga)\n}\n","import { createStore, compose, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport createSagaMiddleware from 'redux-saga'\nimport { rootReducer, rootSaga } from 'modules'\n\nconst createAppStore = () => {\n  const sagaMiddleware = createSagaMiddleware()\n  const store = createStore(\n    rootReducer,\n    compose(composeWithDevTools(applyMiddleware(sagaMiddleware)))\n  )\n\n  sagaMiddleware.run(rootSaga)\n  return store\n}\n\nexport { createAppStore }\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\n// eslint-disable-next-line import/no-default-export\nexport default reportWebVitals\n","import { StrictMode } from 'react'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport { render } from 'react-dom'\nimport { App } from 'components/App'\nimport { createAppStore } from 'modules/store'\nimport reportWebVitals from 'reportWebVitals'\nimport 'index.scss'\n\nconst store = createAppStore()\n\nrender(\n  <StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}