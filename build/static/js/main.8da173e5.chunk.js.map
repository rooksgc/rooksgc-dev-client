{"version":3,"sources":["hooks/useShallowEqualSelector.ts","components/MainMenu/index.tsx","hooks/useActions.ts","modules/Auth/actions.ts","components/UserMenu/index.tsx","containers/Private.tsx","components/App/Header/index.tsx","hooks/useEscape.ts","modules/Chat/actions.ts","components/App/Sidebar/index.tsx","components/Chat/Messages/index.tsx","components/Chat/InputMessage/index.tsx","services/socket.ts","components/Chat/index.tsx","services/auth.ts","components/Login/index.tsx","components/Register/index.tsx","components/Recover/index.tsx","components/ChangePassword/index.tsx","components/Activation/index.tsx","containers/PrivateRoute.tsx","components/UserProfile/index.tsx","components/Routes/index.tsx","components/App/index.tsx","reportWebVitals.ts","modules/Auth/sagas.ts","modules/Auth/reducer.ts","modules/Chat/reducer.ts","modules/launchSaga.ts","modules/index.ts","modules/store.ts","index.tsx"],"names":["useShallowEqualSelector","selector","useSelector","shallowEqual","menuItems","key","label","path","icon","PieChartOutlined","MainMenu","location","useLocation","history","useHistory","user","state","auth","find","item","pathname","mode","selectedKeys","onClick","clicked","_item","push","map","Item","useActions","actions","deps","dispatch","useDispatch","useMemo","Array","isArray","a","bindActionCreators","userLoginRequest","createAction","userLogoutRequest","userFetchSuccess","userFetchFailure","UserMenu","dispatchUserLogoutRequest","menu","event","ProfileOutlined","Divider","LogoutOutlined","overlay","trigger","className","UserOutlined","PrivateContainer","children","AntHeader","Layout","Header","props","onSidebarToggle","sidebarCollapsed","currentChannel","onTriggerClick","MenuUnfoldOutlined","style","fontSize","padding","MenuFoldOutlined","count","marginBottom","backgroundColor","color","Private","useEscape","onEscape","useEffect","handleEsc","window","addEventListener","removeEventListener","setActiveChannelId","initChannelsData","addChannelMessage","Sider","channels","id","UploadOutlined","VideoCameraOutlined","Sidebar","onCurrentChannelChange","dispatchActiveChannelId","activeChannelId","chat","collapsed","collapsedWidth","theme","overflow","height","LockOutlined","UnlockOutlined","String","Messages","messages","data","length","text","from","InputMessage","sendMessage","Form","useForm","form","onFinish","values","resetFields","error","console","log","size","required","name","autoFocus","placeholder","htmlType","type","SendOutlined","memo","chatService","getUserChannelsData","userChannelsList","reduce","acc","channel","title","userChannelsData","WS","socket","undefined","connect","io","autoConnect","subscribeToChannels","emit","addMessageToChannel","payload","disconnect","Chat","dispatchAddChannelMessage","onSendMessage","useCallback","message","nanoid","channelsData","AUTH_TOKEN_STORAGE_KEY","makeError","response","status","AuthService","getAllUsers","send","method","endpoint","register","activate","code","login","fetchByToken","recover","checkSecret","changePassword","getToken","localStorage","getItem","setToken","setItem","removeToken","removeItem","axios","interceptors","request","use","config","token","headers","Authorization","Login","emptyMessage","useState","alert","setAlert","loading","setLoading","dispatchUserLoginRequest","email","password","authService","initialValues","remember","rules","min","prefix","MailOutlined","Password","noStyle","to","indicator","LoadingOutlined","spin","delay","block","Register","validateTrigger","pattern","dependencies","getFieldValue","validator","_","value","Promise","reject","Error","resolve","disabled","Recover","ChangePassword","useParams","secretError","setSecretError","changeSuccess","setChangeSuccess","secretType","match","Activation","activateUser","PrivateRoute","Component","component","rest","render","routeProps","defaultProps","UserProfile","role","bordered","maxWidth","Routes","exact","Content","App","setCurrentChannel","needRecreateRef","setNeedRecreateRef","setSidebarCollapsed","SR","useRef","isCollapsed","current","on","reason","channelId","off","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","userLoginRequestFlow","userLoginWatcher","userLogoutRequestFlow","userLogoutWatcher","generator","put","call","takeLatest","fork","handleActions","_state","action","combineReducers","launchSaga","rootSaga","authSagas","store","sagaMiddleware","createSagaMiddleware","createStore","rootReducer","compose","composeWithDevTools","applyMiddleware","run","createAppStore","document","getElementById"],"mappings":"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","file":"static/js/main.8da173e5.chunk.js","sourcesContent":["import { useSelector, shallowEqual } from 'react-redux'\nimport { RootState } from '../modules'\n\nconst useShallowEqualSelector = (selector: any) =>\n  useSelector<RootState>(selector, shallowEqual)\n\nexport default useShallowEqualSelector\n","import { FC } from 'react'\nimport { useLocation, useHistory } from 'react-router-dom'\nimport { Menu } from 'antd'\nimport { PieChartOutlined } from '@ant-design/icons'\nimport useShallowEqualSelector from '../../hooks/useShallowEqualSelector'\n\nconst menuItems = [\n  {\n    key: 'login',\n    label: 'Войти',\n    path: '/auth/login',\n    icon: <PieChartOutlined />\n  },\n  {\n    key: 'register',\n    label: 'Регистрация',\n    path: '/auth/register',\n    icon: <PieChartOutlined />\n  }\n]\n\nconst MainMenu: FC = () => {\n  const location = useLocation()\n  const history = useHistory()\n  const user = useShallowEqualSelector((state) => state.auth.user)\n\n  const key = menuItems.find((item) => location.pathname === item.path)?.key\n  if (user && !key) return null\n\n  const onClickMenu = (item) => {\n    if (item.key === key) return\n    const clicked = menuItems.find((_item) => _item.key === item.key)\n    history.push(clicked.path)\n  }\n\n  return (\n    <Menu mode=\"horizontal\" selectedKeys={[key]} onClick={onClickMenu}>\n      {menuItems.map((item) => (\n        <Menu.Item key={item.key} icon={item.icon}>\n          {item.label}\n        </Menu.Item>\n      ))}\n    </Menu>\n  )\n}\n\nexport default MainMenu\n","import { bindActionCreators } from 'redux'\nimport { useDispatch } from 'react-redux'\nimport { useMemo } from 'react'\n\nconst useActions = (actions, deps) => {\n  const dispatch = useDispatch()\n\n  return useMemo(\n    () => {\n      if (Array.isArray(actions)) {\n        return actions.map((a) => bindActionCreators(a, dispatch))\n      }\n      return bindActionCreators(actions, dispatch)\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    deps ? [dispatch, ...deps] : [dispatch]\n  )\n}\n\nexport default useActions\n","import { createAction } from 'redux-actions'\r\n\r\n/** Записать токен пользователя в стор */\r\nexport const userLoginRequest: any = createAction('AUTH/USER_LOGIN_REQUEST')\r\n\r\n/** Выход пользователя из системы (logout) */\r\nexport const userLogoutRequest: any = createAction('AUTH/USER_LOGOUT_REQUEST')\r\n\r\n/** Записать объект пользователя в стор */\r\nexport const userFetchSuccess: any = createAction('AUTH/USER_FETCH_SUCCESS')\r\n\r\n/** Ошибка получения объекта пользователя */\r\nexport const userFetchFailure: any = createAction('AUTH/USER_FETCH_FAILURE')\r\n","import { FC } from 'react'\nimport { useLocation, useHistory } from 'react-router-dom'\nimport { Menu, Dropdown, Avatar } from 'antd'\nimport {\n  UserOutlined,\n  LogoutOutlined,\n  ProfileOutlined\n} from '@ant-design/icons'\nimport useActions from '../../hooks/useActions'\nimport { userLogoutRequest } from '../../modules/Auth/actions'\n\nconst UserMenu: FC = () => {\n  const location = useLocation()\n  const history = useHistory()\n  const [dispatchUserLogoutRequest] = useActions([userLogoutRequest], null)\n\n  const handleMenuClick = (event) => {\n    const { key } = event\n    if (location.pathname === `/user/${key}`) return\n\n    switch (key) {\n      case 'profile':\n        history.push('/user/profile')\n        break\n      case 'logout':\n        dispatchUserLogoutRequest()\n        history.push('/auth/login')\n        break\n      default:\n        break\n    }\n  }\n\n  const menu = (\n    <Menu onClick={handleMenuClick}>\n      <Menu.Item key=\"profile\" icon={<ProfileOutlined />}>\n        Профиль\n      </Menu.Item>\n      <Menu.Divider />\n      <Menu.Item key=\"logout\" icon={<LogoutOutlined />}>\n        Выход\n      </Menu.Item>\n    </Menu>\n  )\n\n  return (\n    <Dropdown overlay={menu} trigger={['click']}>\n      <Avatar className=\"user-profile\" icon={<UserOutlined />} />\n    </Dropdown>\n  )\n}\n\nexport default UserMenu\n","import useShallowEqualSelector from '../hooks/useShallowEqualSelector'\n\nconst PrivateContainer = ({ children }) => {\n  const user = useShallowEqualSelector((state) => state.auth.user)\n  if (!user) return null\n\n  return children\n}\n\nexport default PrivateContainer\n","import { FC } from 'react'\nimport { Layout, Badge } from 'antd'\nimport { MenuUnfoldOutlined, MenuFoldOutlined } from '@ant-design/icons'\nimport MainMenu from '../../MainMenu'\nimport UserMenu from '../../UserMenu'\nimport PrivateContainer from '../../../containers/Private'\n\ninterface IHeaderProps {\n  sidebarCollapsed: boolean\n  currentChannel: string\n  onSidebarToggle: (isCollapsed: boolean) => void\n}\n\nconst { Header: AntHeader } = Layout\n\nconst Header: FC<IHeaderProps> = (props: IHeaderProps) => {\n  const { onSidebarToggle, sidebarCollapsed, currentChannel } = props\n  const onTriggerClick = () => {\n    const collapsedState = !sidebarCollapsed\n    onSidebarToggle(collapsedState)\n  }\n\n  return (\n    <AntHeader className=\"header background-white\">\n      {sidebarCollapsed ? (\n        <MenuUnfoldOutlined\n          style={{ fontSize: '20px', padding: '22px' }}\n          className=\"trigger\"\n          onClick={onTriggerClick}\n          label=\"Свернуть\"\n        />\n      ) : (\n        <MenuFoldOutlined\n          style={{ fontSize: '20px', padding: '22px' }}\n          className=\"trigger\"\n          onClick={onTriggerClick}\n        />\n      )}\n      {currentChannel && (\n        <Badge\n          count={currentChannel}\n          style={{\n            marginBottom: '6px',\n            backgroundColor: '#E7F3FF',\n            color: '#000'\n          }}\n        />\n      )}\n      <div className=\"header-menu\">\n        <MainMenu />\n        <PrivateContainer>\n          <UserMenu />\n        </PrivateContainer>\n      </div>\n    </AntHeader>\n  )\n}\n\nexport default Header\n","import { useEffect } from 'react'\n\nconst useEscape = (onEscape: () => any) => {\n  useEffect(() => {\n    const handleEsc = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') onEscape()\n    }\n    window.addEventListener('keydown', handleEsc)\n\n    return () => {\n      window.removeEventListener('keydown', handleEsc)\n    }\n  }, [onEscape])\n}\n\nexport default useEscape\n","import { createAction } from 'redux-actions'\r\n\r\n/** Получить активную комнату чата */\r\nexport const setActiveChannelId: any = createAction(\r\n  'CHAT/SET_ACTIVE_CHANNEL_ID'\r\n)\r\n/** Начальное состояние каналов на момент захода пользователя */\r\nexport const initChannelsData: any = createAction('CHAT/INIT_CHANNELS_DATA')\r\n/** Добавить сообщение в чат канала */\r\nexport const addChannelMessage: any = createAction('CHAT/ADD_CHANNEL_MESSAGE')\r\n","import { FC } from 'react'\nimport { Layout, Menu } from 'antd'\nimport { useLocation, useHistory } from 'react-router-dom'\nimport {\n  UploadOutlined,\n  VideoCameraOutlined,\n  LockOutlined,\n  UnlockOutlined\n} from '@ant-design/icons'\nimport PrivateContainer from '../../../containers/Private'\nimport useEscape from '../../../hooks/useEscape'\nimport useShallowEqualSelector from '../../../hooks/useShallowEqualSelector'\nimport { setActiveChannelId } from '../../../modules/Chat/actions'\nimport useActions from '../../../hooks/useActions'\n\ninterface IChannel {\n  id: number\n  label: string\n}\n\ninterface ISidebarProps {\n  sidebarCollapsed: boolean\n  onSidebarToggle: (isCollapsed: boolean) => void\n  onCurrentChannelChange: (channel: IChannel) => void\n}\n\nconst { Sider } = Layout\n\nconst channels = [\n  {\n    id: 1,\n    label: 'Общий чат',\n    icon: <UploadOutlined />\n  },\n  {\n    id: 2,\n    label: 'Тестовый канал',\n    icon: <VideoCameraOutlined />\n  },\n  {\n    id: 3,\n    label: 'Двач рандомач',\n    icon: <UploadOutlined />\n  },\n  {\n    id: 4,\n    label: 'Клюб любителей сосуль',\n    icon: <VideoCameraOutlined />\n  },\n  {\n    id: 5,\n    label: 'Сплавы и бани',\n    icon: <UploadOutlined />\n  },\n  {\n    id: 6,\n    label: 'Походы и перда',\n    icon: <VideoCameraOutlined />\n  },\n  {\n    id: 7,\n    label: 'Группа, которая скрывается пердунов',\n    icon: <UploadOutlined />\n  },\n  {\n    id: 8,\n    label: 'Котики и слоники',\n    icon: <VideoCameraOutlined />\n  },\n  {\n    id: 9,\n    label: 'Мир диких программистов',\n    icon: <UploadOutlined />\n  },\n  {\n    id: 10,\n    label: 'Пакеты мусора для бедных',\n    icon: <VideoCameraOutlined />\n  },\n  {\n    id: 11,\n    label: 'Покурим бамбук',\n    icon: <UploadOutlined />\n  },\n  {\n    id: 12,\n    label: 'Упоротые суслики',\n    icon: <VideoCameraOutlined />\n  },\n  {\n    id: 13,\n    label: 'Скучный вторник',\n    icon: <UploadOutlined />\n  },\n  {\n    id: 14,\n    label: 'Бегу, а волосы назад',\n    icon: <UploadOutlined />\n  },\n  {\n    id: 15,\n    label: 'Поперхнись-ка',\n    icon: <UploadOutlined />\n  },\n  {\n    id: 16,\n    label: 'Войти в АйТИ',\n    icon: <UploadOutlined />\n  },\n  {\n    id: 17,\n    label: 'Посторонним ВЭ',\n    icon: <UploadOutlined />\n  },\n  {\n    id: 18,\n    label: 'Подслушано в Дедовске',\n    icon: <UploadOutlined />\n  }\n]\n\nconst Sidebar: FC<ISidebarProps> = (props: ISidebarProps) => {\n  const { sidebarCollapsed, onSidebarToggle, onCurrentChannelChange } = props\n  const location = useLocation()\n  const history = useHistory()\n  const [dispatchActiveChannelId] = useActions([setActiveChannelId], null)\n  const activeChannelId = useShallowEqualSelector(\n    (state) => state.chat.activeChannelId\n  )\n\n  useEscape(() => {\n    if (location.pathname !== '/' || !activeChannelId) return\n    dispatchActiveChannelId('')\n    onCurrentChannelChange({ id: 0, label: '' })\n  })\n\n  const onClickMenu = ({ key }) => {\n    if (key === activeChannelId) return\n    if (location.pathname !== '/') {\n      history.push('/')\n    }\n\n    const { id, label } = channels.find((item) => String(item.id) === key)\n\n    dispatchActiveChannelId(key)\n    onSidebarToggle(true)\n    onCurrentChannelChange({ id, label })\n  }\n\n  return (\n    <PrivateContainer>\n      <Sider\n        trigger={null}\n        collapsed={sidebarCollapsed}\n        collapsedWidth={0}\n        className=\"sider\"\n        theme=\"dark\"\n        style={{\n          overflow: 'auto',\n          height: '100vh'\n        }}\n      >\n        <LockOutlined className=\"sidebar-lock\" />\n        <UnlockOutlined />\n        <Menu\n          theme=\"dark\"\n          mode=\"inline\"\n          selectedKeys={[activeChannelId as string]}\n          onClick={onClickMenu}\n        >\n          {channels.map((item) => (\n            <Menu.Item key={item.id} icon={item.icon}>\n              {item.label}\n            </Menu.Item>\n          ))}\n        </Menu>\n      </Sider>\n    </PrivateContainer>\n  )\n}\n\nexport default Sidebar\n","import { FC } from 'react'\n\ninterface IMessagesProps {\n  data: IChannelData\n}\n\ninterface IChannelData {\n  title: string\n  messages: IMessage[]\n}\n\ninterface IMessage {\n  id: string\n  text: string\n  from: string\n}\n\nconst Messages: FC<IMessagesProps> = ({\n  data: { messages }\n}: IMessagesProps) => {\n  if (!messages?.length) return <div className=\"chat-window\" />\n\n  return (\n    <div className=\"chat-window\">\n      {messages.map(({ id, text, from }) => (\n        <div key={id}>\n          <strong>{from}</strong>: {text}\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default Messages\n","import { FC, memo } from 'react'\nimport { Form, Input, Button } from 'antd'\nimport { SendOutlined } from '@ant-design/icons'\n\ninterface FormValues {\n  text: string\n}\n\ninterface IChatInputProps {\n  sendMessage: (text: string) => void\n}\n\nconst InputMessage: FC<IChatInputProps> = ({ sendMessage }) => {\n  const [form] = Form.useForm()\n\n  const onFinish = async (values: FormValues) => {\n    try {\n      const { text } = values\n      sendMessage(text)\n      form.resetFields()\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(error)\n    }\n  }\n  return (\n    <div className=\"chat-input\">\n      <Form size=\"large\" className=\"input-form\" form={form} onFinish={onFinish}>\n        <Form.Item className=\"input-messaage\" required name=\"text\">\n          <Input autoFocus placeholder=\"Введите сообщение\" />\n        </Form.Item>\n        <Form.Item className=\"send-button\">\n          <Button htmlType=\"submit\" type=\"primary\" icon={<SendOutlined />}>\n            Отправить\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  )\n}\n\nexport default memo(InputMessage)\n","import { io } from 'socket.io-client'\nimport { UserDTO } from './auth'\n\n// TODO: Move to \"Chat service\"\nconst chatService = {\n  getUserChannelsData: async (user: UserDTO) => {\n    // Get channels from database for userId = userData.id\n    // eslint-disable-next-line no-console\n    console.log(user.id)\n\n    // todo fetch from db\n    const userChannelsList = [\n      1,\n      2,\n      3,\n      4,\n      5,\n      6,\n      7,\n      8,\n      9,\n      10,\n      11,\n      12,\n      13,\n      14,\n      15,\n      16,\n      17,\n      18\n    ]\n\n    // todo fetch from db\n    const userChannelsData = await userChannelsList.reduce(\n      (acc, channel) => ({\n        ...acc,\n        [channel]: {\n          title: `channel_${channel}`,\n          messages: []\n        }\n      }),\n      {}\n    )\n\n    return { userChannelsList, userChannelsData }\n  }\n}\n\nconst WS = {\n  socket: undefined,\n  connect: async (user: UserDTO) => {\n    if (!WS.socket) {\n      WS.socket = io({\n        autoConnect: false\n      })\n\n      WS.socket.connect()\n    }\n\n    return WS.subscribeToChannels(user)\n  },\n  subscribeToChannels: async (user: UserDTO) => {\n    const {\n      userChannelsList,\n      userChannelsData\n    } = await chatService.getUserChannelsData(user)\n\n    WS.socket.emit('channels:subscribe', userChannelsList)\n    return userChannelsData\n  },\n  addMessageToChannel: (payload) => {\n    WS.socket.emit('channel:message:add', payload)\n  },\n  disconnect: () => {\n    WS.socket.disconnect()\n    WS.socket = undefined\n  }\n}\n\nexport default WS\n","import { useCallback } from 'react'\nimport { nanoid } from 'nanoid'\nimport { UserDTO } from 'src/services/auth'\nimport Messages from './Messages'\nimport InputMessage from './InputMessage'\nimport useShallowEqualSelector from '../../hooks/useShallowEqualSelector'\nimport { addChannelMessage } from '../../modules/Chat/actions'\nimport useActions from '../../hooks/useActions'\nimport WS from '../../services/socket'\n\nconst Chat = () => {\n  const user = useShallowEqualSelector((state) => state.auth.user) as UserDTO\n  const [dispatchAddChannelMessage] = useActions([addChannelMessage], null)\n  const { activeChannelId, channels } = useShallowEqualSelector(\n    (state) => state.chat\n  ) as any\n\n  const onSendMessage = useCallback(\n    (text: string): void => {\n      if (!activeChannelId) return\n      if (!text) return\n\n      const id = nanoid()\n      const message = { id, text, from: user.name }\n\n      dispatchAddChannelMessage({ activeChannelId, message })\n      WS.addMessageToChannel({ activeChannelId, message })\n    },\n    [activeChannelId, dispatchAddChannelMessage, user.name]\n  )\n\n  if (!user || !activeChannelId || !channels) return null\n\n  const channelsData = channels[activeChannelId as string]\n  if (!channelsData) return null\n\n  return (\n    <>\n      <Messages data={channelsData} />\n      <InputMessage sendMessage={onSendMessage} />\n    </>\n  )\n}\n\nexport default Chat\n","import axios, { AxiosRequestConfig, AxiosResponse } from 'axios'\n\nexport interface ServerResponse {\n  type: any\n  message?: string\n  data?: any\n  errors?: string[]\n  token?: string\n}\n\nexport interface UserLoginRequestDTO {\n  email: string\n  password: string\n}\n\nexport interface UserCreateRequestDTO {\n  name: string\n  email: string\n  password: string\n}\n\nexport interface UserDTO {\n  id: number\n  name: string\n  email: string\n  role: string\n}\n\nexport interface UserRecoverPasswordRequestDTO {\n  email: string\n}\n\nexport interface CheckSecretRequestDTO {\n  code: string\n  secretType: string\n}\n\nexport interface ChangePasswordRequestDTO {\n  code: string\n  password: string\n}\n\nexport interface UserFetchByTokenRequestDTO {\n  token: string\n}\n\n/** Сообщение при недоступном соединении */\nexport const SERVER_UNAVAILABLE =\n  'Сервер не отвечает или временно недоступен. Попробуйте повторить запрос позднее.'\n\n/** Ключ, по которому в localStorage хранится токен */\nconst AUTH_TOKEN_STORAGE_KEY = 'auth'\n\n/** Отказ в предоставлении ресурса из-за неверного токена */\nexport const AUTH_REJECTION_MESSAGE =\n  'Войдите или зарегистрируйтесь для просмотра данного содержимого.'\n\nexport const makeError = (error: any): ServerResponse => {\n  const {\n    response: { data, status }\n  } = error\n\n  if (typeof data === 'string' && (status === 502 || status === 500)) {\n    return {\n      type: 'error',\n      message: SERVER_UNAVAILABLE\n    }\n  }\n\n  if (data?.message === 'No authorization token was found') {\n    return {\n      type: 'error',\n      message: AUTH_REJECTION_MESSAGE\n    }\n  }\n\n  return data\n}\n\nconst AuthService = {\n  /** Получить список всех пользователей */\n  getAllUsers: async (): Promise<ServerResponse> =>\n    AuthService.send({\n      method: 'get',\n      endpoint: '/api/v1/auth/users'\n    }),\n  /** Регистрация нового пользователя */\n  register: async (payload: UserCreateRequestDTO): Promise<ServerResponse> =>\n    AuthService.send({\n      method: 'put',\n      endpoint: '/api/v1/auth/register',\n      payload\n    }),\n\n  /** Активация пользователя по коду из письма */\n  activate: async (code: string): Promise<ServerResponse> =>\n    AuthService.send({\n      method: 'patch',\n      endpoint: `/api/v1/auth/activate/${code}`\n    }),\n\n  /** Вход пользователя в систему и полуение токена */\n  login: async (payload: UserLoginRequestDTO): Promise<ServerResponse> =>\n    AuthService.send({\n      method: 'post',\n      endpoint: '/api/v1/auth/login',\n      payload\n    }),\n\n  /** Попытка получить объект пользователя по токену */\n  fetchByToken: async (\n    payload: UserFetchByTokenRequestDTO\n  ): Promise<ServerResponse> =>\n    AuthService.send({\n      method: 'post',\n      endpoint: '/api/v1/auth/fetch-by-token',\n      payload\n    }),\n\n  /** Запрос на изменение пароля, отправка письма со ссылкой на email */\n  recover: async (\n    payload: UserRecoverPasswordRequestDTO\n  ): Promise<ServerResponse> =>\n    AuthService.send({\n      method: 'post',\n      endpoint: '/api/v1/auth/recover',\n      payload\n    }),\n\n  /** Проверка секретного ключа для доступа к форме восстановления пароля */\n  checkSecret: async (\n    payload: CheckSecretRequestDTO\n  ): Promise<ServerResponse> =>\n    AuthService.send({\n      method: 'post',\n      endpoint: '/api/v1/auth/check-secret',\n      payload\n    }),\n\n  /** Изменение пароля пользователя */\n  changePassword: async (\n    payload: ChangePasswordRequestDTO\n  ): Promise<ServerResponse> =>\n    AuthService.send({\n      method: 'patch',\n      endpoint: '/api/v1/auth/change-password',\n      payload\n    }),\n\n  getToken: (): string | null => localStorage.getItem(AUTH_TOKEN_STORAGE_KEY),\n\n  setToken: (payload: string): void =>\n    localStorage.setItem(AUTH_TOKEN_STORAGE_KEY, payload),\n\n  removeToken: (): void => localStorage.removeItem(AUTH_TOKEN_STORAGE_KEY),\n\n  send: async ({ method, endpoint, payload = {} }): Promise<ServerResponse> => {\n    try {\n      const response: AxiosResponse = await axios[method](endpoint, payload)\n      return response.data\n    } catch (error) {\n      return makeError(error)\n    }\n  }\n}\n\naxios.interceptors.request.use(\n  (config: AxiosRequestConfig) => {\n    const token = AuthService.getToken()\n\n    if (token) {\n      // eslint-disable-next-line no-param-reassign\n      config.headers = {\n        Authorization: `Bearer ${token}`\n      }\n    }\n\n    return config\n  },\n  (error) => makeError(error)\n)\n\nexport default AuthService\n","import { FC, useState } from 'react'\nimport { Form, Input, Button, Card, Alert, Spin } from 'antd'\nimport { MailOutlined, LockOutlined, LoadingOutlined } from '@ant-design/icons'\nimport { Link, useHistory } from 'react-router-dom'\nimport useActions from '../../hooks/useActions'\nimport authService from '../../services/auth'\nimport { userLoginRequest } from '../../modules/Auth/actions'\n\ninterface FormValues {\n  email: string\n  password: string\n}\n\nconst Login: FC = () => {\n  const emptyMessage = { type: '', message: '' }\n  const [form] = Form.useForm()\n  const [alert, setAlert] = useState(emptyMessage)\n  const [loading, setLoading] = useState(false)\n  const [dispatchUserLoginRequest] = useActions([userLoginRequest], null)\n  const history = useHistory()\n\n  const onFinish = async (values: FormValues) => {\n    try {\n      setAlert(emptyMessage)\n      setLoading(true)\n\n      const { email, password } = values\n      const { type, message, token, data } = await authService.login({\n        email,\n        password\n      })\n\n      if (message) {\n        setAlert({ type, message })\n        setLoading(false)\n        if (type === 'error') return\n      }\n\n      dispatchUserLoginRequest({ data, token })\n      setLoading(false)\n\n      history.push('/')\n    } catch (error) {\n      setAlert(error)\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"flex-center\">\n      <Card className=\"card\" title=\"Вход в систему\">\n        {alert.message && (\n          <Alert\n            className=\"alert\"\n            message={alert.message}\n            type={alert.type as any}\n          />\n        )}\n        <Form\n          form={form}\n          name=\"login\"\n          className=\"login-form\"\n          initialValues={{ remember: true }}\n          onFinish={onFinish}\n        >\n          <Form.Item\n            name=\"email\"\n            rules={[\n              {\n                required: true,\n                type: 'email',\n                min: 4,\n                message: 'Некорректный email'\n              }\n            ]}\n          >\n            <Input prefix={<MailOutlined />} placeholder=\"Email\" size=\"large\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"password\"\n            rules={[{ required: true, min: 6, message: 'Минимум 6 символов' }]}\n          >\n            <Input.Password\n              placeholder=\"Пароль\"\n              prefix={<LockOutlined />}\n              size=\"large\"\n            />\n          </Form.Item>\n\n          <Form.Item>\n            <Form.Item name=\"register\" noStyle>\n              <Link to=\"/auth/register\">Регистрация</Link>\n            </Form.Item>\n\n            <Link className=\"link-recover\" to=\"/auth/recover\">\n              Забыли пароль?\n            </Link>\n          </Form.Item>\n\n          {loading && (\n            <Spin\n              className=\"center\"\n              indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n              delay={500}\n            />\n          )}\n\n          <Button size=\"large\" type=\"primary\" htmlType=\"submit\" block>\n            Войти\n          </Button>\n        </Form>\n      </Card>\n    </div>\n  )\n}\n\nexport default Login\n","import { FC, useState } from 'react'\nimport { Form, Input, Button, Card, Alert, Spin } from 'antd'\nimport {\n  UserOutlined,\n  LockOutlined,\n  MailOutlined,\n  LoadingOutlined\n} from '@ant-design/icons'\nimport authService from '../../services/auth'\n\ninterface FormValues {\n  name: string\n  email: string\n  password: string\n}\n\nconst Register: FC = () => {\n  const emptyMessage = { type: '', message: '' }\n  const [form] = Form.useForm()\n  const [alert, setAlert] = useState(emptyMessage)\n  const [loading, setLoading] = useState(false)\n\n  const onFinish = async (values: FormValues) => {\n    try {\n      setAlert(emptyMessage)\n      setLoading(true)\n\n      const { name, email, password } = values\n      const { type, message } = await authService.register({\n        name,\n        email,\n        password\n      })\n\n      if (message) {\n        setAlert({ type, message })\n        setLoading(false)\n        if (type === 'error') return\n      }\n\n      form.resetFields()\n      setLoading(false)\n    } catch (error) {\n      setAlert(error)\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"flex-center\">\n      <Card className=\"card\" title=\"Регистрация\">\n        {alert.message && (\n          <Alert\n            className=\"alert\"\n            message={alert.message}\n            type={alert.type as any}\n          />\n        )}\n        <Form\n          form={form}\n          name=\"register\"\n          initialValues={{ remember: true }}\n          onFinish={onFinish}\n          validateTrigger=\"onBlur\"\n        >\n          <Form.Item\n            name=\"name\"\n            rules={[\n              {\n                required: true,\n                message:\n                  \"Имя должно содержать минимум 4 символа английского или русского алфавита, допустимы цифры и знаки '- _'\",\n                pattern: /^[a-zA-Zа-яА-ЯёЁ0-9-_\\s]{4,}$/\n              }\n            ]}\n          >\n            <Input placeholder=\"Имя\" size=\"large\" prefix={<UserOutlined />} />\n          </Form.Item>\n\n          <Form.Item\n            name=\"email\"\n            rules={[\n              { required: true, type: 'email', message: 'Некорректный email' }\n            ]}\n          >\n            <Input prefix={<MailOutlined />} placeholder=\"Email\" size=\"large\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"password\"\n            rules={[\n              {\n                required: true,\n                message: 'Введите пароль! Минимум 6 символов.',\n                min: 6\n              }\n            ]}\n          >\n            <Input.Password\n              placeholder=\"Пароль\"\n              prefix={<LockOutlined />}\n              size=\"large\"\n            />\n          </Form.Item>\n\n          <Form.Item\n            name=\"confirm-password\"\n            dependencies={['password']}\n            rules={[\n              {\n                required: true,\n                message: 'Введите подтверждение пароля! Минимум 6 символов.',\n                min: 6\n              },\n              ({ getFieldValue }) => ({\n                validator(_, value) {\n                  if (!value || getFieldValue('password') === value) {\n                    return Promise.resolve()\n                  }\n                  return Promise.reject(new Error('Пароли должны совпадать!'))\n                }\n              })\n            ]}\n          >\n            <Input.Password\n              placeholder=\"Пароль еще раз\"\n              prefix={<LockOutlined />}\n              size=\"large\"\n            />\n          </Form.Item>\n\n          {loading && (\n            <Spin\n              className=\"center\"\n              indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n              delay={500}\n            />\n          )}\n\n          <Button\n            className=\"submit-button\"\n            type=\"primary\"\n            htmlType=\"submit\"\n            size=\"large\"\n            block\n            disabled={loading}\n          >\n            Зарегистрироваться\n          </Button>\n        </Form>\n      </Card>\n    </div>\n  )\n}\n\nexport default Register\n","import { FC, useState } from 'react'\nimport { Form, Input, Button, Card, Alert, Spin } from 'antd'\nimport { MailOutlined, LoadingOutlined } from '@ant-design/icons'\nimport authService from '../../services/auth'\n\ninterface FormValues {\n  email: string\n}\n\nconst Recover: FC = () => {\n  const emptyMessage = { type: '', message: '' }\n  const [form] = Form.useForm()\n  const [alert, setAlert] = useState(emptyMessage)\n  const [loading, setLoading] = useState(false)\n\n  const onFinish = async (values: FormValues) => {\n    try {\n      setAlert(emptyMessage)\n      setLoading(true)\n\n      const { email } = values\n      const { type, message } = await authService.recover({\n        email\n      })\n\n      if (message) {\n        setAlert({ type, message })\n        setLoading(false)\n        if (type === 'error') return\n      }\n\n      form.resetFields()\n      setLoading(false)\n    } catch (error) {\n      setAlert(error)\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"flex-center\">\n      <Card className=\"card\" title=\"Восстановление пароля\">\n        {alert.message && (\n          <Alert\n            className=\"alert\"\n            message={alert.message}\n            type={alert.type as any}\n          />\n        )}\n        {alert.type !== 'success' && (\n          <>\n            <p>\n              Укажите email, указанный при регистрации и мы вышлем на него\n              ссылку для восстановления пароля.\n            </p>\n            <Form\n              form={form}\n              name=\"recover\"\n              className=\"login-form\"\n              initialValues={{ remember: true }}\n              onFinish={onFinish}\n              validateTrigger=\"onBlur\"\n            >\n              <Form.Item\n                name=\"email\"\n                rules={[\n                  {\n                    required: true,\n                    type: 'email',\n                    message: 'Некорректный email!'\n                  }\n                ]}\n              >\n                <Input\n                  prefix={<MailOutlined />}\n                  placeholder=\"Email\"\n                  size=\"large\"\n                />\n              </Form.Item>\n\n              {loading && (\n                <Spin\n                  className=\"center\"\n                  indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n                  delay={500}\n                />\n              )}\n\n              <Button\n                size=\"large\"\n                type=\"primary\"\n                htmlType=\"submit\"\n                block\n                disabled={loading}\n              >\n                Восстановить пароль\n              </Button>\n            </Form>\n          </>\n        )}\n      </Card>\n    </div>\n  )\n}\n\nexport default Recover\n","import { FC, useState, useEffect } from 'react'\nimport { useParams, Link } from 'react-router-dom'\nimport { Form, Input, Button, Card, Alert } from 'antd'\nimport { LockOutlined } from '@ant-design/icons'\nimport authService from '../../services/auth'\n\ninterface ChangePasswordParams {\n  code?: string\n}\n\ninterface FormValues {\n  password: string\n  confirmPassword: string\n}\n\nconst ChangePassword: FC = () => {\n  const { code }: ChangePasswordParams = useParams()\n  const emptyMessage = { type: '', message: '' }\n  const [alert, setAlert] = useState(emptyMessage)\n  const [secretError, setSecretError] = useState(false)\n  const [changeSuccess, setChangeSuccess] = useState(false)\n  const [loading, setLoading] = useState(false)\n\n  useEffect(() => {\n    const checkSecret = async () => {\n      const { type, message } = await authService.checkSecret({\n        code,\n        secretType: 'RECOVER_PASSWORD'\n      })\n      if (type === 'error') {\n        setAlert({ type, message })\n        setSecretError(true)\n      }\n    }\n\n    if (\n      code.match(\n        /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i\n      )\n    ) {\n      checkSecret()\n    } else {\n      setAlert({ type: 'error', message: 'Неверный секретный код!' })\n      setSecretError(true)\n    }\n  }, [code])\n\n  const onFinish = async (values: FormValues) => {\n    try {\n      setAlert(emptyMessage)\n      setLoading(true)\n\n      const { password } = values\n      const { type, message } = await authService.changePassword({\n        code,\n        password\n      })\n\n      if (message) {\n        setAlert({ type, message })\n        setLoading(false)\n        if (type === 'error') return\n      }\n\n      setChangeSuccess(true)\n      setLoading(false)\n    } catch (error) {\n      setAlert(error)\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"flex-center\">\n      <Card className=\"card\" title=\"Изменение пароля\">\n        {alert.message && (\n          <Alert\n            className=\"alert\"\n            message={alert.message}\n            type={alert.type as any}\n          />\n        )}\n\n        {changeSuccess && (\n          <p>\n            Теперь Вы можете <Link to=\"/auth/login\">Войти</Link> в приложение\n          </p>\n        )}\n\n        {!secretError && !changeSuccess && (\n          <>\n            <p>Придумайте новый пароль</p>\n            <Form\n              name=\"change-password-request\"\n              initialValues={{ remember: true }}\n              onFinish={onFinish}\n            >\n              <Form.Item\n                name=\"password\"\n                rules={[{ required: true, message: 'Введите пароль!' }]}\n              >\n                <Input.Password\n                  placeholder=\"Пароль\"\n                  prefix={<LockOutlined />}\n                  size=\"large\"\n                />\n              </Form.Item>\n\n              <Form.Item\n                name=\"confirmPassword\"\n                dependencies={['password']}\n                rules={[\n                  { required: true, message: 'Введите подтверждение пароля!' },\n                  ({ getFieldValue }) => ({\n                    validator(_, value) {\n                      if (!value || getFieldValue('password') === value) {\n                        return Promise.resolve()\n                      }\n                      return Promise.reject(\n                        new Error('Пароли должны совпадать!')\n                      )\n                    }\n                  })\n                ]}\n              >\n                <Input.Password\n                  placeholder=\"Пароль еще раз\"\n                  prefix={<LockOutlined />}\n                  size=\"large\"\n                />\n              </Form.Item>\n\n              <Button\n                className=\"submit-button\"\n                type=\"primary\"\n                htmlType=\"submit\"\n                size=\"large\"\n                block\n                disabled={loading}\n              >\n                Изменить пароль\n              </Button>\n            </Form>\n          </>\n        )}\n      </Card>\n    </div>\n  )\n}\n\nexport default ChangePassword\n","import { FC, useState, useEffect } from 'react'\nimport { Card, Alert } from 'antd'\nimport { Link, useParams } from 'react-router-dom'\nimport authService from '../../services/auth'\n\ninterface ActivationParams {\n  code?: string\n}\n\nconst Activation: FC = () => {\n  const { code }: ActivationParams = useParams()\n  const emptyMessage = { type: '', message: '' }\n  const [alert, setAlert] = useState(emptyMessage)\n\n  useEffect(() => {\n    const activateUser = async () => {\n      const { type, message } = await authService.activate(code)\n      if (message) {\n        setAlert({ type, message })\n      }\n    }\n    activateUser()\n  }, [code])\n\n  return (\n    <div className=\"flex-center\">\n      <Card className=\"card\" title=\"Активация нового пользователя\">\n        {alert.message && (\n          <Alert\n            className=\"alert\"\n            message={alert.message}\n            type={alert.type as any}\n          />\n        )}\n        <Link className=\"login-link\" to=\"/auth/login\">\n          Вход\n        </Link>\n        <Link className=\"link-recover\" to=\"/auth/recover\">\n          Восстановить пароль\n        </Link>\n      </Card>\n    </div>\n  )\n}\n\nexport default Activation\n","import { FC } from 'react'\r\nimport { Route, Redirect, RouteProps } from 'react-router-dom'\r\nimport useShallowEqualSelector from '../hooks/useShallowEqualSelector'\r\nimport { RootState } from '../modules'\r\n\r\ninterface PrivateRouteProps extends RouteProps {\r\n  component?: any\r\n  children?: any\r\n}\r\n\r\nconst PrivateRoute: FC<PrivateRouteProps> = ({\r\n  component: Component,\r\n  children,\r\n  ...rest\r\n}) => {\r\n  const user = useShallowEqualSelector((state: RootState) => state.auth.user)\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(routeProps) => {\r\n        if (user === null) return null\r\n\r\n        if (user === false) {\r\n          return (\r\n            <Redirect\r\n              to={{\r\n                pathname: '/auth/login',\r\n                state: { from: routeProps.location }\r\n              }}\r\n            />\r\n          )\r\n        }\r\n\r\n        if (Component) {\r\n          return <Component {...routeProps} />\r\n        }\r\n\r\n        return children\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nPrivateRoute.defaultProps = {\r\n  component: undefined\r\n}\r\n\r\nexport default PrivateRoute\r\n","import { Card } from 'antd'\nimport useShallowEqualSelector from '../../hooks/useShallowEqualSelector'\nimport { UserDTO } from '../../services/auth'\n\nconst UserProfile = () => {\n  const { name, email, role } = useShallowEqualSelector(\n    (state) => state.auth.user\n  ) as UserDTO\n  return (\n    <>\n      <Card title=\"Профиль\" bordered={false} style={{ maxWidth: 500 }}>\n        <p>Имя: {name}</p>\n        <p>Email: {email}</p>\n        <p>Роль: {role}</p>\n      </Card>\n    </>\n  )\n}\n\nexport default UserProfile\n","import { FC } from 'react'\nimport { Switch, Route, Redirect } from 'react-router-dom'\n\nimport Chat from '../Chat'\nimport Login from '../Login'\nimport Register from '../Register'\nimport Recover from '../Recover'\nimport ChangePassword from '../ChangePassword'\nimport Activation from '../Activation'\nimport PrivateRoute from '../../containers/PrivateRoute'\nimport UserProfile from '../UserProfile'\n\nconst Routes: FC = () => (\n  <Switch>\n    <PrivateRoute exact path=\"/\" component={Chat} />\n    <Route path=\"/auth/login\" component={Login} />\n    <Route path=\"/auth/register\" component={Register} />\n    <Route path=\"/auth/activation/:code\" component={Activation} />\n    <Route path=\"/auth/recover\" component={Recover} />\n    <Route path=\"/auth/change-password/:code\" component={ChangePassword} />\n    <PrivateRoute path=\"/user/profile\" component={UserProfile} />\n    <Route path=\"*\">\n      <Redirect to=\"/auth/login\" />\n    </Route>\n  </Switch>\n)\n\nexport default Routes\n","import { FC, useState, useEffect, useRef } from 'react'\nimport { UserDTO } from 'src/services/auth'\nimport { Layout } from 'antd'\nimport Header from './Header'\nimport Sidebar from './Sidebar'\nimport Routes from '../Routes'\nimport { addChannelMessage } from '../../modules/Chat/actions'\nimport useShallowEqualSelector from '../../hooks/useShallowEqualSelector'\nimport useActions from '../../hooks/useActions'\nimport WS from '../../services/socket'\n\nconst { Content } = Layout\n\nconst App: FC = () => {\n  const [currentChannel, setCurrentChannel] = useState('')\n  const [needRecreateRef, setNeedRecreateRef] = useState(0)\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false)\n  const SR = useRef(null)\n  const [dispatchAddChannelMessage] = useActions([addChannelMessage], null)\n  const { activeChannelId } = useShallowEqualSelector(\n    (state) => state.chat\n  ) as any\n  const user = useShallowEqualSelector((state) => state.auth.user) as UserDTO\n\n  const onSidebarToggle = (isCollapsed: boolean) => {\n    setSidebarCollapsed(isCollapsed)\n  }\n  const onCurrentChannelChange = ({ label }) => {\n    setCurrentChannel(label)\n  }\n\n  useEffect(() => {\n    if (!WS.socket) return null\n    SR.current = WS.socket\n\n    // Correct reconnection after server emits disconnected event\n    WS.socket.on('disconnect', (reason: string) => {\n      if (reason === 'transport error' || reason === 'ping timeout') {\n        if (!user) return\n        WS.disconnect()\n        WS.connect(user)\n        setNeedRecreateRef((state) => state + 1)\n      }\n    })\n\n    SR.current.on(\n      'channel:message:broadcast',\n      ({ activeChannelId: channelId, message, from }) => {\n        dispatchAddChannelMessage({ activeChannelId: channelId, message, from })\n      }\n    )\n\n    return () => {\n      SR.current.off('channel:message:broadcast')\n    }\n  }, [user, activeChannelId, dispatchAddChannelMessage, needRecreateRef])\n\n  return (\n    <Layout className=\"wrap-layout\">\n      <Sidebar\n        sidebarCollapsed={sidebarCollapsed}\n        onSidebarToggle={onSidebarToggle}\n        onCurrentChannelChange={onCurrentChannelChange}\n      />\n      <Layout className=\"site-layout\">\n        <Header\n          sidebarCollapsed={sidebarCollapsed}\n          onSidebarToggle={onSidebarToggle}\n          currentChannel={currentChannel}\n        />\n        <Content className=\"content\">\n          <Routes />\n        </Content>\n      </Layout>\n    </Layout>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import { takeLatest, put, call, fork } from 'redux-saga/effects'\r\nimport {\r\n  userLoginRequest,\r\n  userLogoutRequest,\r\n  userFetchSuccess\r\n} from './actions'\r\nimport { initChannelsData, setActiveChannelId } from '../Chat/actions'\r\nimport authService from '../../services/auth'\r\nimport WS from '../../services/socket'\r\n\r\n/** Успешный вход пользователя */\r\nexport function* userLoginRequestFlow({ payload: { data, token } }) {\r\n  yield put(userFetchSuccess(data))\r\n  yield call([authService, authService.setToken], token)\r\n  const channelsData = yield call([WS, WS.connect], data)\r\n  yield put(initChannelsData(channelsData))\r\n}\r\nexport function* userLoginWatcher() {\r\n  yield takeLatest(userLoginRequest, userLoginRequestFlow)\r\n}\r\n\r\n/** Выход пользователя из системы (logout) */\r\nexport function* userLogoutRequestFlow() {\r\n  yield call([authService, authService.removeToken])\r\n  yield put(userFetchSuccess(false))\r\n  yield put(setActiveChannelId(''))\r\n  yield call([WS, WS.disconnect])\r\n}\r\nexport function* userLogoutWatcher() {\r\n  yield takeLatest(userLogoutRequest, userLogoutRequestFlow)\r\n}\r\n\r\nexport default function* generator() {\r\n  yield fork(userLoginWatcher)\r\n  yield fork(userLogoutWatcher)\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport { handleActions } from 'redux-actions'\r\nimport { UserDTO } from '../../services/auth'\r\nimport { userFetchSuccess, userFetchFailure } from './actions'\r\n\r\nexport interface IAuthState {\r\n  user: UserDTO\r\n}\r\n\r\nexport const initialState = {\r\n  user: null\r\n}\r\n\r\nconst user = handleActions(\r\n  {\r\n    [userFetchSuccess]: (_state, action) => action.payload,\r\n    [userFetchFailure]: () => false\r\n  },\r\n  null\r\n)\r\n\r\nexport default combineReducers<IAuthState>({\r\n  user\r\n})\r\n","import { combineReducers } from 'redux'\r\nimport { handleActions } from 'redux-actions'\r\nimport {\r\n  setActiveChannelId,\r\n  initChannelsData,\r\n  addChannelMessage\r\n} from './actions'\r\n\r\nexport interface IChatState {\r\n  activeChannelId: string\r\n  channels: Object\r\n}\r\n\r\nexport const initialState = {\r\n  activeChannelId: '',\r\n  channels: {}\r\n}\r\n\r\nconst activeChannelId = handleActions(\r\n  {\r\n    [setActiveChannelId]: (_state, action) => action.payload\r\n  },\r\n  ''\r\n)\r\n\r\nconst channels = handleActions(\r\n  {\r\n    [initChannelsData]: (_state, action) => action.payload,\r\n    [addChannelMessage]: (state, action) => ({\r\n      ...state,\r\n      [action.payload.activeChannelId]: {\r\n        ...state[action.payload.activeChannelId],\r\n        messages: [\r\n          ...state[action.payload.activeChannelId].messages,\r\n          action.payload.message\r\n        ]\r\n      }\r\n    })\r\n  },\r\n  null\r\n)\r\n\r\nexport default combineReducers<IChatState>({\r\n  activeChannelId,\r\n  channels\r\n})\r\n","import { call, put } from 'redux-saga/effects'\nimport { userFetchSuccess, userFetchFailure } from './Auth/actions'\nimport authService from '../services/auth'\nimport WS from '../services/socket'\nimport { initChannelsData } from './Chat/actions'\n\n/** Launch saga once when on app start */\nconst launchSaga = function* launchSaga() {\n  try {\n    const token = yield call([authService, authService.getToken])\n\n    if (!token) {\n      yield put(userFetchFailure())\n      return\n    }\n    const { data, message } = yield call(\n      [authService, authService.fetchByToken],\n      { token }\n    )\n\n    if (message === 'TokenExpiredError' || message === 'JsonWebTokenError') {\n      yield call([authService, authService.removeToken])\n      yield put(userFetchFailure())\n    }\n\n    if (data) {\n      yield put(userFetchSuccess(data))\n      const channelsData = yield call([WS, WS.connect], data)\n      yield put(initChannelsData(channelsData))\n    }\n  } catch (error) {\n    yield call([authService, authService.removeToken])\n    yield put(userFetchFailure(error))\n  }\n}\n\nexport default launchSaga\n","import { combineReducers } from 'redux'\nimport { fork } from 'redux-saga/effects'\nimport authSagas from './Auth/sagas'\nimport auth, { IAuthState } from './Auth/reducer'\nimport chat, { IChatState } from './Chat/reducer'\nimport launchSaga from './launchSaga'\n\n// Root state interface\nexport interface RootState {\n  auth: IAuthState\n  chat: IChatState\n}\n\nexport const initialState = {\n  auth: { user: null }\n}\n\n// Root reducer\nexport default combineReducers({ auth, chat })\n\n// Root saga\nexport function* rootSaga() {\n  yield fork(authSagas)\n  yield fork(launchSaga)\n}\n","import { createStore, compose, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport createSagaMiddleware from 'redux-saga'\nimport rootReducer, { rootSaga } from '.'\n\nconst createAppStore = () => {\n  const sagaMiddleware = createSagaMiddleware()\n  const store = createStore(\n    rootReducer,\n    compose(composeWithDevTools(applyMiddleware(sagaMiddleware)))\n  )\n\n  sagaMiddleware.run(rootSaga)\n  return store\n}\n\nexport default createAppStore\n","import { StrictMode } from 'react'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport { render } from 'react-dom'\nimport App from './components/App'\nimport './index.scss'\nimport reportWebVitals from './reportWebVitals'\nimport createAppStore from './modules/store'\n\nconst store = createAppStore()\n\nrender(\n  <StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}