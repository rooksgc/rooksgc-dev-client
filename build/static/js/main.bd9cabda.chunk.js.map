{"version":3,"sources":["hooks/useShallowEqualSelector.ts","components/MainMenu/index.tsx","hooks/useActions.ts","modules/Auth/actions.ts","components/UserMenu/index.tsx","containers/Private.tsx","components/App/Header/index.tsx","hooks/useEscape.ts","modules/Chat/actions.ts","components/App/Sidebar/index.tsx","components/Chat/Messages/index.tsx","components/Chat/InputMessage/index.tsx","services/socket.ts","components/Chat/index.tsx","services/auth.ts","components/Login/index.tsx","components/Register/index.tsx","components/Recover/index.tsx","components/ChangePassword/index.tsx","components/Activation/index.tsx","containers/PrivateRoute.tsx","components/UserProfile/index.tsx","components/Routes/index.tsx","components/App/index.tsx","reportWebVitals.ts","modules/Auth/sagas.ts","modules/Auth/reducer.ts","modules/Chat/reducer.ts","modules/launchSaga.ts","modules/index.ts","modules/store.ts","index.tsx"],"names":["useShallowEqualSelector","selector","useSelector","shallowEqual","menuItems","key","label","path","icon","PieChartOutlined","MainMenu","location","useLocation","history","useHistory","user","state","auth","find","item","pathname","mode","selectedKeys","onClick","clicked","_item","push","map","Item","useActions","actions","deps","dispatch","useDispatch","useMemo","Array","isArray","a","bindActionCreators","userLoginRequest","createAction","userLogoutRequest","userFetchSuccess","userFetchFailure","UserMenu","dispatchUserLogoutRequest","menu","event","ProfileOutlined","Divider","LogoutOutlined","overlay","trigger","className","UserOutlined","PrivateContainer","children","AntHeader","Layout","Header","Private","useEscape","onEscape","useEffect","handleEsc","window","addEventListener","removeEventListener","setActiveChannelId","initChannelsData","addChannelMessage","Sider","channels","id","DesktopOutlined","Sidebar","useState","collapsed","setCollapsed","dispatchActiveChannelId","activeChannelId","chat","collapsible","onCollapse","isCollapsed","theme","Messages","messages","data","length","text","from","InputMessage","sendMessage","Form","useForm","form","onFinish","values","resetFields","error","console","log","size","required","name","autoFocus","placeholder","htmlType","type","SendOutlined","memo","WS","socket","undefined","connect","io","disconnect","subscribeToChannels","channelsList","emit","addMessageToChannel","payload","Chat","dispatchAddChannelMessage","onSendMessage","useCallback","message","nanoid","channelsData","AUTH_TOKEN_STORAGE_KEY","makeError","response","status","AuthService","getAllUsers","send","method","endpoint","register","activate","code","login","fetchByToken","recover","checkSecret","changePassword","getToken","localStorage","getItem","setToken","setItem","removeToken","removeItem","axios","interceptors","request","use","config","token","headers","Authorization","Login","emptyMessage","alert","setAlert","loading","setLoading","dispatchUserLoginRequest","email","password","authService","title","initialValues","remember","rules","min","prefix","MailOutlined","Password","LockOutlined","noStyle","to","indicator","LoadingOutlined","style","fontSize","spin","delay","block","Register","validateTrigger","pattern","dependencies","getFieldValue","validator","_","value","Promise","reject","Error","resolve","disabled","Recover","ChangePassword","useParams","secretError","setSecretError","changeSuccess","setChangeSuccess","secretType","match","Activation","activateUser","PrivateRoute","Component","component","rest","render","routeProps","defaultProps","UserProfile","role","bordered","maxWidth","Routes","exact","Content","App","SR","useRef","current","on","channelId","off","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","userLoginRequestFlow","userLoginWatcher","userLogoutRequestFlow","userLogoutWatcher","generator","put","call","reduce","acc","channel","takeLatest","fork","handleActions","_state","action","combineReducers","launchSaga","rootSaga","authSagas","store","sagaMiddleware","createSagaMiddleware","createStore","rootReducer","compose","composeWithDevTools","applyMiddleware","run","createAppStore","document","getElementById"],"mappings":"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","file":"static/js/main.bd9cabda.chunk.js","sourcesContent":["import { useSelector, shallowEqual } from 'react-redux'\nimport { RootState } from '../modules'\n\nconst useShallowEqualSelector = (selector: any) =>\n  useSelector<RootState>(selector, shallowEqual)\n\nexport default useShallowEqualSelector\n","import { FC } from 'react'\nimport { useLocation, useHistory } from 'react-router-dom'\nimport { Menu } from 'antd'\nimport { PieChartOutlined } from '@ant-design/icons'\nimport useShallowEqualSelector from '../../hooks/useShallowEqualSelector'\n\nconst menuItems = [\n  {\n    key: 'login',\n    label: 'Войти',\n    path: '/auth/login',\n    icon: <PieChartOutlined />\n  },\n  {\n    key: 'register',\n    label: 'Регистрация',\n    path: '/auth/register',\n    icon: <PieChartOutlined />\n  }\n]\n\nconst MainMenu: FC = () => {\n  const location = useLocation()\n  const history = useHistory()\n  const user = useShallowEqualSelector((state) => state.auth.user)\n\n  const key = menuItems.find((item) => location.pathname === item.path)?.key\n  if (user && !key) return null\n\n  const onClickMenu = (item) => {\n    if (item.key === key) return\n    const clicked = menuItems.find((_item) => _item.key === item.key)\n    history.push(clicked.path)\n  }\n\n  return (\n    <Menu mode=\"horizontal\" selectedKeys={[key]} onClick={onClickMenu}>\n      {menuItems.map((item) => (\n        <Menu.Item key={item.key} icon={item.icon}>\n          {item.label}\n        </Menu.Item>\n      ))}\n    </Menu>\n  )\n}\n\nexport default MainMenu\n","import { bindActionCreators } from 'redux'\nimport { useDispatch } from 'react-redux'\nimport { useMemo } from 'react'\n\nconst useActions = (actions, deps) => {\n  const dispatch = useDispatch()\n\n  return useMemo(\n    () => {\n      if (Array.isArray(actions)) {\n        return actions.map((a) => bindActionCreators(a, dispatch))\n      }\n      return bindActionCreators(actions, dispatch)\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    deps ? [dispatch, ...deps] : [dispatch]\n  )\n}\n\nexport default useActions\n","import { createAction } from 'redux-actions'\r\n\r\n/** Записать токен пользователя в стор */\r\nexport const userLoginRequest: any = createAction('AUTH/USER_LOGIN_REQUEST')\r\n\r\n/** Выход пользователя из системы (logout) */\r\nexport const userLogoutRequest: any = createAction('AUTH/USER_LOGOUT_REQUEST')\r\n\r\n/** Записать объект пользователя в стор */\r\nexport const userFetchSuccess: any = createAction('AUTH/USER_FETCH_SUCCESS')\r\n\r\n/** Ошибка получения объекта пользователя */\r\nexport const userFetchFailure: any = createAction('AUTH/USER_FETCH_FAILURE')\r\n","import { FC } from 'react'\nimport { useLocation, useHistory } from 'react-router-dom'\nimport { Menu, Dropdown, Avatar } from 'antd'\nimport {\n  UserOutlined,\n  LogoutOutlined,\n  ProfileOutlined\n} from '@ant-design/icons'\nimport useActions from '../../hooks/useActions'\nimport { userLogoutRequest } from '../../modules/Auth/actions'\n\nconst UserMenu: FC = () => {\n  const location = useLocation()\n  const history = useHistory()\n  const [dispatchUserLogoutRequest] = useActions([userLogoutRequest], null)\n\n  const handleMenuClick = (event) => {\n    const { key } = event\n    if (location.pathname === `/user/${key}`) return\n\n    switch (key) {\n      case 'profile':\n        history.push('/user/profile')\n        break\n      case 'logout':\n        dispatchUserLogoutRequest()\n        history.push('/auth/login')\n        break\n      default:\n        break\n    }\n  }\n\n  const menu = (\n    <Menu onClick={handleMenuClick}>\n      <Menu.Item key=\"profile\" icon={<ProfileOutlined />}>\n        Профиль\n      </Menu.Item>\n      <Menu.Divider />\n      <Menu.Item key=\"logout\" icon={<LogoutOutlined />}>\n        Выход\n      </Menu.Item>\n    </Menu>\n  )\n\n  return (\n    <Dropdown overlay={menu} trigger={['click']}>\n      <Avatar className=\"user-profile\" icon={<UserOutlined />} />\n    </Dropdown>\n  )\n}\n\nexport default UserMenu\n","import useShallowEqualSelector from '../hooks/useShallowEqualSelector'\n\nconst PrivateContainer = ({ children }) => {\n  const user = useShallowEqualSelector((state) => state.auth.user)\n  if (!user) return null\n\n  return children\n}\n\nexport default PrivateContainer\n","import { Layout } from 'antd'\nimport MainMenu from '../../MainMenu'\nimport UserMenu from '../../UserMenu'\nimport PrivateContainer from '../../../containers/Private'\n\nconst { Header: AntHeader } = Layout\n\nconst Header = () => (\n  <AntHeader className=\"header background-white\">\n    <div className=\"header-menu\">\n      <MainMenu />\n      <PrivateContainer>\n        <UserMenu />\n      </PrivateContainer>\n    </div>\n  </AntHeader>\n)\n\nexport default Header\n","import { useEffect } from 'react'\n\nconst useEscape = (onEscape: () => any) => {\n  useEffect(() => {\n    const handleEsc = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') onEscape()\n    }\n    window.addEventListener('keydown', handleEsc)\n\n    return () => {\n      window.removeEventListener('keydown', handleEsc)\n    }\n  }, [onEscape])\n}\n\nexport default useEscape\n","import { createAction } from 'redux-actions'\r\n\r\n/** Получить активную комнату чата */\r\nexport const setActiveChannelId: any = createAction(\r\n  'CHAT/SET_ACTIVE_CHANNEL_ID'\r\n)\r\n/** Начальное состояние каналов на момент захода пользователя */\r\nexport const initChannelsData: any = createAction('CHAT/INIT_CHANNELS_DATA')\r\n/** Добавить сообщение в чат канала */\r\nexport const addChannelMessage: any = createAction('CHAT/ADD_CHANNEL_MESSAGE')\r\n","import { FC, useState } from 'react'\nimport { Layout, Menu } from 'antd'\nimport { useLocation, useHistory } from 'react-router-dom'\nimport { DesktopOutlined } from '@ant-design/icons'\nimport PrivateContainer from '../../../containers/Private'\nimport useEscape from '../../../hooks/useEscape'\nimport useShallowEqualSelector from '../../../hooks/useShallowEqualSelector'\nimport { setActiveChannelId } from '../../../modules/Chat/actions'\nimport useActions from '../../../hooks/useActions'\n\nconst { Sider } = Layout\n\nconst channels = [\n  {\n    id: 1,\n    label: 'Общий чат',\n    icon: <DesktopOutlined />\n  },\n  {\n    id: 2,\n    label: 'Тестовый канал',\n    icon: <DesktopOutlined />\n  }\n]\n\nconst Sidebar: FC = () => {\n  const [collapsed, setCollapsed] = useState(false)\n  const location = useLocation()\n  const history = useHistory()\n  const [dispatchActiveChannelId] = useActions([setActiveChannelId], null)\n  const activeChannelId = useShallowEqualSelector(\n    (state) => state.chat.activeChannelId\n  )\n\n  useEscape(() => {\n    if (location.pathname !== '/' || !activeChannelId) return\n    dispatchActiveChannelId('')\n  })\n\n  const onCollapse = (isCollapsed) => {\n    setCollapsed(isCollapsed)\n  }\n\n  const onClickMenu = ({ key }) => {\n    if (key === activeChannelId) return\n    if (location.pathname !== '/') {\n      history.push('/')\n    }\n    dispatchActiveChannelId(key)\n  }\n\n  return (\n    <PrivateContainer>\n      <Sider\n        collapsible\n        collapsed={collapsed}\n        onCollapse={onCollapse}\n        className=\"sider\"\n        theme=\"dark\"\n      >\n        <Menu\n          theme=\"dark\"\n          mode=\"inline\"\n          selectedKeys={[activeChannelId as string]}\n          onClick={onClickMenu}\n        >\n          {channels.map((item) => (\n            <Menu.Item key={item.id} icon={item.icon}>\n              {item.label}\n            </Menu.Item>\n          ))}\n        </Menu>\n      </Sider>\n    </PrivateContainer>\n  )\n}\n\nexport default Sidebar\n","import { FC } from 'react'\n\ninterface IMessagesProps {\n  data: IChannelData\n}\n\ninterface IChannelData {\n  title: string\n  messages: IMessage[]\n}\n\ninterface IMessage {\n  id: string\n  text: string\n  from: string\n}\n\nconst Messages: FC<IMessagesProps> = ({\n  data: { messages }\n}: IMessagesProps) => {\n  if (!messages?.length) return <div className=\"chat-window\" />\n\n  return (\n    <div className=\"chat-window\">\n      {messages.map(({ id, text, from }) => (\n        <div key={id}>\n          {from}: {text}\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default Messages\n","import { FC, memo } from 'react'\nimport { Form, Input, Button } from 'antd'\nimport { SendOutlined } from '@ant-design/icons'\n\ninterface FormValues {\n  text: string\n}\n\ninterface IChatInputProps {\n  sendMessage: (text: string) => void\n}\n\nconst InputMessage: FC<IChatInputProps> = ({ sendMessage }) => {\n  const [form] = Form.useForm()\n\n  const onFinish = async (values: FormValues) => {\n    try {\n      const { text } = values\n      sendMessage(text)\n      form.resetFields()\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(error)\n    }\n  }\n  return (\n    <div className=\"chat-input\">\n      <Form size=\"large\" className=\"input-form\" form={form} onFinish={onFinish}>\n        <Form.Item className=\"input-messaage\" required name=\"text\">\n          <Input autoFocus placeholder=\"Введите сообщение\" />\n        </Form.Item>\n        <Form.Item className=\"send-button\">\n          <Button htmlType=\"submit\" type=\"primary\" icon={<SendOutlined />}>\n            Отправить\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  )\n}\n\nexport default memo(InputMessage)\n","import { io } from 'socket.io-client'\n\nconst WS = {\n  socket: undefined,\n  connect: () => {\n    if (!WS.socket) {\n      WS.socket = io()\n    }\n  },\n  disconnect: () => {\n    WS.socket.disconnect()\n    WS.socket = undefined\n  },\n  subscribeToChannels: (channelsList: number[]): void => {\n    WS.socket.emit('channels:subscribe', channelsList)\n  },\n  addMessageToChannel: (payload) => {\n    WS.socket.emit('channel:message:add', payload)\n  }\n}\n\nexport default WS\n","import { useCallback } from 'react'\nimport { nanoid } from 'nanoid'\nimport { UserDTO } from 'src/services/auth'\nimport Messages from './Messages'\nimport InputMessage from './InputMessage'\nimport useShallowEqualSelector from '../../hooks/useShallowEqualSelector'\nimport { addChannelMessage } from '../../modules/Chat/actions'\nimport useActions from '../../hooks/useActions'\nimport WS from '../../services/socket'\n\nconst Chat = () => {\n  const user = useShallowEqualSelector((state) => state.auth.user) as UserDTO\n  const [dispatchAddChannelMessage] = useActions([addChannelMessage], null)\n  const { activeChannelId, channels } = useShallowEqualSelector(\n    (state) => state.chat\n  ) as any\n\n  const onSendMessage = useCallback(\n    (text: string): void => {\n      if (!activeChannelId) return\n      if (!text) return\n\n      const id = nanoid()\n      const message = { id, text, from: user.name }\n\n      dispatchAddChannelMessage({ activeChannelId, message })\n      WS.addMessageToChannel({ activeChannelId, message })\n    },\n    [activeChannelId, dispatchAddChannelMessage, user.name]\n  )\n\n  if (!user || !activeChannelId || !channels) return null\n\n  const channelsData = channels[activeChannelId as string]\n  if (!channelsData) return null\n\n  return (\n    <div className=\"chat-wrapper\">\n      <Messages data={channelsData} />\n      <InputMessage sendMessage={onSendMessage} />\n    </div>\n  )\n}\n\nexport default Chat\n","import axios, { AxiosRequestConfig, AxiosResponse } from 'axios'\n\nexport interface ServerResponse {\n  type: any\n  message?: string\n  data?: any\n  errors?: string[]\n  token?: string\n}\n\nexport interface UserLoginRequestDTO {\n  email: string\n  password: string\n}\n\nexport interface UserCreateRequestDTO {\n  name: string\n  email: string\n  password: string\n}\n\nexport interface UserDTO {\n  id: number\n  name: string\n  email: string\n  role: string\n}\n\nexport interface UserRecoverPasswordRequestDTO {\n  email: string\n}\n\nexport interface CheckSecretRequestDTO {\n  code: string\n  secretType: string\n}\n\nexport interface ChangePasswordRequestDTO {\n  code: string\n  password: string\n}\n\nexport interface UserFetchByTokenRequestDTO {\n  token: string\n}\n\n/** Сообщение при недоступном соединении */\nexport const SERVER_UNAVAILABLE =\n  'Сервер не отвечает или временно недоступен. Попробуйте повторить запрос позднее.'\n\n/** Ключ, по которому в localStorage хранится токен */\nconst AUTH_TOKEN_STORAGE_KEY = 'auth'\n\n/** Отказ в предоставлении ресурса из-за неверного токена */\nexport const AUTH_REJECTION_MESSAGE =\n  'Войдите или зарегистрируйтесь для просмотра данного содержимого.'\n\nexport const makeError = (error: any): ServerResponse => {\n  const {\n    response: { data, status }\n  } = error\n\n  if (typeof data === 'string' && (status === 502 || status === 500)) {\n    return {\n      type: 'error',\n      message: SERVER_UNAVAILABLE\n    }\n  }\n\n  if (data?.message === 'No authorization token was found') {\n    return {\n      type: 'error',\n      message: AUTH_REJECTION_MESSAGE\n    }\n  }\n\n  return data\n}\n\nconst AuthService = {\n  /** Получить список всех пользователей */\n  getAllUsers: async (): Promise<ServerResponse> =>\n    AuthService.send({\n      method: 'get',\n      endpoint: '/api/v1/auth/users'\n    }),\n  /** Регистрация нового пользователя */\n  register: async (payload: UserCreateRequestDTO): Promise<ServerResponse> =>\n    AuthService.send({\n      method: 'put',\n      endpoint: '/api/v1/auth/register',\n      payload\n    }),\n\n  /** Активация пользователя по коду из письма */\n  activate: async (code: string): Promise<ServerResponse> =>\n    AuthService.send({\n      method: 'patch',\n      endpoint: `/api/v1/auth/activate/${code}`\n    }),\n\n  /** Вход пользователя в систему и полуение токена */\n  login: async (payload: UserLoginRequestDTO): Promise<ServerResponse> =>\n    AuthService.send({\n      method: 'post',\n      endpoint: '/api/v1/auth/login',\n      payload\n    }),\n\n  /** Попытка получить объект пользователя по токену */\n  fetchByToken: async (\n    payload: UserFetchByTokenRequestDTO\n  ): Promise<ServerResponse> =>\n    AuthService.send({\n      method: 'post',\n      endpoint: '/api/v1/auth/fetch-by-token',\n      payload\n    }),\n\n  /** Запрос на изменение пароля, отправка письма со ссылкой на email */\n  recover: async (\n    payload: UserRecoverPasswordRequestDTO\n  ): Promise<ServerResponse> =>\n    AuthService.send({\n      method: 'post',\n      endpoint: '/api/v1/auth/recover',\n      payload\n    }),\n\n  /** Проверка секретного ключа для доступа к форме восстановления пароля */\n  checkSecret: async (\n    payload: CheckSecretRequestDTO\n  ): Promise<ServerResponse> =>\n    AuthService.send({\n      method: 'post',\n      endpoint: '/api/v1/auth/check-secret',\n      payload\n    }),\n\n  /** Изменение пароля пользователя */\n  changePassword: async (\n    payload: ChangePasswordRequestDTO\n  ): Promise<ServerResponse> =>\n    AuthService.send({\n      method: 'patch',\n      endpoint: '/api/v1/auth/change-password',\n      payload\n    }),\n\n  getToken: (): string | null => localStorage.getItem(AUTH_TOKEN_STORAGE_KEY),\n\n  setToken: (payload: string): void =>\n    localStorage.setItem(AUTH_TOKEN_STORAGE_KEY, payload),\n\n  removeToken: (): void => localStorage.removeItem(AUTH_TOKEN_STORAGE_KEY),\n\n  send: async ({ method, endpoint, payload = {} }): Promise<ServerResponse> => {\n    try {\n      const response: AxiosResponse = await axios[method](endpoint, payload)\n      return response.data\n    } catch (error) {\n      return makeError(error)\n    }\n  }\n}\n\naxios.interceptors.request.use(\n  (config: AxiosRequestConfig) => {\n    const token = AuthService.getToken()\n\n    if (token) {\n      // eslint-disable-next-line no-param-reassign\n      config.headers = {\n        Authorization: `Bearer ${token}`\n      }\n    }\n\n    return config\n  },\n  (error) => makeError(error)\n)\n\nexport default AuthService\n","import { FC, useState } from 'react'\nimport { Form, Input, Button, Card, Alert, Spin } from 'antd'\nimport { MailOutlined, LockOutlined, LoadingOutlined } from '@ant-design/icons'\nimport { Link, useHistory } from 'react-router-dom'\nimport useActions from '../../hooks/useActions'\nimport authService from '../../services/auth'\nimport { userLoginRequest } from '../../modules/Auth/actions'\n\ninterface FormValues {\n  email: string\n  password: string\n}\n\nconst Login: FC = () => {\n  const emptyMessage = { type: '', message: '' }\n  const [form] = Form.useForm()\n  const [alert, setAlert] = useState(emptyMessage)\n  const [loading, setLoading] = useState(false)\n  const [dispatchUserLoginRequest] = useActions([userLoginRequest], null)\n  const history = useHistory()\n\n  const onFinish = async (values: FormValues) => {\n    try {\n      setAlert(emptyMessage)\n      setLoading(true)\n\n      const { email, password } = values\n      const { type, message, token, data } = await authService.login({\n        email,\n        password\n      })\n\n      if (message) {\n        setAlert({ type, message })\n        setLoading(false)\n        if (type === 'error') return\n      }\n\n      dispatchUserLoginRequest({ data, token })\n      setLoading(false)\n\n      history.push('/')\n    } catch (error) {\n      setAlert(error)\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"flex-center\">\n      <Card className=\"card\" title=\"Вход в систему\">\n        {alert.message && (\n          <Alert\n            className=\"alert\"\n            message={alert.message}\n            type={alert.type as any}\n          />\n        )}\n        <Form\n          form={form}\n          name=\"login\"\n          className=\"login-form\"\n          initialValues={{ remember: true }}\n          onFinish={onFinish}\n        >\n          <Form.Item\n            name=\"email\"\n            rules={[\n              {\n                required: true,\n                type: 'email',\n                min: 4,\n                message: 'Некорректный email'\n              }\n            ]}\n          >\n            <Input prefix={<MailOutlined />} placeholder=\"Email\" size=\"large\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"password\"\n            rules={[{ required: true, min: 6, message: 'Минимум 6 символов' }]}\n          >\n            <Input.Password\n              placeholder=\"Пароль\"\n              prefix={<LockOutlined />}\n              size=\"large\"\n            />\n          </Form.Item>\n\n          <Form.Item>\n            <Form.Item name=\"register\" noStyle>\n              <Link to=\"/auth/register\">Регистрация</Link>\n            </Form.Item>\n\n            <Link className=\"link-recover\" to=\"/auth/recover\">\n              Забыли пароль?\n            </Link>\n          </Form.Item>\n\n          {loading && (\n            <Spin\n              className=\"center\"\n              indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n              delay={500}\n            />\n          )}\n\n          <Button size=\"large\" type=\"primary\" htmlType=\"submit\" block>\n            Войти\n          </Button>\n        </Form>\n      </Card>\n    </div>\n  )\n}\n\nexport default Login\n","import { FC, useState } from 'react'\nimport { Form, Input, Button, Card, Alert, Spin } from 'antd'\nimport {\n  UserOutlined,\n  LockOutlined,\n  MailOutlined,\n  LoadingOutlined\n} from '@ant-design/icons'\nimport authService from '../../services/auth'\n\ninterface FormValues {\n  name: string\n  email: string\n  password: string\n}\n\nconst Register: FC = () => {\n  const emptyMessage = { type: '', message: '' }\n  const [form] = Form.useForm()\n  const [alert, setAlert] = useState(emptyMessage)\n  const [loading, setLoading] = useState(false)\n\n  const onFinish = async (values: FormValues) => {\n    try {\n      setAlert(emptyMessage)\n      setLoading(true)\n\n      const { name, email, password } = values\n      const { type, message } = await authService.register({\n        name,\n        email,\n        password\n      })\n\n      if (message) {\n        setAlert({ type, message })\n        setLoading(false)\n        if (type === 'error') return\n      }\n\n      form.resetFields()\n      setLoading(false)\n    } catch (error) {\n      setAlert(error)\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"flex-center\">\n      <Card className=\"card\" title=\"Регистрация\">\n        {alert.message && (\n          <Alert\n            className=\"alert\"\n            message={alert.message}\n            type={alert.type as any}\n          />\n        )}\n        <Form\n          form={form}\n          name=\"register\"\n          initialValues={{ remember: true }}\n          onFinish={onFinish}\n          validateTrigger=\"onBlur\"\n        >\n          <Form.Item\n            name=\"name\"\n            rules={[\n              {\n                required: true,\n                message:\n                  \"Имя должно содержать минимум 4 символа английского или русского алфавита, допустимы цифры и знаки '- _'\",\n                pattern: /^[a-zA-Zа-яА-ЯёЁ0-9-_\\s]{4,}$/\n              }\n            ]}\n          >\n            <Input placeholder=\"Имя\" size=\"large\" prefix={<UserOutlined />} />\n          </Form.Item>\n\n          <Form.Item\n            name=\"email\"\n            rules={[\n              { required: true, type: 'email', message: 'Некорректный email' }\n            ]}\n          >\n            <Input prefix={<MailOutlined />} placeholder=\"Email\" size=\"large\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"password\"\n            rules={[\n              {\n                required: true,\n                message: 'Введите пароль! Минимум 6 символов.',\n                min: 6\n              }\n            ]}\n          >\n            <Input.Password\n              placeholder=\"Пароль\"\n              prefix={<LockOutlined />}\n              size=\"large\"\n            />\n          </Form.Item>\n\n          <Form.Item\n            name=\"confirm-password\"\n            dependencies={['password']}\n            rules={[\n              {\n                required: true,\n                message: 'Введите подтверждение пароля! Минимум 6 символов.',\n                min: 6\n              },\n              ({ getFieldValue }) => ({\n                validator(_, value) {\n                  if (!value || getFieldValue('password') === value) {\n                    return Promise.resolve()\n                  }\n                  return Promise.reject(new Error('Пароли должны совпадать!'))\n                }\n              })\n            ]}\n          >\n            <Input.Password\n              placeholder=\"Пароль еще раз\"\n              prefix={<LockOutlined />}\n              size=\"large\"\n            />\n          </Form.Item>\n\n          {loading && (\n            <Spin\n              className=\"center\"\n              indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n              delay={500}\n            />\n          )}\n\n          <Button\n            className=\"submit-button\"\n            type=\"primary\"\n            htmlType=\"submit\"\n            size=\"large\"\n            block\n            disabled={loading}\n          >\n            Зарегистрироваться\n          </Button>\n        </Form>\n      </Card>\n    </div>\n  )\n}\n\nexport default Register\n","import { FC, useState } from 'react'\nimport { Form, Input, Button, Card, Alert, Spin } from 'antd'\nimport { MailOutlined, LoadingOutlined } from '@ant-design/icons'\nimport authService from '../../services/auth'\n\ninterface FormValues {\n  email: string\n}\n\nconst Recover: FC = () => {\n  const emptyMessage = { type: '', message: '' }\n  const [form] = Form.useForm()\n  const [alert, setAlert] = useState(emptyMessage)\n  const [loading, setLoading] = useState(false)\n\n  const onFinish = async (values: FormValues) => {\n    try {\n      setAlert(emptyMessage)\n      setLoading(true)\n\n      const { email } = values\n      const { type, message } = await authService.recover({\n        email\n      })\n\n      if (message) {\n        setAlert({ type, message })\n        setLoading(false)\n        if (type === 'error') return\n      }\n\n      form.resetFields()\n      setLoading(false)\n    } catch (error) {\n      setAlert(error)\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"flex-center\">\n      <Card className=\"card\" title=\"Восстановление пароля\">\n        {alert.message && (\n          <Alert\n            className=\"alert\"\n            message={alert.message}\n            type={alert.type as any}\n          />\n        )}\n        {alert.type !== 'success' && (\n          <>\n            <p>\n              Укажите email, указанный при регистрации и мы вышлем на него\n              ссылку для восстановления пароля.\n            </p>\n            <Form\n              form={form}\n              name=\"recover\"\n              className=\"login-form\"\n              initialValues={{ remember: true }}\n              onFinish={onFinish}\n              validateTrigger=\"onBlur\"\n            >\n              <Form.Item\n                name=\"email\"\n                rules={[\n                  {\n                    required: true,\n                    type: 'email',\n                    message: 'Некорректный email!'\n                  }\n                ]}\n              >\n                <Input\n                  prefix={<MailOutlined />}\n                  placeholder=\"Email\"\n                  size=\"large\"\n                />\n              </Form.Item>\n\n              {loading && (\n                <Spin\n                  className=\"center\"\n                  indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n                  delay={500}\n                />\n              )}\n\n              <Button\n                size=\"large\"\n                type=\"primary\"\n                htmlType=\"submit\"\n                block\n                disabled={loading}\n              >\n                Восстановить пароль\n              </Button>\n            </Form>\n          </>\n        )}\n      </Card>\n    </div>\n  )\n}\n\nexport default Recover\n","import { FC, useState, useEffect } from 'react'\nimport { useParams, Link } from 'react-router-dom'\nimport { Form, Input, Button, Card, Alert } from 'antd'\nimport { LockOutlined } from '@ant-design/icons'\nimport authService from '../../services/auth'\n\ninterface ChangePasswordParams {\n  code?: string\n}\n\ninterface FormValues {\n  password: string\n  confirmPassword: string\n}\n\nconst ChangePassword: FC = () => {\n  const { code }: ChangePasswordParams = useParams()\n  const emptyMessage = { type: '', message: '' }\n  const [alert, setAlert] = useState(emptyMessage)\n  const [secretError, setSecretError] = useState(false)\n  const [changeSuccess, setChangeSuccess] = useState(false)\n  const [loading, setLoading] = useState(false)\n\n  useEffect(() => {\n    const checkSecret = async () => {\n      const { type, message } = await authService.checkSecret({\n        code,\n        secretType: 'RECOVER_PASSWORD'\n      })\n      if (type === 'error') {\n        setAlert({ type, message })\n        setSecretError(true)\n      }\n    }\n\n    if (\n      code.match(\n        /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i\n      )\n    ) {\n      checkSecret()\n    } else {\n      setAlert({ type: 'error', message: 'Неверный секретный код!' })\n      setSecretError(true)\n    }\n  }, [code])\n\n  const onFinish = async (values: FormValues) => {\n    try {\n      setAlert(emptyMessage)\n      setLoading(true)\n\n      const { password } = values\n      const { type, message } = await authService.changePassword({\n        code,\n        password\n      })\n\n      if (message) {\n        setAlert({ type, message })\n        setLoading(false)\n        if (type === 'error') return\n      }\n\n      setChangeSuccess(true)\n      setLoading(false)\n    } catch (error) {\n      setAlert(error)\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"flex-center\">\n      <Card className=\"card\" title=\"Изменение пароля\">\n        {alert.message && (\n          <Alert\n            className=\"alert\"\n            message={alert.message}\n            type={alert.type as any}\n          />\n        )}\n\n        {changeSuccess && (\n          <p>\n            Теперь Вы можете <Link to=\"/auth/login\">Войти</Link> в приложение\n          </p>\n        )}\n\n        {!secretError && !changeSuccess && (\n          <>\n            <p>Придумайте новый пароль</p>\n            <Form\n              name=\"change-password-request\"\n              initialValues={{ remember: true }}\n              onFinish={onFinish}\n            >\n              <Form.Item\n                name=\"password\"\n                rules={[{ required: true, message: 'Введите пароль!' }]}\n              >\n                <Input.Password\n                  placeholder=\"Пароль\"\n                  prefix={<LockOutlined />}\n                  size=\"large\"\n                />\n              </Form.Item>\n\n              <Form.Item\n                name=\"confirmPassword\"\n                dependencies={['password']}\n                rules={[\n                  { required: true, message: 'Введите подтверждение пароля!' },\n                  ({ getFieldValue }) => ({\n                    validator(_, value) {\n                      if (!value || getFieldValue('password') === value) {\n                        return Promise.resolve()\n                      }\n                      return Promise.reject(\n                        new Error('Пароли должны совпадать!')\n                      )\n                    }\n                  })\n                ]}\n              >\n                <Input.Password\n                  placeholder=\"Пароль еще раз\"\n                  prefix={<LockOutlined />}\n                  size=\"large\"\n                />\n              </Form.Item>\n\n              <Button\n                className=\"submit-button\"\n                type=\"primary\"\n                htmlType=\"submit\"\n                size=\"large\"\n                block\n                disabled={loading}\n              >\n                Изменить пароль\n              </Button>\n            </Form>\n          </>\n        )}\n      </Card>\n    </div>\n  )\n}\n\nexport default ChangePassword\n","import { FC, useState, useEffect } from 'react'\nimport { Card, Alert } from 'antd'\nimport { Link, useParams } from 'react-router-dom'\nimport authService from '../../services/auth'\n\ninterface ActivationParams {\n  code?: string\n}\n\nconst Activation: FC = () => {\n  const { code }: ActivationParams = useParams()\n  const emptyMessage = { type: '', message: '' }\n  const [alert, setAlert] = useState(emptyMessage)\n\n  useEffect(() => {\n    const activateUser = async () => {\n      const { type, message } = await authService.activate(code)\n      if (message) {\n        setAlert({ type, message })\n      }\n    }\n    activateUser()\n  }, [code])\n\n  return (\n    <div className=\"flex-center\">\n      <Card className=\"card\" title=\"Активация нового пользователя\">\n        {alert.message && (\n          <Alert\n            className=\"alert\"\n            message={alert.message}\n            type={alert.type as any}\n          />\n        )}\n        <Link className=\"login-link\" to=\"/auth/login\">\n          Вход\n        </Link>\n        <Link className=\"link-recover\" to=\"/auth/recover\">\n          Восстановить пароль\n        </Link>\n      </Card>\n    </div>\n  )\n}\n\nexport default Activation\n","import { FC } from 'react'\r\nimport { Route, Redirect, RouteProps } from 'react-router-dom'\r\nimport useShallowEqualSelector from '../hooks/useShallowEqualSelector'\r\nimport { RootState } from '../modules'\r\n\r\ninterface PrivateRouteProps extends RouteProps {\r\n  component?: any\r\n  children?: any\r\n}\r\n\r\nconst PrivateRoute: FC<PrivateRouteProps> = ({\r\n  component: Component,\r\n  children,\r\n  ...rest\r\n}) => {\r\n  const user = useShallowEqualSelector((state: RootState) => state.auth.user)\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(routeProps) => {\r\n        if (user === null) return null\r\n\r\n        if (user === false) {\r\n          return (\r\n            <Redirect\r\n              to={{\r\n                pathname: '/auth/login',\r\n                state: { from: routeProps.location }\r\n              }}\r\n            />\r\n          )\r\n        }\r\n\r\n        if (Component) {\r\n          return <Component {...routeProps} />\r\n        }\r\n\r\n        return children\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nPrivateRoute.defaultProps = {\r\n  component: undefined\r\n}\r\n\r\nexport default PrivateRoute\r\n","import { Card } from 'antd'\nimport useShallowEqualSelector from '../../hooks/useShallowEqualSelector'\nimport { UserDTO } from '../../services/auth'\n\nconst UserProfile = () => {\n  const { name, email, role } = useShallowEqualSelector(\n    (state) => state.auth.user\n  ) as UserDTO\n  return (\n    <>\n      <Card title=\"Профиль\" bordered={false} style={{ maxWidth: 500 }}>\n        <p>Имя: {name}</p>\n        <p>Email: {email}</p>\n        <p>Роль: {role}</p>\n      </Card>\n    </>\n  )\n}\n\nexport default UserProfile\n","import { FC } from 'react'\nimport { Switch, Route, Redirect } from 'react-router-dom'\n\nimport Chat from '../Chat'\nimport Login from '../Login'\nimport Register from '../Register'\nimport Recover from '../Recover'\nimport ChangePassword from '../ChangePassword'\nimport Activation from '../Activation'\nimport PrivateRoute from '../../containers/PrivateRoute'\nimport UserProfile from '../UserProfile'\n\nconst Routes: FC = () => (\n  <Switch>\n    <PrivateRoute exact path=\"/\" component={Chat} />\n    <Route path=\"/auth/login\" component={Login} />\n    <Route path=\"/auth/register\" component={Register} />\n    <Route path=\"/auth/activation/:code\" component={Activation} />\n    <Route path=\"/auth/recover\" component={Recover} />\n    <Route path=\"/auth/change-password/:code\" component={ChangePassword} />\n    <PrivateRoute path=\"/user/profile\" component={UserProfile} />\n    <Route path=\"*\">\n      <Redirect to=\"/auth/login\" />\n    </Route>\n  </Switch>\n)\n\nexport default Routes\n","import { FC, useEffect, useRef } from 'react'\nimport { Layout } from 'antd'\nimport Header from './Header'\nimport Sidebar from './Sidebar'\nimport Routes from '../Routes'\nimport { addChannelMessage } from '../../modules/Chat/actions'\nimport useShallowEqualSelector from '../../hooks/useShallowEqualSelector'\nimport useActions from '../../hooks/useActions'\nimport WS from '../../services/socket'\n\nconst { Content } = Layout\n\nconst App: FC = () => {\n  const SR = useRef(null)\n  const [dispatchAddChannelMessage] = useActions([addChannelMessage], null)\n  const { activeChannelId } = useShallowEqualSelector(\n    (state) => state.chat\n  ) as any\n\n  useEffect(() => {\n    if (!WS.socket) return null\n    SR.current = WS.socket\n    SR.current.on(\n      'channel:message:broadcast',\n      ({ activeChannelId: channelId, message, from }) => {\n        dispatchAddChannelMessage({ activeChannelId: channelId, message, from })\n      }\n    )\n\n    return () => {\n      SR.current.off('channel:message:broadcast')\n    }\n  }, [activeChannelId, dispatchAddChannelMessage])\n\n  return (\n    <Layout className=\"wrap-layout\">\n      <Sidebar />\n      <Layout className=\"site-layout\">\n        <Header />\n        <Content className=\"content\">\n          <Routes />\n        </Content>\n      </Layout>\n    </Layout>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import { takeLatest, put, call, fork } from 'redux-saga/effects'\r\nimport {\r\n  userLoginRequest,\r\n  userLogoutRequest,\r\n  userFetchSuccess\r\n} from './actions'\r\nimport { initChannelsData, setActiveChannelId } from '../Chat/actions'\r\nimport authService from '../../services/auth'\r\nimport WS from '../../services/socket'\r\n\r\n/** Успешный вход пользователя */\r\nexport function* userLoginRequestFlow({ payload: { data, token } }) {\r\n  yield put(userFetchSuccess(data))\r\n  yield call([authService, authService.setToken], token)\r\n  yield call([WS, WS.connect])\r\n\r\n  // 1. Get channels list for userId [1, 2, 4, 14]\r\n  const channelsList = [1, 2]\r\n  // 2. Fill Channels with info (messages and metadata)\r\n  const channelsData = channelsList.reduce(\r\n    (acc, channel) => ({\r\n      ...acc,\r\n      [channel]: {\r\n        title: `channel${channel}`,\r\n        messages: []\r\n      }\r\n    }),\r\n    {}\r\n  )\r\n  // 3. Send socket message to obtain channels subscription\r\n  yield call([WS, WS.subscribeToChannels], channelsList)\r\n  // 4. Fill redux state with data\r\n  yield put(initChannelsData(channelsData))\r\n}\r\nexport function* userLoginWatcher() {\r\n  yield takeLatest(userLoginRequest, userLoginRequestFlow)\r\n}\r\n\r\n/** Выход пользователя из системы (logout) */\r\nexport function* userLogoutRequestFlow() {\r\n  yield call([authService, authService.removeToken])\r\n  yield put(userFetchSuccess(false))\r\n  yield put(setActiveChannelId(''))\r\n  yield call([WS, WS.disconnect])\r\n}\r\nexport function* userLogoutWatcher() {\r\n  yield takeLatest(userLogoutRequest, userLogoutRequestFlow)\r\n}\r\n\r\nexport default function* generator() {\r\n  yield fork(userLoginWatcher)\r\n  yield fork(userLogoutWatcher)\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport { handleActions } from 'redux-actions'\r\nimport { UserDTO } from '../../services/auth'\r\nimport { userFetchSuccess, userFetchFailure } from './actions'\r\n\r\nexport interface IAuthState {\r\n  user: UserDTO\r\n}\r\n\r\nexport const initialState = {\r\n  user: null\r\n}\r\n\r\nconst user = handleActions(\r\n  {\r\n    [userFetchSuccess]: (_state, action) => action.payload,\r\n    [userFetchFailure]: () => false\r\n  },\r\n  null\r\n)\r\n\r\nexport default combineReducers<IAuthState>({\r\n  user\r\n})\r\n","import { combineReducers } from 'redux'\r\nimport { handleActions } from 'redux-actions'\r\nimport {\r\n  setActiveChannelId,\r\n  initChannelsData,\r\n  addChannelMessage\r\n} from './actions'\r\n\r\nexport interface IChatState {\r\n  activeChannelId: string\r\n  channels: Object\r\n}\r\n\r\nexport const initialState = {\r\n  activeChannelId: '',\r\n  channels: {}\r\n}\r\n\r\nconst activeChannelId = handleActions(\r\n  {\r\n    [setActiveChannelId]: (_state, action) => action.payload\r\n  },\r\n  ''\r\n)\r\n\r\nconst channels = handleActions(\r\n  {\r\n    [initChannelsData]: (_state, action) => action.payload,\r\n    [addChannelMessage]: (state, action) => ({\r\n      ...state,\r\n      [action.payload.activeChannelId]: {\r\n        ...state[action.payload.activeChannelId],\r\n        messages: [\r\n          ...state[action.payload.activeChannelId].messages,\r\n          action.payload.message\r\n        ]\r\n      }\r\n    })\r\n  },\r\n  null\r\n)\r\n\r\nexport default combineReducers<IChatState>({\r\n  activeChannelId,\r\n  channels\r\n})\r\n","import { call, put } from 'redux-saga/effects'\nimport { userFetchSuccess, userFetchFailure } from './Auth/actions'\nimport authService from '../services/auth'\nimport WS from '../services/socket'\nimport { initChannelsData } from './Chat/actions'\n\n/** Launch saga once when on app start */\nconst launchSaga = function* launchSaga() {\n  try {\n    const token = yield call([authService, authService.getToken])\n\n    if (!token) {\n      yield put(userFetchFailure())\n      return\n    }\n    const { data, message } = yield call(\n      [authService, authService.fetchByToken],\n      { token }\n    )\n\n    if (message === 'TokenExpiredError' || message === 'JsonWebTokenError') {\n      yield call([authService, authService.removeToken])\n      yield put(userFetchFailure())\n    }\n\n    if (data) {\n      yield put(userFetchSuccess(data))\n      yield call([WS, WS.connect])\n\n      // 1. Get channels list for userId [1, 2, 4, 14]\n      const channelsList = [1, 2]\n      // 2. Fill Channels with info (messages and metadata)\n      const channelsData = channelsList.reduce(\n        (acc, channel) => ({\n          ...acc,\n          [channel]: {\n            title: `channel${channel}`,\n            messages: []\n          }\n        }),\n        {}\n      )\n      // 3. Send socket message to obtain channels subscription\n      yield call([WS, WS.subscribeToChannels], channelsList)\n      // 4. Fill redux state with data\n      yield put(initChannelsData(channelsData))\n    }\n  } catch (error) {\n    yield call([authService, authService.removeToken])\n    yield put(userFetchFailure(error))\n  }\n}\n\nexport default launchSaga\n","import { combineReducers } from 'redux'\nimport { fork } from 'redux-saga/effects'\nimport authSagas from './Auth/sagas'\nimport auth, { IAuthState } from './Auth/reducer'\nimport chat, { IChatState } from './Chat/reducer'\nimport launchSaga from './launchSaga'\n\n// Root state interface\nexport interface RootState {\n  auth: IAuthState\n  chat: IChatState\n}\n\nexport const initialState = {\n  auth: { user: null }\n}\n\n// Root reducer\nexport default combineReducers({ auth, chat })\n\n// Root saga\nexport function* rootSaga() {\n  yield fork(authSagas)\n  yield fork(launchSaga)\n}\n","import { createStore, compose, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport createSagaMiddleware from 'redux-saga'\nimport rootReducer, { rootSaga } from '.'\n\nconst createAppStore = () => {\n  const sagaMiddleware = createSagaMiddleware()\n  const store = createStore(\n    rootReducer,\n    compose(composeWithDevTools(applyMiddleware(sagaMiddleware)))\n  )\n\n  sagaMiddleware.run(rootSaga)\n  return store\n}\n\nexport default createAppStore\n","import { StrictMode } from 'react'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport { render } from 'react-dom'\nimport App from './components/App'\nimport './index.scss'\nimport reportWebVitals from './reportWebVitals'\nimport createAppStore from './modules/store'\n\nconst store = createAppStore()\n\nrender(\n  <StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}